Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AUTO
    CONST
    EXTERN
    GOTO
    REGISTER
    SHORT
    SIGNED
    STATIC
    TYPEDEF
    UNION
    UNSIGNED
    VOLATILE

Grammar

Rule 0     S' -> program
Rule 1     program -> translation_unit
Rule 2     translation_unit -> external_declaration
Rule 3     translation_unit -> translation_unit external_declaration
Rule 4     external_declaration -> function_definition
Rule 5     external_declaration -> declaration
Rule 6     function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym
Rule 7     function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym
Rule 8     function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym
Rule 9     function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym
Rule 10    func_scope -> L_PAREN
Rule 11    func_rparen_1 -> R_PAREN
Rule 12    func_rparen_2 -> R_PAREN
Rule 13    primary_expression -> IDENTIFIER
Rule 14    primary_expression -> INT_CONSTANT
Rule 15    primary_expression -> HEX_CONSTANT
Rule 16    primary_expression -> OCTAL_CONSTANT
Rule 17    primary_expression -> EXPONENT_CONSTANT
Rule 18    primary_expression -> REAL_CONSTANT
Rule 19    primary_expression -> CHAR_CONSTANT
Rule 20    primary_expression -> STR_CONSTANT
Rule 21    primary_expression -> L_PAREN expression R_PAREN
Rule 22    primary_expression -> TRUE
Rule 23    primary_expression -> FALSE
Rule 24    primary_expression -> NULL
Rule 25    postfix_expression -> primary_expression
Rule 26    postfix_expression -> postfix_expression INCREMENT
Rule 27    postfix_expression -> postfix_expression DECREMENT
Rule 28    postfix_expression -> postfix_expression L_SQBR expression R_SQBR
Rule 29    postfix_expression -> postfix_expression L_PAREN R_PAREN
Rule 30    postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN
Rule 31    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 32    postfix_expression -> postfix_expression ARROW IDENTIFIER
Rule 33    argument_expression_list -> assignment_expression
Rule 34    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 35    unary_expression -> postfix_expression
Rule 36    unary_expression -> INCREMENT unary_expression
Rule 37    unary_expression -> DECREMENT unary_expression
Rule 38    unary_expression -> unary_operator cast_expression
Rule 39    unary_expression -> SIZEOF unary_expression
Rule 40    unary_expression -> SIZEOF L_PAREN type_name R_PAREN
Rule 41    unary_operator -> BITWISE_AND
Rule 42    unary_operator -> MULTIPLY
Rule 43    unary_operator -> ADD
Rule 44    unary_operator -> SUBSTRACT
Rule 45    unary_operator -> BITWISE_ONE_COMPLEMENT
Rule 46    unary_operator -> LOGICAL_NOT
Rule 47    cast_expression -> unary_expression
Rule 48    cast_expression -> L_PAREN type_name R_PAREN cast_expression
Rule 49    multiplicative_expression -> cast_expression
Rule 50    multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression
Rule 51    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 52    multiplicative_expression -> multiplicative_expression MODULUS cast_expression
Rule 53    additive_expression -> multiplicative_expression
Rule 54    additive_expression -> additive_expression ADD multiplicative_expression
Rule 55    additive_expression -> additive_expression SUBSTRACT multiplicative_expression
Rule 56    shift_expression -> additive_expression
Rule 57    shift_expression -> shift_expression LEFT_SHIFT additive_expression
Rule 58    shift_expression -> shift_expression RIGHT_SHIFT additive_expression
Rule 59    relational_expression -> shift_expression
Rule 60    relational_expression -> relational_expression LESS shift_expression
Rule 61    relational_expression -> relational_expression GREATER shift_expression
Rule 62    relational_expression -> relational_expression LESS_EQUALS shift_expression
Rule 63    relational_expression -> relational_expression GREATER_EQUALS shift_expression
Rule 64    equality_expression -> relational_expression
Rule 65    equality_expression -> equality_expression EQUALS relational_expression
Rule 66    equality_expression -> equality_expression NOT_EQUALS relational_expression
Rule 67    and_expression -> equality_expression
Rule 68    and_expression -> and_expression BITWISE_AND equality_expression
Rule 69    exclusive_or_expression -> and_expression
Rule 70    exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression
Rule 71    inclusive_or_expression -> exclusive_or_expression
Rule 72    inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression
Rule 73    logical_and_expression -> inclusive_or_expression
Rule 74    logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression
Rule 75    logical_or_expression -> logical_and_expression
Rule 76    logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression
Rule 77    conditional_expression -> logical_or_expression
Rule 78    conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression
Rule 79    assignment_expression -> conditional_expression
Rule 80    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 81    assignment_operator -> ASSIGNMENT
Rule 82    assignment_operator -> MULTIPLY_ASSIGNMENT
Rule 83    assignment_operator -> DIVIDE_ASSIGNMENT
Rule 84    assignment_operator -> MODULUS_ASSIGNMENT
Rule 85    assignment_operator -> ADD_ASSIGNMENT
Rule 86    assignment_operator -> SUBSTRACT_ASSIGNMENT
Rule 87    assignment_operator -> LEFT_SHIFT_ASSIGNMENT
Rule 88    assignment_operator -> RIGHT_SHIFT_ASSIGNMENT
Rule 89    assignment_operator -> BITWISE_AND_ASSIGNMENT
Rule 90    assignment_operator -> BITWISE_XOR_ASSIGNMENT
Rule 91    assignment_operator -> BITWISE_OR_ASSIGNMENT
Rule 92    expression -> assignment_expression
Rule 93    expression -> expression COMMA assignment_expression
Rule 94    constant_expression -> conditional_expression
Rule 95    declaration -> struct_specifier SEMI_COLON
Rule 96    declaration -> enum_specifier SEMI_COLON
Rule 97    declaration -> type_specifier init_declarator_list SEMI_COLON
Rule 98    init_declarator_list -> init_declarator
Rule 99    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 100   init_declarator -> declarator
Rule 101   init_declarator -> declarator ASSIGNMENT initializer
Rule 102   type_specifier -> VOID
Rule 103   type_specifier -> CHAR
Rule 104   type_specifier -> INT
Rule 105   type_specifier -> LONG
Rule 106   type_specifier -> FLOAT
Rule 107   type_specifier -> DOUBLE
Rule 108   type_specifier -> STRUCT IDENTIFIER
Rule 109   type_specifier -> ENUM IDENTIFIER
Rule 110   type_specifier -> BOOL
Rule 111   struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
Rule 112   add_sym_struct -> L_BRACES
Rule 113   struct_declaration_list -> struct_declaration
Rule 114   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 115   struct_declaration -> type_specifier struct_declarator_list SEMI_COLON
Rule 116   struct_declarator_list -> declarator
Rule 117   struct_declarator_list -> struct_declarator_list COMMA declarator
Rule 118   enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
Rule 119   enumerator_list -> enumerator
Rule 120   enumerator_list -> enumerator_list COMMA enumerator
Rule 121   enumerator -> IDENTIFIER
Rule 122   enumerator -> IDENTIFIER ASSIGNMENT constant_expression
Rule 123   declarator -> pointer direct_declarator
Rule 124   declarator -> no_pointer direct_declarator
Rule 125   direct_declarator -> IDENTIFIER
Rule 126   direct_declarator -> L_PAREN declarator R_PAREN
Rule 127   direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR
Rule 128   pointer -> MULTIPLY
Rule 129   pointer -> pointer MULTIPLY
Rule 130   no_pointer -> <empty>
Rule 131   parameter_type_list -> parameter_declaration
Rule 132   parameter_type_list -> parameter_type_list COMMA parameter_declaration
Rule 133   parameter_declaration -> type_specifier declarator
Rule 134   type_name -> type_specifier
Rule 135   type_name -> type_specifier pointer
Rule 136   initializer -> assignment_expression
Rule 137   initializer -> L_BRACES initializer_list R_BRACES
Rule 138   initializer -> L_BRACES initializer_list COMMA R_BRACES
Rule 139   initializer_list -> initializer
Rule 140   initializer_list -> initializer_list COMMA initializer
Rule 141   statement -> compound_statement
Rule 142   statement -> expression_statement
Rule 143   statement -> selection_statement
Rule 144   statement -> iteration_statement
Rule 145   statement -> jump_statement
Rule 146   labeled_statement_list -> labeled_statement_list labeled_statement
Rule 147   labeled_statement_list -> labeled_statement
Rule 148   labeled_statement -> CASE constant_expression COLON statement
Rule 149   labeled_statement -> DEFAULT COLON statement
Rule 150   compound_statement -> L_BRACES R_BRACES
Rule 151   compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES
Rule 152   function_body -> L_BRACES R_BRACES
Rule 153   function_body -> L_BRACES block_item_list R_BRACES
Rule 154   block_item_list -> block_item
Rule 155   block_item_list -> block_item_list block_item
Rule 156   block_item -> statement
Rule 157   block_item -> declaration
Rule 158   expression_statement -> SEMI_COLON
Rule 159   expression_statement -> expression SEMI_COLON
Rule 160   selection_statement -> IF L_PAREN expression R_PAREN statement
Rule 161   selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement
Rule 162   selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
Rule 163   iteration_statement -> WHILE L_PAREN expression R_PAREN statement
Rule 164   iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
Rule 165   iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement
Rule 166   iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
Rule 167   jump_statement -> CONTINUE SEMI_COLON
Rule 168   jump_statement -> BREAK SEMI_COLON
Rule 169   jump_statement -> RETURN SEMI_COLON
Rule 170   jump_statement -> RETURN expression SEMI_COLON
Rule 171   add_sym -> <empty>
Rule 172   pop_sym -> <empty>

Terminals, with rules where they appear

ADD                  : 43 54
ADD_ASSIGNMENT       : 85
ARROW                : 32
ASSIGNMENT           : 81 101 122
AUTO                 : 
BITWISE_AND          : 41 68
BITWISE_AND_ASSIGNMENT : 89
BITWISE_ONE_COMPLEMENT : 45
BITWISE_OR           : 72
BITWISE_OR_ASSIGNMENT : 91
BITWISE_XOR          : 70
BITWISE_XOR_ASSIGNMENT : 90
BOOL                 : 110
BREAK                : 168
CASE                 : 148
CHAR                 : 103
CHAR_CONSTANT        : 19
COLON                : 78 148 149
COMMA                : 34 93 99 117 120 132 138 140
CONST                : 
CONTINUE             : 167
DECREMENT            : 27 37
DEFAULT              : 149
DIVIDE               : 51
DIVIDE_ASSIGNMENT    : 83
DO                   : 164
DOT                  : 31
DOUBLE               : 107
ELSE                 : 161
ENUM                 : 109 118
EQUALS               : 65
EXPONENT_CONSTANT    : 17
EXTERN               : 
FALSE                : 23
FLOAT                : 106
FOR                  : 165 166
GOTO                 : 
GREATER              : 61
GREATER_EQUALS       : 63
HEX_CONSTANT         : 15
IDENTIFIER           : 13 31 32 108 109 111 118 121 122 125
IF                   : 160 161
INCREMENT            : 26 36
INT                  : 104
INT_CONSTANT         : 14 127
LEFT_SHIFT           : 57
LEFT_SHIFT_ASSIGNMENT : 87
LESS                 : 60
LESS_EQUALS          : 62
LOGICAL_AND          : 74
LOGICAL_NOT          : 46
LOGICAL_OR           : 76
LONG                 : 105
L_BRACES             : 112 118 137 138 150 151 152 153 162
L_PAREN              : 10 21 29 30 40 48 126 160 161 162 163 164 165 166
L_SQBR               : 28 127
MODULUS              : 52
MODULUS_ASSIGNMENT   : 84
MULTIPLY             : 42 50 128 129
MULTIPLY_ASSIGNMENT  : 82
NOT_EQUALS           : 66
NULL                 : 24
OCTAL_CONSTANT       : 16
QUES_MARK            : 78
REAL_CONSTANT        : 18
REGISTER             : 
RETURN               : 169 170
RIGHT_SHIFT          : 58
RIGHT_SHIFT_ASSIGNMENT : 88
R_BRACES             : 111 118 137 138 150 151 152 153 162
R_PAREN              : 8 9 11 12 21 29 30 40 48 126 160 161 162 163 164 165 166
R_SQBR               : 28 127
SEMI_COLON           : 8 9 95 96 97 115 158 159 164 167 168 169 170
SHORT                : 
SIGNED               : 
SIZEOF               : 39 40
STATIC               : 
STRUCT               : 108 111
STR_CONSTANT         : 20
SUBSTRACT            : 44 55
SUBSTRACT_ASSIGNMENT : 86
SWITCH               : 162
TRUE                 : 22
TYPEDEF              : 
UNION                : 
UNSIGNED             : 
VOID                 : 102
VOLATILE             : 
WHILE                : 163 164
error                : 

Nonterminals, with rules where they appear

add_sym              : 151 162
add_sym_struct       : 111
additive_expression  : 54 55 56 57 58
and_expression       : 68 69 70
argument_expression_list : 30 34
assignment_expression : 33 34 80 92 93 136
assignment_operator  : 80
block_item           : 154 155
block_item_list      : 151 153 155
cast_expression      : 38 48 49 50 51 52
compound_statement   : 141
conditional_expression : 78 79 94
constant_expression  : 122 148
declaration          : 5 157
declarator           : 6 7 8 9 100 101 116 117 126 133
direct_declarator    : 123 124 127
enum_specifier       : 96
enumerator           : 119 120
enumerator_list      : 118 120
equality_expression  : 65 66 67 68
exclusive_or_expression : 70 71 72
expression           : 21 28 78 93 159 160 161 162 163 164 166 170
expression_statement : 142 165 165 166 166
external_declaration : 2 3
func_rparen_1        : 6
func_rparen_2        : 7
func_scope           : 6 7 8 9
function_body        : 6 7
function_definition  : 4
inclusive_or_expression : 72 73 74
init_declarator      : 98 99
init_declarator_list : 97 99
initializer          : 101 139 140
initializer_list     : 137 138 140
iteration_statement  : 144
jump_statement       : 145
labeled_statement    : 146 147
labeled_statement_list : 146 162
logical_and_expression : 74 75 76
logical_or_expression : 76 77 78
multiplicative_expression : 50 51 52 53 54 55
no_pointer           : 124
parameter_declaration : 131 132
parameter_type_list  : 6 8 132
pointer              : 123 129 135
pop_sym              : 6 7 8 9 111 151 162
postfix_expression   : 26 27 28 29 30 31 32 35
primary_expression   : 25
program              : 0
relational_expression : 60 61 62 63 64 65 66
selection_statement  : 143
shift_expression     : 57 58 59 60 61 62 63
statement            : 148 149 156 160 161 161 163 164 165 166
struct_declaration   : 113 114
struct_declaration_list : 111 114
struct_declarator_list : 115 117
struct_specifier     : 95
translation_unit     : 1 3
type_name            : 40 48
type_specifier       : 6 7 8 9 97 115 133 134 135
unary_expression     : 36 37 39 47 80
unary_operator       : 38

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . translation_unit
    (2) translation_unit -> . external_declaration
    (3) translation_unit -> . translation_unit external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym
    (7) function_definition -> . type_specifier declarator func_scope func_rparen_2 function_body pop_sym
    (8) function_definition -> . type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym
    (9) function_definition -> . type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym
    (95) declaration -> . struct_specifier SEMI_COLON
    (96) declaration -> . enum_specifier SEMI_COLON
    (97) declaration -> . type_specifier init_declarator_list SEMI_COLON
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (111) struct_specifier -> . STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
    (118) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 15
    ENUM            shift and go to state 16
    BOOL            shift and go to state 17

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 7
    enum_specifier                 shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> translation_unit .
    (3) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym
    (7) function_definition -> . type_specifier declarator func_scope func_rparen_2 function_body pop_sym
    (8) function_definition -> . type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym
    (9) function_definition -> . type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym
    (95) declaration -> . struct_specifier SEMI_COLON
    (96) declaration -> . enum_specifier SEMI_COLON
    (97) declaration -> . type_specifier init_declarator_list SEMI_COLON
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (111) struct_specifier -> . STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
    (118) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES

    $end            reduce using rule 1 (program -> translation_unit .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 15
    ENUM            shift and go to state 16
    BOOL            shift and go to state 17

    external_declaration           shift and go to state 18
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    struct_specifier               shift and go to state 7
    enum_specifier                 shift and go to state 8

state 3

    (2) translation_unit -> external_declaration .

    VOID            reduce using rule 2 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> external_declaration .)
    INT             reduce using rule 2 (translation_unit -> external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> external_declaration .)
    $end            reduce using rule 2 (translation_unit -> external_declaration .)


state 4

    (4) external_declaration -> function_definition .

    VOID            reduce using rule 4 (external_declaration -> function_definition .)
    CHAR            reduce using rule 4 (external_declaration -> function_definition .)
    INT             reduce using rule 4 (external_declaration -> function_definition .)
    LONG            reduce using rule 4 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 4 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 4 (external_declaration -> function_definition .)
    ENUM            reduce using rule 4 (external_declaration -> function_definition .)
    BOOL            reduce using rule 4 (external_declaration -> function_definition .)
    $end            reduce using rule 4 (external_declaration -> function_definition .)


state 5

    (5) external_declaration -> declaration .

    VOID            reduce using rule 5 (external_declaration -> declaration .)
    CHAR            reduce using rule 5 (external_declaration -> declaration .)
    INT             reduce using rule 5 (external_declaration -> declaration .)
    LONG            reduce using rule 5 (external_declaration -> declaration .)
    FLOAT           reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 5 (external_declaration -> declaration .)
    STRUCT          reduce using rule 5 (external_declaration -> declaration .)
    ENUM            reduce using rule 5 (external_declaration -> declaration .)
    BOOL            reduce using rule 5 (external_declaration -> declaration .)
    $end            reduce using rule 5 (external_declaration -> declaration .)


state 6

    (6) function_definition -> type_specifier . declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym
    (7) function_definition -> type_specifier . declarator func_scope func_rparen_2 function_body pop_sym
    (8) function_definition -> type_specifier . declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym
    (9) function_definition -> type_specifier . declarator func_scope R_PAREN SEMI_COLON pop_sym
    (97) declaration -> type_specifier . init_declarator_list SEMI_COLON
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . no_pointer direct_declarator
    (98) init_declarator_list -> . init_declarator
    (99) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY
    (130) no_pointer -> .
    (100) init_declarator -> . declarator
    (101) init_declarator -> . declarator ASSIGNMENT initializer

    MULTIPLY        shift and go to state 24
    IDENTIFIER      reduce using rule 130 (no_pointer -> .)
    L_PAREN         reduce using rule 130 (no_pointer -> .)

    declarator                     shift and go to state 19
    init_declarator_list           shift and go to state 20
    pointer                        shift and go to state 21
    no_pointer                     shift and go to state 22
    init_declarator                shift and go to state 23

state 7

    (95) declaration -> struct_specifier . SEMI_COLON

    SEMI_COLON      shift and go to state 25


state 8

    (96) declaration -> enum_specifier . SEMI_COLON

    SEMI_COLON      shift and go to state 26


state 9

    (102) type_specifier -> VOID .

    MULTIPLY        reduce using rule 102 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 102 (type_specifier -> VOID .)
    L_PAREN         reduce using rule 102 (type_specifier -> VOID .)
    R_PAREN         reduce using rule 102 (type_specifier -> VOID .)


state 10

    (103) type_specifier -> CHAR .

    MULTIPLY        reduce using rule 103 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 103 (type_specifier -> CHAR .)
    L_PAREN         reduce using rule 103 (type_specifier -> CHAR .)
    R_PAREN         reduce using rule 103 (type_specifier -> CHAR .)


state 11

    (104) type_specifier -> INT .

    MULTIPLY        reduce using rule 104 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 104 (type_specifier -> INT .)
    L_PAREN         reduce using rule 104 (type_specifier -> INT .)
    R_PAREN         reduce using rule 104 (type_specifier -> INT .)


state 12

    (105) type_specifier -> LONG .

    MULTIPLY        reduce using rule 105 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 105 (type_specifier -> LONG .)
    L_PAREN         reduce using rule 105 (type_specifier -> LONG .)
    R_PAREN         reduce using rule 105 (type_specifier -> LONG .)


state 13

    (106) type_specifier -> FLOAT .

    MULTIPLY        reduce using rule 106 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 106 (type_specifier -> FLOAT .)
    L_PAREN         reduce using rule 106 (type_specifier -> FLOAT .)
    R_PAREN         reduce using rule 106 (type_specifier -> FLOAT .)


state 14

    (107) type_specifier -> DOUBLE .

    MULTIPLY        reduce using rule 107 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 107 (type_specifier -> DOUBLE .)
    L_PAREN         reduce using rule 107 (type_specifier -> DOUBLE .)
    R_PAREN         reduce using rule 107 (type_specifier -> DOUBLE .)


state 15

    (108) type_specifier -> STRUCT . IDENTIFIER
    (111) struct_specifier -> STRUCT . IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES

    IDENTIFIER      shift and go to state 27


state 16

    (109) type_specifier -> ENUM . IDENTIFIER
    (118) enum_specifier -> ENUM . IDENTIFIER L_BRACES enumerator_list R_BRACES

    IDENTIFIER      shift and go to state 28


state 17

    (110) type_specifier -> BOOL .

    MULTIPLY        reduce using rule 110 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 110 (type_specifier -> BOOL .)
    L_PAREN         reduce using rule 110 (type_specifier -> BOOL .)
    R_PAREN         reduce using rule 110 (type_specifier -> BOOL .)


state 18

    (3) translation_unit -> translation_unit external_declaration .

    VOID            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)


state 19

    (6) function_definition -> type_specifier declarator . func_scope parameter_type_list func_rparen_1 function_body pop_sym
    (7) function_definition -> type_specifier declarator . func_scope func_rparen_2 function_body pop_sym
    (8) function_definition -> type_specifier declarator . func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym
    (9) function_definition -> type_specifier declarator . func_scope R_PAREN SEMI_COLON pop_sym
    (100) init_declarator -> declarator .
    (101) init_declarator -> declarator . ASSIGNMENT initializer
    (10) func_scope -> . L_PAREN

    SEMI_COLON      reduce using rule 100 (init_declarator -> declarator .)
    COMMA           reduce using rule 100 (init_declarator -> declarator .)
    ASSIGNMENT      shift and go to state 30
    L_PAREN         shift and go to state 31

    func_scope                     shift and go to state 29

state 20

    (97) declaration -> type_specifier init_declarator_list . SEMI_COLON
    (99) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI_COLON      shift and go to state 32
    COMMA           shift and go to state 33


state 21

    (123) declarator -> pointer . direct_declarator
    (129) pointer -> pointer . MULTIPLY
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . L_PAREN declarator R_PAREN
    (127) direct_declarator -> . direct_declarator L_SQBR INT_CONSTANT R_SQBR

    MULTIPLY        shift and go to state 35
    IDENTIFIER      shift and go to state 36
    L_PAREN         shift and go to state 37

    direct_declarator              shift and go to state 34

state 22

    (124) declarator -> no_pointer . direct_declarator
    (125) direct_declarator -> . IDENTIFIER
    (126) direct_declarator -> . L_PAREN declarator R_PAREN
    (127) direct_declarator -> . direct_declarator L_SQBR INT_CONSTANT R_SQBR

    IDENTIFIER      shift and go to state 36
    L_PAREN         shift and go to state 37

    direct_declarator              shift and go to state 38

state 23

    (98) init_declarator_list -> init_declarator .

    SEMI_COLON      reduce using rule 98 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 98 (init_declarator_list -> init_declarator .)


state 24

    (128) pointer -> MULTIPLY .

    MULTIPLY        reduce using rule 128 (pointer -> MULTIPLY .)
    IDENTIFIER      reduce using rule 128 (pointer -> MULTIPLY .)
    L_PAREN         reduce using rule 128 (pointer -> MULTIPLY .)
    R_PAREN         reduce using rule 128 (pointer -> MULTIPLY .)


state 25

    (95) declaration -> struct_specifier SEMI_COLON .

    VOID            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    CHAR            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    INT             reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    LONG            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    FLOAT           reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    DOUBLE          reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    STRUCT          reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    ENUM            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    BOOL            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    $end            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    R_BRACES        reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    L_BRACES        reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    SEMI_COLON      reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    IF              reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    SWITCH          reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    WHILE           reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    DO              reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    FOR             reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    CONTINUE        reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    BREAK           reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    RETURN          reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    INCREMENT       reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    DECREMENT       reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    SIZEOF          reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    BITWISE_AND     reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    MULTIPLY        reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    ADD             reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    SUBSTRACT       reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    IDENTIFIER      reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    INT_CONSTANT    reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    STR_CONSTANT    reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    L_PAREN         reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    TRUE            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    FALSE           reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)
    NULL            reduce using rule 95 (declaration -> struct_specifier SEMI_COLON .)


state 26

    (96) declaration -> enum_specifier SEMI_COLON .

    VOID            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    CHAR            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    INT             reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    LONG            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    FLOAT           reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    DOUBLE          reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    STRUCT          reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    ENUM            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    BOOL            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    $end            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    R_BRACES        reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    L_BRACES        reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    SEMI_COLON      reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    IF              reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    SWITCH          reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    WHILE           reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    DO              reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    FOR             reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    CONTINUE        reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    BREAK           reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    RETURN          reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    INCREMENT       reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    DECREMENT       reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    SIZEOF          reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    BITWISE_AND     reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    MULTIPLY        reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    ADD             reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    SUBSTRACT       reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    IDENTIFIER      reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    INT_CONSTANT    reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    STR_CONSTANT    reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    L_PAREN         reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    TRUE            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    FALSE           reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)
    NULL            reduce using rule 96 (declaration -> enum_specifier SEMI_COLON .)


state 27

    (108) type_specifier -> STRUCT IDENTIFIER .
    (111) struct_specifier -> STRUCT IDENTIFIER . add_sym_struct struct_declaration_list pop_sym R_BRACES
    (112) add_sym_struct -> . L_BRACES

    MULTIPLY        reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    L_PAREN         reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    L_BRACES        shift and go to state 40

    add_sym_struct                 shift and go to state 39

state 28

    (109) type_specifier -> ENUM IDENTIFIER .
    (118) enum_specifier -> ENUM IDENTIFIER . L_BRACES enumerator_list R_BRACES

    MULTIPLY        reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    L_PAREN         reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    L_BRACES        shift and go to state 41


state 29

    (6) function_definition -> type_specifier declarator func_scope . parameter_type_list func_rparen_1 function_body pop_sym
    (7) function_definition -> type_specifier declarator func_scope . func_rparen_2 function_body pop_sym
    (8) function_definition -> type_specifier declarator func_scope . parameter_type_list R_PAREN SEMI_COLON pop_sym
    (9) function_definition -> type_specifier declarator func_scope . R_PAREN SEMI_COLON pop_sym
    (131) parameter_type_list -> . parameter_declaration
    (132) parameter_type_list -> . parameter_type_list COMMA parameter_declaration
    (12) func_rparen_2 -> . R_PAREN
    (133) parameter_declaration -> . type_specifier declarator
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL

    R_PAREN         shift and go to state 45
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 47
    ENUM            shift and go to state 48
    BOOL            shift and go to state 17

    type_specifier                 shift and go to state 42
    parameter_type_list            shift and go to state 43
    func_rparen_2                  shift and go to state 44
    parameter_declaration          shift and go to state 46

state 30

    (101) init_declarator -> declarator ASSIGNMENT . initializer
    (136) initializer -> . assignment_expression
    (137) initializer -> . L_BRACES initializer_list R_BRACES
    (138) initializer -> . L_BRACES initializer_list COMMA R_BRACES
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 51
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    initializer                    shift and go to state 49
    assignment_expression          shift and go to state 50
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 31

    (10) func_scope -> L_PAREN .

    R_PAREN         reduce using rule 10 (func_scope -> L_PAREN .)
    VOID            reduce using rule 10 (func_scope -> L_PAREN .)
    CHAR            reduce using rule 10 (func_scope -> L_PAREN .)
    INT             reduce using rule 10 (func_scope -> L_PAREN .)
    LONG            reduce using rule 10 (func_scope -> L_PAREN .)
    FLOAT           reduce using rule 10 (func_scope -> L_PAREN .)
    DOUBLE          reduce using rule 10 (func_scope -> L_PAREN .)
    STRUCT          reduce using rule 10 (func_scope -> L_PAREN .)
    ENUM            reduce using rule 10 (func_scope -> L_PAREN .)
    BOOL            reduce using rule 10 (func_scope -> L_PAREN .)


state 32

    (97) declaration -> type_specifier init_declarator_list SEMI_COLON .

    VOID            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    CHAR            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    INT             reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    LONG            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    FLOAT           reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    DOUBLE          reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    STRUCT          reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    ENUM            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    BOOL            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    $end            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    R_BRACES        reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    L_BRACES        reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    SEMI_COLON      reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    IF              reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    SWITCH          reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    WHILE           reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    DO              reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    FOR             reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    CONTINUE        reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    BREAK           reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    RETURN          reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    INCREMENT       reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    DECREMENT       reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    SIZEOF          reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    BITWISE_AND     reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    MULTIPLY        reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    ADD             reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    SUBSTRACT       reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    IDENTIFIER      reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    INT_CONSTANT    reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    STR_CONSTANT    reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    L_PAREN         reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    TRUE            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    FALSE           reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)
    NULL            reduce using rule 97 (declaration -> type_specifier init_declarator_list SEMI_COLON .)


state 33

    (99) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (100) init_declarator -> . declarator
    (101) init_declarator -> . declarator ASSIGNMENT initializer
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . no_pointer direct_declarator
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY
    (130) no_pointer -> .

    MULTIPLY        shift and go to state 24
    IDENTIFIER      reduce using rule 130 (no_pointer -> .)
    L_PAREN         reduce using rule 130 (no_pointer -> .)

    init_declarator                shift and go to state 89
    declarator                     shift and go to state 90
    pointer                        shift and go to state 21
    no_pointer                     shift and go to state 22

state 34

    (123) declarator -> pointer direct_declarator .
    (127) direct_declarator -> direct_declarator . L_SQBR INT_CONSTANT R_SQBR

    ASSIGNMENT      reduce using rule 123 (declarator -> pointer direct_declarator .)
    L_PAREN         reduce using rule 123 (declarator -> pointer direct_declarator .)
    SEMI_COLON      reduce using rule 123 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 123 (declarator -> pointer direct_declarator .)
    R_PAREN         reduce using rule 123 (declarator -> pointer direct_declarator .)
    L_SQBR          shift and go to state 91


state 35

    (129) pointer -> pointer MULTIPLY .

    MULTIPLY        reduce using rule 129 (pointer -> pointer MULTIPLY .)
    IDENTIFIER      reduce using rule 129 (pointer -> pointer MULTIPLY .)
    L_PAREN         reduce using rule 129 (pointer -> pointer MULTIPLY .)
    R_PAREN         reduce using rule 129 (pointer -> pointer MULTIPLY .)


state 36

    (125) direct_declarator -> IDENTIFIER .

    L_SQBR          reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    L_PAREN         reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 125 (direct_declarator -> IDENTIFIER .)
    R_PAREN         reduce using rule 125 (direct_declarator -> IDENTIFIER .)


state 37

    (126) direct_declarator -> L_PAREN . declarator R_PAREN
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . no_pointer direct_declarator
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY
    (130) no_pointer -> .

    MULTIPLY        shift and go to state 24
    IDENTIFIER      reduce using rule 130 (no_pointer -> .)
    L_PAREN         reduce using rule 130 (no_pointer -> .)

    declarator                     shift and go to state 92
    pointer                        shift and go to state 21
    no_pointer                     shift and go to state 22

state 38

    (124) declarator -> no_pointer direct_declarator .
    (127) direct_declarator -> direct_declarator . L_SQBR INT_CONSTANT R_SQBR

    ASSIGNMENT      reduce using rule 124 (declarator -> no_pointer direct_declarator .)
    L_PAREN         reduce using rule 124 (declarator -> no_pointer direct_declarator .)
    SEMI_COLON      reduce using rule 124 (declarator -> no_pointer direct_declarator .)
    COMMA           reduce using rule 124 (declarator -> no_pointer direct_declarator .)
    R_PAREN         reduce using rule 124 (declarator -> no_pointer direct_declarator .)
    L_SQBR          shift and go to state 91


state 39

    (111) struct_specifier -> STRUCT IDENTIFIER add_sym_struct . struct_declaration_list pop_sym R_BRACES
    (113) struct_declaration_list -> . struct_declaration
    (114) struct_declaration_list -> . struct_declaration_list struct_declaration
    (115) struct_declaration -> . type_specifier struct_declarator_list SEMI_COLON
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 47
    ENUM            shift and go to state 48
    BOOL            shift and go to state 17

    struct_declaration_list        shift and go to state 93
    struct_declaration             shift and go to state 94
    type_specifier                 shift and go to state 95

state 40

    (112) add_sym_struct -> L_BRACES .

    VOID            reduce using rule 112 (add_sym_struct -> L_BRACES .)
    CHAR            reduce using rule 112 (add_sym_struct -> L_BRACES .)
    INT             reduce using rule 112 (add_sym_struct -> L_BRACES .)
    LONG            reduce using rule 112 (add_sym_struct -> L_BRACES .)
    FLOAT           reduce using rule 112 (add_sym_struct -> L_BRACES .)
    DOUBLE          reduce using rule 112 (add_sym_struct -> L_BRACES .)
    STRUCT          reduce using rule 112 (add_sym_struct -> L_BRACES .)
    ENUM            reduce using rule 112 (add_sym_struct -> L_BRACES .)
    BOOL            reduce using rule 112 (add_sym_struct -> L_BRACES .)


state 41

    (118) enum_specifier -> ENUM IDENTIFIER L_BRACES . enumerator_list R_BRACES
    (119) enumerator_list -> . enumerator
    (120) enumerator_list -> . enumerator_list COMMA enumerator
    (121) enumerator -> . IDENTIFIER
    (122) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 96

    enumerator_list                shift and go to state 97
    enumerator                     shift and go to state 98

state 42

    (133) parameter_declaration -> type_specifier . declarator
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . no_pointer direct_declarator
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY
    (130) no_pointer -> .

    MULTIPLY        shift and go to state 24
    IDENTIFIER      reduce using rule 130 (no_pointer -> .)
    L_PAREN         reduce using rule 130 (no_pointer -> .)

    declarator                     shift and go to state 99
    pointer                        shift and go to state 21
    no_pointer                     shift and go to state 22

state 43

    (6) function_definition -> type_specifier declarator func_scope parameter_type_list . func_rparen_1 function_body pop_sym
    (8) function_definition -> type_specifier declarator func_scope parameter_type_list . R_PAREN SEMI_COLON pop_sym
    (132) parameter_type_list -> parameter_type_list . COMMA parameter_declaration
    (11) func_rparen_1 -> . R_PAREN

    R_PAREN         shift and go to state 101
    COMMA           shift and go to state 102

    func_rparen_1                  shift and go to state 100

state 44

    (7) function_definition -> type_specifier declarator func_scope func_rparen_2 . function_body pop_sym
    (152) function_body -> . L_BRACES R_BRACES
    (153) function_body -> . L_BRACES block_item_list R_BRACES

    L_BRACES        shift and go to state 104

    function_body                  shift and go to state 103

state 45

    (9) function_definition -> type_specifier declarator func_scope R_PAREN . SEMI_COLON pop_sym
    (12) func_rparen_2 -> R_PAREN .

    SEMI_COLON      shift and go to state 105
    L_BRACES        reduce using rule 12 (func_rparen_2 -> R_PAREN .)


state 46

    (131) parameter_type_list -> parameter_declaration .

    R_PAREN         reduce using rule 131 (parameter_type_list -> parameter_declaration .)
    COMMA           reduce using rule 131 (parameter_type_list -> parameter_declaration .)


state 47

    (108) type_specifier -> STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 106


state 48

    (109) type_specifier -> ENUM . IDENTIFIER

    IDENTIFIER      shift and go to state 107


state 49

    (101) init_declarator -> declarator ASSIGNMENT initializer .

    SEMI_COLON      reduce using rule 101 (init_declarator -> declarator ASSIGNMENT initializer .)
    COMMA           reduce using rule 101 (init_declarator -> declarator ASSIGNMENT initializer .)


state 50

    (136) initializer -> assignment_expression .

    SEMI_COLON      reduce using rule 136 (initializer -> assignment_expression .)
    COMMA           reduce using rule 136 (initializer -> assignment_expression .)
    R_BRACES        reduce using rule 136 (initializer -> assignment_expression .)


state 51

    (137) initializer -> L_BRACES . initializer_list R_BRACES
    (138) initializer -> L_BRACES . initializer_list COMMA R_BRACES
    (139) initializer_list -> . initializer
    (140) initializer_list -> . initializer_list COMMA initializer
    (136) initializer -> . assignment_expression
    (137) initializer -> . L_BRACES initializer_list R_BRACES
    (138) initializer -> . L_BRACES initializer_list COMMA R_BRACES
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 51
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    initializer_list               shift and go to state 108
    initializer                    shift and go to state 109
    assignment_expression          shift and go to state 50
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 52

    (79) assignment_expression -> conditional_expression .

    SEMI_COLON      reduce using rule 79 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 79 (assignment_expression -> conditional_expression .)
    R_BRACES        reduce using rule 79 (assignment_expression -> conditional_expression .)
    R_PAREN         reduce using rule 79 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 79 (assignment_expression -> conditional_expression .)
    R_SQBR          reduce using rule 79 (assignment_expression -> conditional_expression .)


state 53

    (80) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (47) cast_expression -> unary_expression .
    (81) assignment_operator -> . ASSIGNMENT
    (82) assignment_operator -> . MULTIPLY_ASSIGNMENT
    (83) assignment_operator -> . DIVIDE_ASSIGNMENT
    (84) assignment_operator -> . MODULUS_ASSIGNMENT
    (85) assignment_operator -> . ADD_ASSIGNMENT
    (86) assignment_operator -> . SUBSTRACT_ASSIGNMENT
    (87) assignment_operator -> . LEFT_SHIFT_ASSIGNMENT
    (88) assignment_operator -> . RIGHT_SHIFT_ASSIGNMENT
    (89) assignment_operator -> . BITWISE_AND_ASSIGNMENT
    (90) assignment_operator -> . BITWISE_XOR_ASSIGNMENT
    (91) assignment_operator -> . BITWISE_OR_ASSIGNMENT

    MULTIPLY        reduce using rule 47 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 47 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 47 (cast_expression -> unary_expression .)
    ADD             reduce using rule 47 (cast_expression -> unary_expression .)
    SUBSTRACT       reduce using rule 47 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 47 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 47 (cast_expression -> unary_expression .)
    LESS            reduce using rule 47 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 47 (cast_expression -> unary_expression .)
    LESS_EQUALS     reduce using rule 47 (cast_expression -> unary_expression .)
    GREATER_EQUALS  reduce using rule 47 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 47 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 47 (cast_expression -> unary_expression .)
    LOGICAL_AND     reduce using rule 47 (cast_expression -> unary_expression .)
    QUES_MARK       reduce using rule 47 (cast_expression -> unary_expression .)
    LOGICAL_OR      reduce using rule 47 (cast_expression -> unary_expression .)
    SEMI_COLON      reduce using rule 47 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 47 (cast_expression -> unary_expression .)
    R_BRACES        reduce using rule 47 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 47 (cast_expression -> unary_expression .)
    COLON           reduce using rule 47 (cast_expression -> unary_expression .)
    R_SQBR          reduce using rule 47 (cast_expression -> unary_expression .)
    ASSIGNMENT      shift and go to state 111
    MULTIPLY_ASSIGNMENT shift and go to state 112
    DIVIDE_ASSIGNMENT shift and go to state 113
    MODULUS_ASSIGNMENT shift and go to state 114
    ADD_ASSIGNMENT  shift and go to state 115
    SUBSTRACT_ASSIGNMENT shift and go to state 116
    LEFT_SHIFT_ASSIGNMENT shift and go to state 117
    RIGHT_SHIFT_ASSIGNMENT shift and go to state 118
    BITWISE_AND_ASSIGNMENT shift and go to state 119
    BITWISE_XOR_ASSIGNMENT shift and go to state 120
    BITWISE_OR_ASSIGNMENT shift and go to state 121

    assignment_operator            shift and go to state 110

state 54

    (77) conditional_expression -> logical_or_expression .
    (78) conditional_expression -> logical_or_expression . QUES_MARK expression COLON conditional_expression
    (76) logical_or_expression -> logical_or_expression . LOGICAL_OR logical_and_expression

    SEMI_COLON      reduce using rule 77 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 77 (conditional_expression -> logical_or_expression .)
    R_BRACES        reduce using rule 77 (conditional_expression -> logical_or_expression .)
    R_PAREN         reduce using rule 77 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 77 (conditional_expression -> logical_or_expression .)
    R_SQBR          reduce using rule 77 (conditional_expression -> logical_or_expression .)
    QUES_MARK       shift and go to state 122
    LOGICAL_OR      shift and go to state 123


state 55

    (35) unary_expression -> postfix_expression .
    (26) postfix_expression -> postfix_expression . INCREMENT
    (27) postfix_expression -> postfix_expression . DECREMENT
    (28) postfix_expression -> postfix_expression . L_SQBR expression R_SQBR
    (29) postfix_expression -> postfix_expression . L_PAREN R_PAREN
    (30) postfix_expression -> postfix_expression . L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (32) postfix_expression -> postfix_expression . ARROW IDENTIFIER

    ASSIGNMENT      reduce using rule 35 (unary_expression -> postfix_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    MODULUS_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    ADD_ASSIGNMENT  reduce using rule 35 (unary_expression -> postfix_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 35 (unary_expression -> postfix_expression .)
    MULTIPLY        reduce using rule 35 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 35 (unary_expression -> postfix_expression .)
    MODULUS         reduce using rule 35 (unary_expression -> postfix_expression .)
    ADD             reduce using rule 35 (unary_expression -> postfix_expression .)
    SUBSTRACT       reduce using rule 35 (unary_expression -> postfix_expression .)
    LEFT_SHIFT      reduce using rule 35 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT     reduce using rule 35 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 35 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 35 (unary_expression -> postfix_expression .)
    LESS_EQUALS     reduce using rule 35 (unary_expression -> postfix_expression .)
    GREATER_EQUALS  reduce using rule 35 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 35 (unary_expression -> postfix_expression .)
    NOT_EQUALS      reduce using rule 35 (unary_expression -> postfix_expression .)
    BITWISE_AND     reduce using rule 35 (unary_expression -> postfix_expression .)
    BITWISE_XOR     reduce using rule 35 (unary_expression -> postfix_expression .)
    BITWISE_OR      reduce using rule 35 (unary_expression -> postfix_expression .)
    LOGICAL_AND     reduce using rule 35 (unary_expression -> postfix_expression .)
    QUES_MARK       reduce using rule 35 (unary_expression -> postfix_expression .)
    LOGICAL_OR      reduce using rule 35 (unary_expression -> postfix_expression .)
    SEMI_COLON      reduce using rule 35 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 35 (unary_expression -> postfix_expression .)
    R_BRACES        reduce using rule 35 (unary_expression -> postfix_expression .)
    R_PAREN         reduce using rule 35 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 35 (unary_expression -> postfix_expression .)
    R_SQBR          reduce using rule 35 (unary_expression -> postfix_expression .)
    INCREMENT       shift and go to state 124
    DECREMENT       shift and go to state 125
    L_SQBR          shift and go to state 126
    L_PAREN         shift and go to state 127
    DOT             shift and go to state 128
    ARROW           shift and go to state 129


state 56

    (36) unary_expression -> INCREMENT . unary_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 131
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    unary_expression               shift and go to state 130
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 57

    (37) unary_expression -> DECREMENT . unary_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 131
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    unary_expression               shift and go to state 132
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 58

    (38) unary_expression -> unary_operator . cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 133
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    primary_expression             shift and go to state 63

state 59

    (49) multiplicative_expression -> cast_expression .

    MULTIPLY        reduce using rule 49 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 49 (multiplicative_expression -> cast_expression .)
    MODULUS         reduce using rule 49 (multiplicative_expression -> cast_expression .)
    ADD             reduce using rule 49 (multiplicative_expression -> cast_expression .)
    SUBSTRACT       reduce using rule 49 (multiplicative_expression -> cast_expression .)
    LEFT_SHIFT      reduce using rule 49 (multiplicative_expression -> cast_expression .)
    RIGHT_SHIFT     reduce using rule 49 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 49 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 49 (multiplicative_expression -> cast_expression .)
    LESS_EQUALS     reduce using rule 49 (multiplicative_expression -> cast_expression .)
    GREATER_EQUALS  reduce using rule 49 (multiplicative_expression -> cast_expression .)
    EQUALS          reduce using rule 49 (multiplicative_expression -> cast_expression .)
    NOT_EQUALS      reduce using rule 49 (multiplicative_expression -> cast_expression .)
    BITWISE_AND     reduce using rule 49 (multiplicative_expression -> cast_expression .)
    BITWISE_XOR     reduce using rule 49 (multiplicative_expression -> cast_expression .)
    BITWISE_OR      reduce using rule 49 (multiplicative_expression -> cast_expression .)
    LOGICAL_AND     reduce using rule 49 (multiplicative_expression -> cast_expression .)
    QUES_MARK       reduce using rule 49 (multiplicative_expression -> cast_expression .)
    LOGICAL_OR      reduce using rule 49 (multiplicative_expression -> cast_expression .)
    SEMI_COLON      reduce using rule 49 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 49 (multiplicative_expression -> cast_expression .)
    R_BRACES        reduce using rule 49 (multiplicative_expression -> cast_expression .)
    R_PAREN         reduce using rule 49 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 49 (multiplicative_expression -> cast_expression .)
    R_SQBR          reduce using rule 49 (multiplicative_expression -> cast_expression .)


state 60

    (39) unary_expression -> SIZEOF . unary_expression
    (40) unary_expression -> SIZEOF . L_PAREN type_name R_PAREN
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 137
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    unary_expression               shift and go to state 136
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 61

    (21) primary_expression -> L_PAREN . expression R_PAREN
    (48) cast_expression -> L_PAREN . type_name R_PAREN cast_expression
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (134) type_name -> . type_specifier
    (135) type_name -> . type_specifier pointer
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 47
    ENUM            shift and go to state 48
    BOOL            shift and go to state 17
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 138
    type_name                      shift and go to state 139
    cast_expression                shift and go to state 59
    assignment_expression          shift and go to state 140
    type_specifier                 shift and go to state 141
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 62

    (75) logical_or_expression -> logical_and_expression .
    (74) logical_and_expression -> logical_and_expression . LOGICAL_AND inclusive_or_expression

    QUES_MARK       reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    LOGICAL_OR      reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    SEMI_COLON      reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    R_BRACES        reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    R_PAREN         reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    R_SQBR          reduce using rule 75 (logical_or_expression -> logical_and_expression .)
    LOGICAL_AND     shift and go to state 142


state 63

    (25) postfix_expression -> primary_expression .

    INCREMENT       reduce using rule 25 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 25 (postfix_expression -> primary_expression .)
    L_SQBR          reduce using rule 25 (postfix_expression -> primary_expression .)
    L_PAREN         reduce using rule 25 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 25 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 25 (postfix_expression -> primary_expression .)
    ASSIGNMENT      reduce using rule 25 (postfix_expression -> primary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    ADD_ASSIGNMENT  reduce using rule 25 (postfix_expression -> primary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 25 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 25 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 25 (postfix_expression -> primary_expression .)
    MODULUS         reduce using rule 25 (postfix_expression -> primary_expression .)
    ADD             reduce using rule 25 (postfix_expression -> primary_expression .)
    SUBSTRACT       reduce using rule 25 (postfix_expression -> primary_expression .)
    LEFT_SHIFT      reduce using rule 25 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT     reduce using rule 25 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 25 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 25 (postfix_expression -> primary_expression .)
    LESS_EQUALS     reduce using rule 25 (postfix_expression -> primary_expression .)
    GREATER_EQUALS  reduce using rule 25 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 25 (postfix_expression -> primary_expression .)
    NOT_EQUALS      reduce using rule 25 (postfix_expression -> primary_expression .)
    BITWISE_AND     reduce using rule 25 (postfix_expression -> primary_expression .)
    BITWISE_XOR     reduce using rule 25 (postfix_expression -> primary_expression .)
    BITWISE_OR      reduce using rule 25 (postfix_expression -> primary_expression .)
    LOGICAL_AND     reduce using rule 25 (postfix_expression -> primary_expression .)
    QUES_MARK       reduce using rule 25 (postfix_expression -> primary_expression .)
    LOGICAL_OR      reduce using rule 25 (postfix_expression -> primary_expression .)
    SEMI_COLON      reduce using rule 25 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 25 (postfix_expression -> primary_expression .)
    R_BRACES        reduce using rule 25 (postfix_expression -> primary_expression .)
    R_PAREN         reduce using rule 25 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 25 (postfix_expression -> primary_expression .)
    R_SQBR          reduce using rule 25 (postfix_expression -> primary_expression .)


state 64

    (13) primary_expression -> IDENTIFIER .

    INCREMENT       reduce using rule 13 (primary_expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 13 (primary_expression -> IDENTIFIER .)
    L_SQBR          reduce using rule 13 (primary_expression -> IDENTIFIER .)
    L_PAREN         reduce using rule 13 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 13 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 13 (primary_expression -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 13 (primary_expression -> IDENTIFIER .)
    MULTIPLY_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    MODULUS_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGNMENT  reduce using rule 13 (primary_expression -> IDENTIFIER .)
    SUBSTRACT_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    BITWISE_AND_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    BITWISE_OR_ASSIGNMENT reduce using rule 13 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 13 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 13 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 13 (primary_expression -> IDENTIFIER .)
    ADD             reduce using rule 13 (primary_expression -> IDENTIFIER .)
    SUBSTRACT       reduce using rule 13 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 13 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 13 (primary_expression -> IDENTIFIER .)
    LESS            reduce using rule 13 (primary_expression -> IDENTIFIER .)
    GREATER         reduce using rule 13 (primary_expression -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 13 (primary_expression -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 13 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 13 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 13 (primary_expression -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 13 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 13 (primary_expression -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 13 (primary_expression -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 13 (primary_expression -> IDENTIFIER .)
    QUES_MARK       reduce using rule 13 (primary_expression -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 13 (primary_expression -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 13 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 13 (primary_expression -> IDENTIFIER .)
    R_BRACES        reduce using rule 13 (primary_expression -> IDENTIFIER .)
    R_PAREN         reduce using rule 13 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 13 (primary_expression -> IDENTIFIER .)
    R_SQBR          reduce using rule 13 (primary_expression -> IDENTIFIER .)


state 65

    (41) unary_operator -> BITWISE_AND .

    L_PAREN         reduce using rule 41 (unary_operator -> BITWISE_AND .)
    INCREMENT       reduce using rule 41 (unary_operator -> BITWISE_AND .)
    DECREMENT       reduce using rule 41 (unary_operator -> BITWISE_AND .)
    SIZEOF          reduce using rule 41 (unary_operator -> BITWISE_AND .)
    BITWISE_AND     reduce using rule 41 (unary_operator -> BITWISE_AND .)
    MULTIPLY        reduce using rule 41 (unary_operator -> BITWISE_AND .)
    ADD             reduce using rule 41 (unary_operator -> BITWISE_AND .)
    SUBSTRACT       reduce using rule 41 (unary_operator -> BITWISE_AND .)
    BITWISE_ONE_COMPLEMENT reduce using rule 41 (unary_operator -> BITWISE_AND .)
    LOGICAL_NOT     reduce using rule 41 (unary_operator -> BITWISE_AND .)
    IDENTIFIER      reduce using rule 41 (unary_operator -> BITWISE_AND .)
    INT_CONSTANT    reduce using rule 41 (unary_operator -> BITWISE_AND .)
    HEX_CONSTANT    reduce using rule 41 (unary_operator -> BITWISE_AND .)
    OCTAL_CONSTANT  reduce using rule 41 (unary_operator -> BITWISE_AND .)
    EXPONENT_CONSTANT reduce using rule 41 (unary_operator -> BITWISE_AND .)
    REAL_CONSTANT   reduce using rule 41 (unary_operator -> BITWISE_AND .)
    CHAR_CONSTANT   reduce using rule 41 (unary_operator -> BITWISE_AND .)
    STR_CONSTANT    reduce using rule 41 (unary_operator -> BITWISE_AND .)
    TRUE            reduce using rule 41 (unary_operator -> BITWISE_AND .)
    FALSE           reduce using rule 41 (unary_operator -> BITWISE_AND .)
    NULL            reduce using rule 41 (unary_operator -> BITWISE_AND .)


state 66

    (42) unary_operator -> MULTIPLY .

    L_PAREN         reduce using rule 42 (unary_operator -> MULTIPLY .)
    INCREMENT       reduce using rule 42 (unary_operator -> MULTIPLY .)
    DECREMENT       reduce using rule 42 (unary_operator -> MULTIPLY .)
    SIZEOF          reduce using rule 42 (unary_operator -> MULTIPLY .)
    BITWISE_AND     reduce using rule 42 (unary_operator -> MULTIPLY .)
    MULTIPLY        reduce using rule 42 (unary_operator -> MULTIPLY .)
    ADD             reduce using rule 42 (unary_operator -> MULTIPLY .)
    SUBSTRACT       reduce using rule 42 (unary_operator -> MULTIPLY .)
    BITWISE_ONE_COMPLEMENT reduce using rule 42 (unary_operator -> MULTIPLY .)
    LOGICAL_NOT     reduce using rule 42 (unary_operator -> MULTIPLY .)
    IDENTIFIER      reduce using rule 42 (unary_operator -> MULTIPLY .)
    INT_CONSTANT    reduce using rule 42 (unary_operator -> MULTIPLY .)
    HEX_CONSTANT    reduce using rule 42 (unary_operator -> MULTIPLY .)
    OCTAL_CONSTANT  reduce using rule 42 (unary_operator -> MULTIPLY .)
    EXPONENT_CONSTANT reduce using rule 42 (unary_operator -> MULTIPLY .)
    REAL_CONSTANT   reduce using rule 42 (unary_operator -> MULTIPLY .)
    CHAR_CONSTANT   reduce using rule 42 (unary_operator -> MULTIPLY .)
    STR_CONSTANT    reduce using rule 42 (unary_operator -> MULTIPLY .)
    TRUE            reduce using rule 42 (unary_operator -> MULTIPLY .)
    FALSE           reduce using rule 42 (unary_operator -> MULTIPLY .)
    NULL            reduce using rule 42 (unary_operator -> MULTIPLY .)


state 67

    (43) unary_operator -> ADD .

    L_PAREN         reduce using rule 43 (unary_operator -> ADD .)
    INCREMENT       reduce using rule 43 (unary_operator -> ADD .)
    DECREMENT       reduce using rule 43 (unary_operator -> ADD .)
    SIZEOF          reduce using rule 43 (unary_operator -> ADD .)
    BITWISE_AND     reduce using rule 43 (unary_operator -> ADD .)
    MULTIPLY        reduce using rule 43 (unary_operator -> ADD .)
    ADD             reduce using rule 43 (unary_operator -> ADD .)
    SUBSTRACT       reduce using rule 43 (unary_operator -> ADD .)
    BITWISE_ONE_COMPLEMENT reduce using rule 43 (unary_operator -> ADD .)
    LOGICAL_NOT     reduce using rule 43 (unary_operator -> ADD .)
    IDENTIFIER      reduce using rule 43 (unary_operator -> ADD .)
    INT_CONSTANT    reduce using rule 43 (unary_operator -> ADD .)
    HEX_CONSTANT    reduce using rule 43 (unary_operator -> ADD .)
    OCTAL_CONSTANT  reduce using rule 43 (unary_operator -> ADD .)
    EXPONENT_CONSTANT reduce using rule 43 (unary_operator -> ADD .)
    REAL_CONSTANT   reduce using rule 43 (unary_operator -> ADD .)
    CHAR_CONSTANT   reduce using rule 43 (unary_operator -> ADD .)
    STR_CONSTANT    reduce using rule 43 (unary_operator -> ADD .)
    TRUE            reduce using rule 43 (unary_operator -> ADD .)
    FALSE           reduce using rule 43 (unary_operator -> ADD .)
    NULL            reduce using rule 43 (unary_operator -> ADD .)


state 68

    (44) unary_operator -> SUBSTRACT .

    L_PAREN         reduce using rule 44 (unary_operator -> SUBSTRACT .)
    INCREMENT       reduce using rule 44 (unary_operator -> SUBSTRACT .)
    DECREMENT       reduce using rule 44 (unary_operator -> SUBSTRACT .)
    SIZEOF          reduce using rule 44 (unary_operator -> SUBSTRACT .)
    BITWISE_AND     reduce using rule 44 (unary_operator -> SUBSTRACT .)
    MULTIPLY        reduce using rule 44 (unary_operator -> SUBSTRACT .)
    ADD             reduce using rule 44 (unary_operator -> SUBSTRACT .)
    SUBSTRACT       reduce using rule 44 (unary_operator -> SUBSTRACT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 44 (unary_operator -> SUBSTRACT .)
    LOGICAL_NOT     reduce using rule 44 (unary_operator -> SUBSTRACT .)
    IDENTIFIER      reduce using rule 44 (unary_operator -> SUBSTRACT .)
    INT_CONSTANT    reduce using rule 44 (unary_operator -> SUBSTRACT .)
    HEX_CONSTANT    reduce using rule 44 (unary_operator -> SUBSTRACT .)
    OCTAL_CONSTANT  reduce using rule 44 (unary_operator -> SUBSTRACT .)
    EXPONENT_CONSTANT reduce using rule 44 (unary_operator -> SUBSTRACT .)
    REAL_CONSTANT   reduce using rule 44 (unary_operator -> SUBSTRACT .)
    CHAR_CONSTANT   reduce using rule 44 (unary_operator -> SUBSTRACT .)
    STR_CONSTANT    reduce using rule 44 (unary_operator -> SUBSTRACT .)
    TRUE            reduce using rule 44 (unary_operator -> SUBSTRACT .)
    FALSE           reduce using rule 44 (unary_operator -> SUBSTRACT .)
    NULL            reduce using rule 44 (unary_operator -> SUBSTRACT .)


state 69

    (45) unary_operator -> BITWISE_ONE_COMPLEMENT .

    L_PAREN         reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    INCREMENT       reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    DECREMENT       reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    SIZEOF          reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    BITWISE_AND     reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    MULTIPLY        reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    ADD             reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    SUBSTRACT       reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    LOGICAL_NOT     reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    IDENTIFIER      reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    INT_CONSTANT    reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    HEX_CONSTANT    reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    OCTAL_CONSTANT  reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    EXPONENT_CONSTANT reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    REAL_CONSTANT   reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    CHAR_CONSTANT   reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    STR_CONSTANT    reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    TRUE            reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    FALSE           reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    NULL            reduce using rule 45 (unary_operator -> BITWISE_ONE_COMPLEMENT .)


state 70

    (46) unary_operator -> LOGICAL_NOT .

    L_PAREN         reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    INCREMENT       reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    DECREMENT       reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    SIZEOF          reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    BITWISE_AND     reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    MULTIPLY        reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    ADD             reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    SUBSTRACT       reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    LOGICAL_NOT     reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    IDENTIFIER      reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    INT_CONSTANT    reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    HEX_CONSTANT    reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    OCTAL_CONSTANT  reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    EXPONENT_CONSTANT reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    REAL_CONSTANT   reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    CHAR_CONSTANT   reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    STR_CONSTANT    reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    TRUE            reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    FALSE           reduce using rule 46 (unary_operator -> LOGICAL_NOT .)
    NULL            reduce using rule 46 (unary_operator -> LOGICAL_NOT .)


state 71

    (73) logical_and_expression -> inclusive_or_expression .
    (72) inclusive_or_expression -> inclusive_or_expression . BITWISE_OR exclusive_or_expression

    LOGICAL_AND     reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    QUES_MARK       reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    LOGICAL_OR      reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    SEMI_COLON      reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    R_BRACES        reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    R_PAREN         reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    R_SQBR          reduce using rule 73 (logical_and_expression -> inclusive_or_expression .)
    BITWISE_OR      shift and go to state 143


state 72

    (14) primary_expression -> INT_CONSTANT .

    INCREMENT       reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    DECREMENT       reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    L_SQBR          reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    L_PAREN         reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    DOT             reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    ARROW           reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    ASSIGNMENT      reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    MULTIPLY        reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    DIVIDE          reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    MODULUS         reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    ADD             reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    SUBSTRACT       reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    LEFT_SHIFT      reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    LESS            reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    GREATER         reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    LESS_EQUALS     reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    GREATER_EQUALS  reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    EQUALS          reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    NOT_EQUALS      reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    BITWISE_AND     reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    BITWISE_XOR     reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    BITWISE_OR      reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    LOGICAL_AND     reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    QUES_MARK       reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    LOGICAL_OR      reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    SEMI_COLON      reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    COMMA           reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    R_BRACES        reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    R_PAREN         reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    COLON           reduce using rule 14 (primary_expression -> INT_CONSTANT .)
    R_SQBR          reduce using rule 14 (primary_expression -> INT_CONSTANT .)


state 73

    (15) primary_expression -> HEX_CONSTANT .

    INCREMENT       reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    DECREMENT       reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    L_SQBR          reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    L_PAREN         reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    DOT             reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    ARROW           reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    ASSIGNMENT      reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    MULTIPLY        reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    DIVIDE          reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    MODULUS         reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    ADD             reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    SUBSTRACT       reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    LEFT_SHIFT      reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    LESS            reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    GREATER         reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    LESS_EQUALS     reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    GREATER_EQUALS  reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    EQUALS          reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    NOT_EQUALS      reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    BITWISE_AND     reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    BITWISE_XOR     reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    BITWISE_OR      reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    LOGICAL_AND     reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    QUES_MARK       reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    LOGICAL_OR      reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    SEMI_COLON      reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    COMMA           reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    R_BRACES        reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    R_PAREN         reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    COLON           reduce using rule 15 (primary_expression -> HEX_CONSTANT .)
    R_SQBR          reduce using rule 15 (primary_expression -> HEX_CONSTANT .)


state 74

    (16) primary_expression -> OCTAL_CONSTANT .

    INCREMENT       reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    DECREMENT       reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    L_SQBR          reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    L_PAREN         reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    DOT             reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    ARROW           reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    ASSIGNMENT      reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    MULTIPLY        reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    DIVIDE          reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    MODULUS         reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    ADD             reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    SUBSTRACT       reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    LEFT_SHIFT      reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    LESS            reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    GREATER         reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    LESS_EQUALS     reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    GREATER_EQUALS  reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    EQUALS          reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    NOT_EQUALS      reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_AND     reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_XOR     reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_OR      reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    LOGICAL_AND     reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    QUES_MARK       reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    LOGICAL_OR      reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    SEMI_COLON      reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    COMMA           reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    R_BRACES        reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    R_PAREN         reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    COLON           reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)
    R_SQBR          reduce using rule 16 (primary_expression -> OCTAL_CONSTANT .)


state 75

    (17) primary_expression -> EXPONENT_CONSTANT .

    INCREMENT       reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    DECREMENT       reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    L_SQBR          reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    L_PAREN         reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    DOT             reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    ARROW           reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    ASSIGNMENT      reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    MULTIPLY        reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    DIVIDE          reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    MODULUS         reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    ADD             reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    SUBSTRACT       reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    LEFT_SHIFT      reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    LESS            reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    GREATER         reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    LESS_EQUALS     reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    GREATER_EQUALS  reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    EQUALS          reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    NOT_EQUALS      reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_AND     reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_XOR     reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_OR      reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    LOGICAL_AND     reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    QUES_MARK       reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    LOGICAL_OR      reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    SEMI_COLON      reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    COMMA           reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    R_BRACES        reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    R_PAREN         reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    COLON           reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)
    R_SQBR          reduce using rule 17 (primary_expression -> EXPONENT_CONSTANT .)


state 76

    (18) primary_expression -> REAL_CONSTANT .

    INCREMENT       reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    DECREMENT       reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    L_SQBR          reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    L_PAREN         reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    DOT             reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    ARROW           reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    ASSIGNMENT      reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    MULTIPLY        reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    DIVIDE          reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    MODULUS         reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    ADD             reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    SUBSTRACT       reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    LEFT_SHIFT      reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    LESS            reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    GREATER         reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    LESS_EQUALS     reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    GREATER_EQUALS  reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    EQUALS          reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    NOT_EQUALS      reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    BITWISE_AND     reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    BITWISE_XOR     reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    BITWISE_OR      reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    LOGICAL_AND     reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    QUES_MARK       reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    LOGICAL_OR      reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    SEMI_COLON      reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    COMMA           reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    R_BRACES        reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    R_PAREN         reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    COLON           reduce using rule 18 (primary_expression -> REAL_CONSTANT .)
    R_SQBR          reduce using rule 18 (primary_expression -> REAL_CONSTANT .)


state 77

    (19) primary_expression -> CHAR_CONSTANT .

    INCREMENT       reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    DECREMENT       reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    L_SQBR          reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    L_PAREN         reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    DOT             reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    ARROW           reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    ASSIGNMENT      reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    MULTIPLY        reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    DIVIDE          reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    MODULUS         reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    ADD             reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    SUBSTRACT       reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    LEFT_SHIFT      reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    LESS            reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    GREATER         reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    LESS_EQUALS     reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    GREATER_EQUALS  reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    EQUALS          reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    NOT_EQUALS      reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_AND     reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_XOR     reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_OR      reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    LOGICAL_AND     reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    QUES_MARK       reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    LOGICAL_OR      reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    SEMI_COLON      reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    COMMA           reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    R_BRACES        reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    R_PAREN         reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    COLON           reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)
    R_SQBR          reduce using rule 19 (primary_expression -> CHAR_CONSTANT .)


state 78

    (20) primary_expression -> STR_CONSTANT .

    INCREMENT       reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    DECREMENT       reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    L_SQBR          reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    L_PAREN         reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    DOT             reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    ARROW           reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    ASSIGNMENT      reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    MULTIPLY        reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    DIVIDE          reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    MODULUS         reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    ADD             reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    SUBSTRACT       reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    LEFT_SHIFT      reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    LESS            reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    GREATER         reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    LESS_EQUALS     reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    GREATER_EQUALS  reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    EQUALS          reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    NOT_EQUALS      reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    BITWISE_AND     reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    BITWISE_XOR     reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    BITWISE_OR      reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    LOGICAL_AND     reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    QUES_MARK       reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    LOGICAL_OR      reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    SEMI_COLON      reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    COMMA           reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    R_BRACES        reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    R_PAREN         reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    COLON           reduce using rule 20 (primary_expression -> STR_CONSTANT .)
    R_SQBR          reduce using rule 20 (primary_expression -> STR_CONSTANT .)


state 79

    (22) primary_expression -> TRUE .

    INCREMENT       reduce using rule 22 (primary_expression -> TRUE .)
    DECREMENT       reduce using rule 22 (primary_expression -> TRUE .)
    L_SQBR          reduce using rule 22 (primary_expression -> TRUE .)
    L_PAREN         reduce using rule 22 (primary_expression -> TRUE .)
    DOT             reduce using rule 22 (primary_expression -> TRUE .)
    ARROW           reduce using rule 22 (primary_expression -> TRUE .)
    ASSIGNMENT      reduce using rule 22 (primary_expression -> TRUE .)
    MULTIPLY_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    DIVIDE_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    MODULUS_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    ADD_ASSIGNMENT  reduce using rule 22 (primary_expression -> TRUE .)
    SUBSTRACT_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    BITWISE_AND_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    BITWISE_OR_ASSIGNMENT reduce using rule 22 (primary_expression -> TRUE .)
    MULTIPLY        reduce using rule 22 (primary_expression -> TRUE .)
    DIVIDE          reduce using rule 22 (primary_expression -> TRUE .)
    MODULUS         reduce using rule 22 (primary_expression -> TRUE .)
    ADD             reduce using rule 22 (primary_expression -> TRUE .)
    SUBSTRACT       reduce using rule 22 (primary_expression -> TRUE .)
    LEFT_SHIFT      reduce using rule 22 (primary_expression -> TRUE .)
    RIGHT_SHIFT     reduce using rule 22 (primary_expression -> TRUE .)
    LESS            reduce using rule 22 (primary_expression -> TRUE .)
    GREATER         reduce using rule 22 (primary_expression -> TRUE .)
    LESS_EQUALS     reduce using rule 22 (primary_expression -> TRUE .)
    GREATER_EQUALS  reduce using rule 22 (primary_expression -> TRUE .)
    EQUALS          reduce using rule 22 (primary_expression -> TRUE .)
    NOT_EQUALS      reduce using rule 22 (primary_expression -> TRUE .)
    BITWISE_AND     reduce using rule 22 (primary_expression -> TRUE .)
    BITWISE_XOR     reduce using rule 22 (primary_expression -> TRUE .)
    BITWISE_OR      reduce using rule 22 (primary_expression -> TRUE .)
    LOGICAL_AND     reduce using rule 22 (primary_expression -> TRUE .)
    QUES_MARK       reduce using rule 22 (primary_expression -> TRUE .)
    LOGICAL_OR      reduce using rule 22 (primary_expression -> TRUE .)
    SEMI_COLON      reduce using rule 22 (primary_expression -> TRUE .)
    COMMA           reduce using rule 22 (primary_expression -> TRUE .)
    R_BRACES        reduce using rule 22 (primary_expression -> TRUE .)
    R_PAREN         reduce using rule 22 (primary_expression -> TRUE .)
    COLON           reduce using rule 22 (primary_expression -> TRUE .)
    R_SQBR          reduce using rule 22 (primary_expression -> TRUE .)


state 80

    (23) primary_expression -> FALSE .

    INCREMENT       reduce using rule 23 (primary_expression -> FALSE .)
    DECREMENT       reduce using rule 23 (primary_expression -> FALSE .)
    L_SQBR          reduce using rule 23 (primary_expression -> FALSE .)
    L_PAREN         reduce using rule 23 (primary_expression -> FALSE .)
    DOT             reduce using rule 23 (primary_expression -> FALSE .)
    ARROW           reduce using rule 23 (primary_expression -> FALSE .)
    ASSIGNMENT      reduce using rule 23 (primary_expression -> FALSE .)
    MULTIPLY_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    DIVIDE_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    MODULUS_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    ADD_ASSIGNMENT  reduce using rule 23 (primary_expression -> FALSE .)
    SUBSTRACT_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    BITWISE_AND_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    BITWISE_OR_ASSIGNMENT reduce using rule 23 (primary_expression -> FALSE .)
    MULTIPLY        reduce using rule 23 (primary_expression -> FALSE .)
    DIVIDE          reduce using rule 23 (primary_expression -> FALSE .)
    MODULUS         reduce using rule 23 (primary_expression -> FALSE .)
    ADD             reduce using rule 23 (primary_expression -> FALSE .)
    SUBSTRACT       reduce using rule 23 (primary_expression -> FALSE .)
    LEFT_SHIFT      reduce using rule 23 (primary_expression -> FALSE .)
    RIGHT_SHIFT     reduce using rule 23 (primary_expression -> FALSE .)
    LESS            reduce using rule 23 (primary_expression -> FALSE .)
    GREATER         reduce using rule 23 (primary_expression -> FALSE .)
    LESS_EQUALS     reduce using rule 23 (primary_expression -> FALSE .)
    GREATER_EQUALS  reduce using rule 23 (primary_expression -> FALSE .)
    EQUALS          reduce using rule 23 (primary_expression -> FALSE .)
    NOT_EQUALS      reduce using rule 23 (primary_expression -> FALSE .)
    BITWISE_AND     reduce using rule 23 (primary_expression -> FALSE .)
    BITWISE_XOR     reduce using rule 23 (primary_expression -> FALSE .)
    BITWISE_OR      reduce using rule 23 (primary_expression -> FALSE .)
    LOGICAL_AND     reduce using rule 23 (primary_expression -> FALSE .)
    QUES_MARK       reduce using rule 23 (primary_expression -> FALSE .)
    LOGICAL_OR      reduce using rule 23 (primary_expression -> FALSE .)
    SEMI_COLON      reduce using rule 23 (primary_expression -> FALSE .)
    COMMA           reduce using rule 23 (primary_expression -> FALSE .)
    R_BRACES        reduce using rule 23 (primary_expression -> FALSE .)
    R_PAREN         reduce using rule 23 (primary_expression -> FALSE .)
    COLON           reduce using rule 23 (primary_expression -> FALSE .)
    R_SQBR          reduce using rule 23 (primary_expression -> FALSE .)


state 81

    (24) primary_expression -> NULL .

    INCREMENT       reduce using rule 24 (primary_expression -> NULL .)
    DECREMENT       reduce using rule 24 (primary_expression -> NULL .)
    L_SQBR          reduce using rule 24 (primary_expression -> NULL .)
    L_PAREN         reduce using rule 24 (primary_expression -> NULL .)
    DOT             reduce using rule 24 (primary_expression -> NULL .)
    ARROW           reduce using rule 24 (primary_expression -> NULL .)
    ASSIGNMENT      reduce using rule 24 (primary_expression -> NULL .)
    MULTIPLY_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    DIVIDE_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    MODULUS_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    ADD_ASSIGNMENT  reduce using rule 24 (primary_expression -> NULL .)
    SUBSTRACT_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    BITWISE_AND_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    BITWISE_OR_ASSIGNMENT reduce using rule 24 (primary_expression -> NULL .)
    MULTIPLY        reduce using rule 24 (primary_expression -> NULL .)
    DIVIDE          reduce using rule 24 (primary_expression -> NULL .)
    MODULUS         reduce using rule 24 (primary_expression -> NULL .)
    ADD             reduce using rule 24 (primary_expression -> NULL .)
    SUBSTRACT       reduce using rule 24 (primary_expression -> NULL .)
    LEFT_SHIFT      reduce using rule 24 (primary_expression -> NULL .)
    RIGHT_SHIFT     reduce using rule 24 (primary_expression -> NULL .)
    LESS            reduce using rule 24 (primary_expression -> NULL .)
    GREATER         reduce using rule 24 (primary_expression -> NULL .)
    LESS_EQUALS     reduce using rule 24 (primary_expression -> NULL .)
    GREATER_EQUALS  reduce using rule 24 (primary_expression -> NULL .)
    EQUALS          reduce using rule 24 (primary_expression -> NULL .)
    NOT_EQUALS      reduce using rule 24 (primary_expression -> NULL .)
    BITWISE_AND     reduce using rule 24 (primary_expression -> NULL .)
    BITWISE_XOR     reduce using rule 24 (primary_expression -> NULL .)
    BITWISE_OR      reduce using rule 24 (primary_expression -> NULL .)
    LOGICAL_AND     reduce using rule 24 (primary_expression -> NULL .)
    QUES_MARK       reduce using rule 24 (primary_expression -> NULL .)
    LOGICAL_OR      reduce using rule 24 (primary_expression -> NULL .)
    SEMI_COLON      reduce using rule 24 (primary_expression -> NULL .)
    COMMA           reduce using rule 24 (primary_expression -> NULL .)
    R_BRACES        reduce using rule 24 (primary_expression -> NULL .)
    R_PAREN         reduce using rule 24 (primary_expression -> NULL .)
    COLON           reduce using rule 24 (primary_expression -> NULL .)
    R_SQBR          reduce using rule 24 (primary_expression -> NULL .)


state 82

    (71) inclusive_or_expression -> exclusive_or_expression .
    (70) exclusive_or_expression -> exclusive_or_expression . BITWISE_XOR and_expression

    BITWISE_OR      reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    LOGICAL_AND     reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    QUES_MARK       reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    LOGICAL_OR      reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI_COLON      reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    R_BRACES        reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    R_PAREN         reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    R_SQBR          reduce using rule 71 (inclusive_or_expression -> exclusive_or_expression .)
    BITWISE_XOR     shift and go to state 144


state 83

    (69) exclusive_or_expression -> and_expression .
    (68) and_expression -> and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 69 (exclusive_or_expression -> and_expression .)
    BITWISE_OR      reduce using rule 69 (exclusive_or_expression -> and_expression .)
    LOGICAL_AND     reduce using rule 69 (exclusive_or_expression -> and_expression .)
    QUES_MARK       reduce using rule 69 (exclusive_or_expression -> and_expression .)
    LOGICAL_OR      reduce using rule 69 (exclusive_or_expression -> and_expression .)
    SEMI_COLON      reduce using rule 69 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 69 (exclusive_or_expression -> and_expression .)
    R_BRACES        reduce using rule 69 (exclusive_or_expression -> and_expression .)
    R_PAREN         reduce using rule 69 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 69 (exclusive_or_expression -> and_expression .)
    R_SQBR          reduce using rule 69 (exclusive_or_expression -> and_expression .)
    BITWISE_AND     shift and go to state 145


state 84

    (67) and_expression -> equality_expression .
    (65) equality_expression -> equality_expression . EQUALS relational_expression
    (66) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    BITWISE_AND     reduce using rule 67 (and_expression -> equality_expression .)
    BITWISE_XOR     reduce using rule 67 (and_expression -> equality_expression .)
    BITWISE_OR      reduce using rule 67 (and_expression -> equality_expression .)
    LOGICAL_AND     reduce using rule 67 (and_expression -> equality_expression .)
    QUES_MARK       reduce using rule 67 (and_expression -> equality_expression .)
    LOGICAL_OR      reduce using rule 67 (and_expression -> equality_expression .)
    SEMI_COLON      reduce using rule 67 (and_expression -> equality_expression .)
    COMMA           reduce using rule 67 (and_expression -> equality_expression .)
    R_BRACES        reduce using rule 67 (and_expression -> equality_expression .)
    R_PAREN         reduce using rule 67 (and_expression -> equality_expression .)
    COLON           reduce using rule 67 (and_expression -> equality_expression .)
    R_SQBR          reduce using rule 67 (and_expression -> equality_expression .)
    EQUALS          shift and go to state 146
    NOT_EQUALS      shift and go to state 147


state 85

    (64) equality_expression -> relational_expression .
    (60) relational_expression -> relational_expression . LESS shift_expression
    (61) relational_expression -> relational_expression . GREATER shift_expression
    (62) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (63) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

    EQUALS          reduce using rule 64 (equality_expression -> relational_expression .)
    NOT_EQUALS      reduce using rule 64 (equality_expression -> relational_expression .)
    BITWISE_AND     reduce using rule 64 (equality_expression -> relational_expression .)
    BITWISE_XOR     reduce using rule 64 (equality_expression -> relational_expression .)
    BITWISE_OR      reduce using rule 64 (equality_expression -> relational_expression .)
    LOGICAL_AND     reduce using rule 64 (equality_expression -> relational_expression .)
    QUES_MARK       reduce using rule 64 (equality_expression -> relational_expression .)
    LOGICAL_OR      reduce using rule 64 (equality_expression -> relational_expression .)
    SEMI_COLON      reduce using rule 64 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 64 (equality_expression -> relational_expression .)
    R_BRACES        reduce using rule 64 (equality_expression -> relational_expression .)
    R_PAREN         reduce using rule 64 (equality_expression -> relational_expression .)
    COLON           reduce using rule 64 (equality_expression -> relational_expression .)
    R_SQBR          reduce using rule 64 (equality_expression -> relational_expression .)
    LESS            shift and go to state 148
    GREATER         shift and go to state 149
    LESS_EQUALS     shift and go to state 150
    GREATER_EQUALS  shift and go to state 151


state 86

    (59) relational_expression -> shift_expression .
    (57) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (58) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 59 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 59 (relational_expression -> shift_expression .)
    LESS_EQUALS     reduce using rule 59 (relational_expression -> shift_expression .)
    GREATER_EQUALS  reduce using rule 59 (relational_expression -> shift_expression .)
    EQUALS          reduce using rule 59 (relational_expression -> shift_expression .)
    NOT_EQUALS      reduce using rule 59 (relational_expression -> shift_expression .)
    BITWISE_AND     reduce using rule 59 (relational_expression -> shift_expression .)
    BITWISE_XOR     reduce using rule 59 (relational_expression -> shift_expression .)
    BITWISE_OR      reduce using rule 59 (relational_expression -> shift_expression .)
    LOGICAL_AND     reduce using rule 59 (relational_expression -> shift_expression .)
    QUES_MARK       reduce using rule 59 (relational_expression -> shift_expression .)
    LOGICAL_OR      reduce using rule 59 (relational_expression -> shift_expression .)
    SEMI_COLON      reduce using rule 59 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 59 (relational_expression -> shift_expression .)
    R_BRACES        reduce using rule 59 (relational_expression -> shift_expression .)
    R_PAREN         reduce using rule 59 (relational_expression -> shift_expression .)
    COLON           reduce using rule 59 (relational_expression -> shift_expression .)
    R_SQBR          reduce using rule 59 (relational_expression -> shift_expression .)
    LEFT_SHIFT      shift and go to state 152
    RIGHT_SHIFT     shift and go to state 153


state 87

    (56) shift_expression -> additive_expression .
    (54) additive_expression -> additive_expression . ADD multiplicative_expression
    (55) additive_expression -> additive_expression . SUBSTRACT multiplicative_expression

    LEFT_SHIFT      reduce using rule 56 (shift_expression -> additive_expression .)
    RIGHT_SHIFT     reduce using rule 56 (shift_expression -> additive_expression .)
    LESS            reduce using rule 56 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 56 (shift_expression -> additive_expression .)
    LESS_EQUALS     reduce using rule 56 (shift_expression -> additive_expression .)
    GREATER_EQUALS  reduce using rule 56 (shift_expression -> additive_expression .)
    EQUALS          reduce using rule 56 (shift_expression -> additive_expression .)
    NOT_EQUALS      reduce using rule 56 (shift_expression -> additive_expression .)
    BITWISE_AND     reduce using rule 56 (shift_expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 56 (shift_expression -> additive_expression .)
    BITWISE_OR      reduce using rule 56 (shift_expression -> additive_expression .)
    LOGICAL_AND     reduce using rule 56 (shift_expression -> additive_expression .)
    QUES_MARK       reduce using rule 56 (shift_expression -> additive_expression .)
    LOGICAL_OR      reduce using rule 56 (shift_expression -> additive_expression .)
    SEMI_COLON      reduce using rule 56 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 56 (shift_expression -> additive_expression .)
    R_BRACES        reduce using rule 56 (shift_expression -> additive_expression .)
    R_PAREN         reduce using rule 56 (shift_expression -> additive_expression .)
    COLON           reduce using rule 56 (shift_expression -> additive_expression .)
    R_SQBR          reduce using rule 56 (shift_expression -> additive_expression .)
    ADD             shift and go to state 154
    SUBSTRACT       shift and go to state 155


state 88

    (53) additive_expression -> multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (52) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    ADD             reduce using rule 53 (additive_expression -> multiplicative_expression .)
    SUBSTRACT       reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 53 (additive_expression -> multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 53 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LESS_EQUALS     reduce using rule 53 (additive_expression -> multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 53 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    NOT_EQUALS      reduce using rule 53 (additive_expression -> multiplicative_expression .)
    BITWISE_AND     reduce using rule 53 (additive_expression -> multiplicative_expression .)
    BITWISE_XOR     reduce using rule 53 (additive_expression -> multiplicative_expression .)
    BITWISE_OR      reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LOGICAL_AND     reduce using rule 53 (additive_expression -> multiplicative_expression .)
    QUES_MARK       reduce using rule 53 (additive_expression -> multiplicative_expression .)
    LOGICAL_OR      reduce using rule 53 (additive_expression -> multiplicative_expression .)
    SEMI_COLON      reduce using rule 53 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 53 (additive_expression -> multiplicative_expression .)
    R_BRACES        reduce using rule 53 (additive_expression -> multiplicative_expression .)
    R_PAREN         reduce using rule 53 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 53 (additive_expression -> multiplicative_expression .)
    R_SQBR          reduce using rule 53 (additive_expression -> multiplicative_expression .)
    MULTIPLY        shift and go to state 156
    DIVIDE          shift and go to state 157
    MODULUS         shift and go to state 158


state 89

    (99) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI_COLON      reduce using rule 99 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 99 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 90

    (100) init_declarator -> declarator .
    (101) init_declarator -> declarator . ASSIGNMENT initializer

    SEMI_COLON      reduce using rule 100 (init_declarator -> declarator .)
    COMMA           reduce using rule 100 (init_declarator -> declarator .)
    ASSIGNMENT      shift and go to state 30


state 91

    (127) direct_declarator -> direct_declarator L_SQBR . INT_CONSTANT R_SQBR

    INT_CONSTANT    shift and go to state 159


state 92

    (126) direct_declarator -> L_PAREN declarator . R_PAREN

    R_PAREN         shift and go to state 160


state 93

    (111) struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list . pop_sym R_BRACES
    (114) struct_declaration_list -> struct_declaration_list . struct_declaration
    (172) pop_sym -> .
    (115) struct_declaration -> . type_specifier struct_declarator_list SEMI_COLON
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL

    R_BRACES        reduce using rule 172 (pop_sym -> .)
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 47
    ENUM            shift and go to state 48
    BOOL            shift and go to state 17

    pop_sym                        shift and go to state 161
    struct_declaration             shift and go to state 162
    type_specifier                 shift and go to state 95

state 94

    (113) struct_declaration_list -> struct_declaration .

    VOID            reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 113 (struct_declaration_list -> struct_declaration .)
    R_BRACES        reduce using rule 113 (struct_declaration_list -> struct_declaration .)


state 95

    (115) struct_declaration -> type_specifier . struct_declarator_list SEMI_COLON
    (116) struct_declarator_list -> . declarator
    (117) struct_declarator_list -> . struct_declarator_list COMMA declarator
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . no_pointer direct_declarator
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY
    (130) no_pointer -> .

    MULTIPLY        shift and go to state 24
    IDENTIFIER      reduce using rule 130 (no_pointer -> .)
    L_PAREN         reduce using rule 130 (no_pointer -> .)

    struct_declarator_list         shift and go to state 163
    declarator                     shift and go to state 164
    pointer                        shift and go to state 21
    no_pointer                     shift and go to state 22

state 96

    (121) enumerator -> IDENTIFIER .
    (122) enumerator -> IDENTIFIER . ASSIGNMENT constant_expression

    R_BRACES        reduce using rule 121 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 121 (enumerator -> IDENTIFIER .)
    ASSIGNMENT      shift and go to state 165


state 97

    (118) enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list . R_BRACES
    (120) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACES        shift and go to state 166
    COMMA           shift and go to state 167


state 98

    (119) enumerator_list -> enumerator .

    R_BRACES        reduce using rule 119 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 119 (enumerator_list -> enumerator .)


state 99

    (133) parameter_declaration -> type_specifier declarator .

    R_PAREN         reduce using rule 133 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 133 (parameter_declaration -> type_specifier declarator .)


state 100

    (6) function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 . function_body pop_sym
    (152) function_body -> . L_BRACES R_BRACES
    (153) function_body -> . L_BRACES block_item_list R_BRACES

    L_BRACES        shift and go to state 104

    function_body                  shift and go to state 168

state 101

    (8) function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN . SEMI_COLON pop_sym
    (11) func_rparen_1 -> R_PAREN .

    SEMI_COLON      shift and go to state 169
    L_BRACES        reduce using rule 11 (func_rparen_1 -> R_PAREN .)


state 102

    (132) parameter_type_list -> parameter_type_list COMMA . parameter_declaration
    (133) parameter_declaration -> . type_specifier declarator
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 47
    ENUM            shift and go to state 48
    BOOL            shift and go to state 17

    parameter_declaration          shift and go to state 170
    type_specifier                 shift and go to state 42

state 103

    (7) function_definition -> type_specifier declarator func_scope func_rparen_2 function_body . pop_sym
    (172) pop_sym -> .

    VOID            reduce using rule 172 (pop_sym -> .)
    CHAR            reduce using rule 172 (pop_sym -> .)
    INT             reduce using rule 172 (pop_sym -> .)
    LONG            reduce using rule 172 (pop_sym -> .)
    FLOAT           reduce using rule 172 (pop_sym -> .)
    DOUBLE          reduce using rule 172 (pop_sym -> .)
    STRUCT          reduce using rule 172 (pop_sym -> .)
    ENUM            reduce using rule 172 (pop_sym -> .)
    BOOL            reduce using rule 172 (pop_sym -> .)
    $end            reduce using rule 172 (pop_sym -> .)

    pop_sym                        shift and go to state 171

state 104

    (152) function_body -> L_BRACES . R_BRACES
    (153) function_body -> L_BRACES . block_item_list R_BRACES
    (154) block_item_list -> . block_item
    (155) block_item_list -> . block_item_list block_item
    (156) block_item -> . statement
    (157) block_item -> . declaration
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (95) declaration -> . struct_specifier SEMI_COLON
    (96) declaration -> . enum_specifier SEMI_COLON
    (97) declaration -> . type_specifier init_declarator_list SEMI_COLON
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (111) struct_specifier -> . STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
    (118) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACES        shift and go to state 173
    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    STRUCT          shift and go to state 194
    ENUM            shift and go to state 195
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 17
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    block_item_list                shift and go to state 174
    block_item                     shift and go to state 175
    statement                      shift and go to state 176
    declaration                    shift and go to state 177
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    struct_specifier               shift and go to state 7
    enum_specifier                 shift and go to state 8
    type_specifier                 shift and go to state 184
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 105

    (9) function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON . pop_sym
    (172) pop_sym -> .

    VOID            reduce using rule 172 (pop_sym -> .)
    CHAR            reduce using rule 172 (pop_sym -> .)
    INT             reduce using rule 172 (pop_sym -> .)
    LONG            reduce using rule 172 (pop_sym -> .)
    FLOAT           reduce using rule 172 (pop_sym -> .)
    DOUBLE          reduce using rule 172 (pop_sym -> .)
    STRUCT          reduce using rule 172 (pop_sym -> .)
    ENUM            reduce using rule 172 (pop_sym -> .)
    BOOL            reduce using rule 172 (pop_sym -> .)
    $end            reduce using rule 172 (pop_sym -> .)

    pop_sym                        shift and go to state 196

state 106

    (108) type_specifier -> STRUCT IDENTIFIER .

    MULTIPLY        reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    L_PAREN         reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    R_PAREN         reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)


state 107

    (109) type_specifier -> ENUM IDENTIFIER .

    MULTIPLY        reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    L_PAREN         reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    R_PAREN         reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)


state 108

    (137) initializer -> L_BRACES initializer_list . R_BRACES
    (138) initializer -> L_BRACES initializer_list . COMMA R_BRACES
    (140) initializer_list -> initializer_list . COMMA initializer

    R_BRACES        shift and go to state 197
    COMMA           shift and go to state 198


state 109

    (139) initializer_list -> initializer .

    R_BRACES        reduce using rule 139 (initializer_list -> initializer .)
    COMMA           reduce using rule 139 (initializer_list -> initializer .)


state 110

    (80) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    unary_expression               shift and go to state 53
    assignment_expression          shift and go to state 199
    conditional_expression         shift and go to state 52
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 111

    (81) assignment_operator -> ASSIGNMENT .

    INCREMENT       reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    DECREMENT       reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    SIZEOF          reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    BITWISE_AND     reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    MULTIPLY        reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    ADD             reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    SUBSTRACT       reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    IDENTIFIER      reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    L_PAREN         reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    TRUE            reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    FALSE           reduce using rule 81 (assignment_operator -> ASSIGNMENT .)
    NULL            reduce using rule 81 (assignment_operator -> ASSIGNMENT .)


state 112

    (82) assignment_operator -> MULTIPLY_ASSIGNMENT .

    INCREMENT       reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    DECREMENT       reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    SIZEOF          reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    MULTIPLY        reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    ADD             reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    L_PAREN         reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    TRUE            reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    FALSE           reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    NULL            reduce using rule 82 (assignment_operator -> MULTIPLY_ASSIGNMENT .)


state 113

    (83) assignment_operator -> DIVIDE_ASSIGNMENT .

    INCREMENT       reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    DECREMENT       reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    SIZEOF          reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    MULTIPLY        reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    ADD             reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    L_PAREN         reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    TRUE            reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    FALSE           reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    NULL            reduce using rule 83 (assignment_operator -> DIVIDE_ASSIGNMENT .)


state 114

    (84) assignment_operator -> MODULUS_ASSIGNMENT .

    INCREMENT       reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    DECREMENT       reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    SIZEOF          reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    MULTIPLY        reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    ADD             reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    L_PAREN         reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    TRUE            reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    FALSE           reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)
    NULL            reduce using rule 84 (assignment_operator -> MODULUS_ASSIGNMENT .)


state 115

    (85) assignment_operator -> ADD_ASSIGNMENT .

    INCREMENT       reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    DECREMENT       reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    SIZEOF          reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    MULTIPLY        reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    ADD             reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    L_PAREN         reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    TRUE            reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    FALSE           reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)
    NULL            reduce using rule 85 (assignment_operator -> ADD_ASSIGNMENT .)


state 116

    (86) assignment_operator -> SUBSTRACT_ASSIGNMENT .

    INCREMENT       reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    DECREMENT       reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    SIZEOF          reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    MULTIPLY        reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    ADD             reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    L_PAREN         reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    TRUE            reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    FALSE           reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    NULL            reduce using rule 86 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)


state 117

    (87) assignment_operator -> LEFT_SHIFT_ASSIGNMENT .

    INCREMENT       reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    DECREMENT       reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    SIZEOF          reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    MULTIPLY        reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    ADD             reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    L_PAREN         reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    TRUE            reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    FALSE           reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    NULL            reduce using rule 87 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)


state 118

    (88) assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .

    INCREMENT       reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    DECREMENT       reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    SIZEOF          reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    MULTIPLY        reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    ADD             reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    L_PAREN         reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    TRUE            reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    FALSE           reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    NULL            reduce using rule 88 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)


state 119

    (89) assignment_operator -> BITWISE_AND_ASSIGNMENT .

    INCREMENT       reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    DECREMENT       reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    SIZEOF          reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    MULTIPLY        reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    ADD             reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    L_PAREN         reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    TRUE            reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    FALSE           reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    NULL            reduce using rule 89 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)


state 120

    (90) assignment_operator -> BITWISE_XOR_ASSIGNMENT .

    INCREMENT       reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    DECREMENT       reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    SIZEOF          reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    MULTIPLY        reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    ADD             reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    L_PAREN         reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    TRUE            reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    FALSE           reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    NULL            reduce using rule 90 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)


state 121

    (91) assignment_operator -> BITWISE_OR_ASSIGNMENT .

    INCREMENT       reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    DECREMENT       reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    SIZEOF          reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    MULTIPLY        reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    ADD             reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    L_PAREN         reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    TRUE            reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    FALSE           reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    NULL            reduce using rule 91 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)


state 122

    (78) conditional_expression -> logical_or_expression QUES_MARK . expression COLON conditional_expression
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    logical_or_expression          shift and go to state 54
    expression                     shift and go to state 200
    conditional_expression         shift and go to state 52
    assignment_expression          shift and go to state 140
    unary_expression               shift and go to state 53
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 123

    (76) logical_or_expression -> logical_or_expression LOGICAL_OR . logical_and_expression
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    logical_and_expression         shift and go to state 201
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 124

    (26) postfix_expression -> postfix_expression INCREMENT .

    INCREMENT       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    L_SQBR          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    L_PAREN         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DOT             reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ARROW           reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ASSIGNMENT      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLY_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MODULUS_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ADD_ASSIGNMENT  reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLY        reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MODULUS         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ADD             reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    SUBSTRACT       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LEFT_SHIFT      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    RIGHT_SHIFT     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LESS            reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LESS_EQUALS     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER_EQUALS  reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    EQUALS          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    NOT_EQUALS      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_AND     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_XOR     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_OR      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LOGICAL_AND     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    QUES_MARK       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LOGICAL_OR      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    SEMI_COLON      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    R_BRACES        reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    R_PAREN         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    COLON           reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    R_SQBR          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)


state 125

    (27) postfix_expression -> postfix_expression DECREMENT .

    INCREMENT       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    L_SQBR          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    L_PAREN         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DOT             reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ARROW           reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ASSIGNMENT      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLY_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MODULUS_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ADD_ASSIGNMENT  reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLY        reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MODULUS         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ADD             reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    SUBSTRACT       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LEFT_SHIFT      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    RIGHT_SHIFT     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LESS            reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LESS_EQUALS     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER_EQUALS  reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    EQUALS          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    NOT_EQUALS      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_AND     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_XOR     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_OR      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LOGICAL_AND     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    QUES_MARK       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LOGICAL_OR      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    SEMI_COLON      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    R_BRACES        reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    R_PAREN         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    COLON           reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    R_SQBR          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)


state 126

    (28) postfix_expression -> postfix_expression L_SQBR . expression R_SQBR
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    postfix_expression             shift and go to state 55
    expression                     shift and go to state 202
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 127

    (29) postfix_expression -> postfix_expression L_PAREN . R_PAREN
    (30) postfix_expression -> postfix_expression L_PAREN . argument_expression_list R_PAREN
    (33) argument_expression_list -> . assignment_expression
    (34) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_PAREN         shift and go to state 203
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    postfix_expression             shift and go to state 55
    argument_expression_list       shift and go to state 204
    assignment_expression          shift and go to state 205
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 128

    (31) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 206


state 129

    (32) postfix_expression -> postfix_expression ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 207


state 130

    (36) unary_expression -> INCREMENT unary_expression .

    ASSIGNMENT      reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLY        reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    MODULUS         reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    ADD             reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    SUBSTRACT       reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    LEFT_SHIFT      reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    RIGHT_SHIFT     reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    LESS            reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    GREATER         reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    LESS_EQUALS     reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    GREATER_EQUALS  reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    EQUALS          reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    NOT_EQUALS      reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_AND     reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_OR      reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    LOGICAL_AND     reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    QUES_MARK       reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    LOGICAL_OR      reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    SEMI_COLON      reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    R_BRACES        reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    R_PAREN         reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)
    R_SQBR          reduce using rule 36 (unary_expression -> INCREMENT unary_expression .)


state 131

    (21) primary_expression -> L_PAREN . expression R_PAREN
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 138
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 132

    (37) unary_expression -> DECREMENT unary_expression .

    ASSIGNMENT      reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLY        reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    MODULUS         reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    ADD             reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    SUBSTRACT       reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    LEFT_SHIFT      reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    RIGHT_SHIFT     reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    LESS            reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    GREATER         reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    LESS_EQUALS     reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    GREATER_EQUALS  reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    EQUALS          reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    NOT_EQUALS      reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_AND     reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_OR      reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    LOGICAL_AND     reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    QUES_MARK       reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    LOGICAL_OR      reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    SEMI_COLON      reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    R_BRACES        reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    R_PAREN         reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)
    R_SQBR          reduce using rule 37 (unary_expression -> DECREMENT unary_expression .)


state 133

    (38) unary_expression -> unary_operator cast_expression .

    ASSIGNMENT      reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    MODULUS_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGNMENT  reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY        reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    MODULUS         reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    ADD             reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    SUBSTRACT       reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT      reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT     reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    LESS            reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    GREATER         reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    LESS_EQUALS     reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    GREATER_EQUALS  reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    NOT_EQUALS      reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    BITWISE_AND     reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    BITWISE_XOR     reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    BITWISE_OR      reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    LOGICAL_AND     reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    QUES_MARK       reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    LOGICAL_OR      reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    SEMI_COLON      reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    R_BRACES        reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    R_PAREN         reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 38 (unary_expression -> unary_operator cast_expression .)
    R_SQBR          reduce using rule 38 (unary_expression -> unary_operator cast_expression .)


state 134

    (47) cast_expression -> unary_expression .

    ASSIGNMENT      reduce using rule 47 (cast_expression -> unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 47 (cast_expression -> unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 47 (cast_expression -> unary_expression .)
    MULTIPLY        reduce using rule 47 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 47 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 47 (cast_expression -> unary_expression .)
    ADD             reduce using rule 47 (cast_expression -> unary_expression .)
    SUBSTRACT       reduce using rule 47 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 47 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 47 (cast_expression -> unary_expression .)
    LESS            reduce using rule 47 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 47 (cast_expression -> unary_expression .)
    LESS_EQUALS     reduce using rule 47 (cast_expression -> unary_expression .)
    GREATER_EQUALS  reduce using rule 47 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 47 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 47 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 47 (cast_expression -> unary_expression .)
    LOGICAL_AND     reduce using rule 47 (cast_expression -> unary_expression .)
    QUES_MARK       reduce using rule 47 (cast_expression -> unary_expression .)
    LOGICAL_OR      reduce using rule 47 (cast_expression -> unary_expression .)
    SEMI_COLON      reduce using rule 47 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 47 (cast_expression -> unary_expression .)
    R_BRACES        reduce using rule 47 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 47 (cast_expression -> unary_expression .)
    COLON           reduce using rule 47 (cast_expression -> unary_expression .)
    R_SQBR          reduce using rule 47 (cast_expression -> unary_expression .)


state 135

    (48) cast_expression -> L_PAREN . type_name R_PAREN cast_expression
    (21) primary_expression -> L_PAREN . expression R_PAREN
    (134) type_name -> . type_specifier
    (135) type_name -> . type_specifier pointer
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 47
    ENUM            shift and go to state 48
    BOOL            shift and go to state 17
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    type_name                      shift and go to state 139
    cast_expression                shift and go to state 59
    expression                     shift and go to state 138
    type_specifier                 shift and go to state 141
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 136

    (39) unary_expression -> SIZEOF unary_expression .

    ASSIGNMENT      reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY        reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    MODULUS         reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    ADD             reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    SUBSTRACT       reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    LEFT_SHIFT      reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SHIFT     reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    LESS_EQUALS     reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    GREATER_EQUALS  reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    NOT_EQUALS      reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_AND     reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_XOR     reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_OR      reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    LOGICAL_AND     reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    QUES_MARK       reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    LOGICAL_OR      reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    SEMI_COLON      reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    R_BRACES        reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    R_PAREN         reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)
    R_SQBR          reduce using rule 39 (unary_expression -> SIZEOF unary_expression .)


state 137

    (40) unary_expression -> SIZEOF L_PAREN . type_name R_PAREN
    (21) primary_expression -> L_PAREN . expression R_PAREN
    (134) type_name -> . type_specifier
    (135) type_name -> . type_specifier pointer
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    STRUCT          shift and go to state 47
    ENUM            shift and go to state 48
    BOOL            shift and go to state 17
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    type_name                      shift and go to state 208
    expression                     shift and go to state 138
    type_specifier                 shift and go to state 141
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 138

    (21) primary_expression -> L_PAREN expression . R_PAREN
    (93) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 209
    COMMA           shift and go to state 210


state 139

    (48) cast_expression -> L_PAREN type_name . R_PAREN cast_expression

    R_PAREN         shift and go to state 211


state 140

    (92) expression -> assignment_expression .

    R_PAREN         reduce using rule 92 (expression -> assignment_expression .)
    COMMA           reduce using rule 92 (expression -> assignment_expression .)
    SEMI_COLON      reduce using rule 92 (expression -> assignment_expression .)
    COLON           reduce using rule 92 (expression -> assignment_expression .)
    R_SQBR          reduce using rule 92 (expression -> assignment_expression .)


state 141

    (134) type_name -> type_specifier .
    (135) type_name -> type_specifier . pointer
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY

    R_PAREN         reduce using rule 134 (type_name -> type_specifier .)
    MULTIPLY        shift and go to state 24

    pointer                        shift and go to state 212

state 142

    (74) logical_and_expression -> logical_and_expression LOGICAL_AND . inclusive_or_expression
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    inclusive_or_expression        shift and go to state 213
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 143

    (72) inclusive_or_expression -> inclusive_or_expression BITWISE_OR . exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    exclusive_or_expression        shift and go to state 214
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 144

    (70) exclusive_or_expression -> exclusive_or_expression BITWISE_XOR . and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    and_expression                 shift and go to state 215
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 145

    (68) and_expression -> and_expression BITWISE_AND . equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    equality_expression            shift and go to state 216
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 146

    (65) equality_expression -> equality_expression EQUALS . relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    relational_expression          shift and go to state 217
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 147

    (66) equality_expression -> equality_expression NOT_EQUALS . relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    relational_expression          shift and go to state 218
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 148

    (60) relational_expression -> relational_expression LESS . shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    shift_expression               shift and go to state 219
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 149

    (61) relational_expression -> relational_expression GREATER . shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    shift_expression               shift and go to state 220
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 150

    (62) relational_expression -> relational_expression LESS_EQUALS . shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    shift_expression               shift and go to state 221
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 151

    (63) relational_expression -> relational_expression GREATER_EQUALS . shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    shift_expression               shift and go to state 222
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 152

    (57) shift_expression -> shift_expression LEFT_SHIFT . additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    additive_expression            shift and go to state 223
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 153

    (58) shift_expression -> shift_expression RIGHT_SHIFT . additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    additive_expression            shift and go to state 224
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 154

    (54) additive_expression -> additive_expression ADD . multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    multiplicative_expression      shift and go to state 225
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 155

    (55) additive_expression -> additive_expression SUBSTRACT . multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    multiplicative_expression      shift and go to state 226
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 156

    (50) multiplicative_expression -> multiplicative_expression MULTIPLY . cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    cast_expression                shift and go to state 227
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 157

    (51) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    cast_expression                shift and go to state 228
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 158

    (52) multiplicative_expression -> multiplicative_expression MODULUS . cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    cast_expression                shift and go to state 229
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 159

    (127) direct_declarator -> direct_declarator L_SQBR INT_CONSTANT . R_SQBR

    R_SQBR          shift and go to state 230


state 160

    (126) direct_declarator -> L_PAREN declarator R_PAREN .

    L_SQBR          reduce using rule 126 (direct_declarator -> L_PAREN declarator R_PAREN .)
    ASSIGNMENT      reduce using rule 126 (direct_declarator -> L_PAREN declarator R_PAREN .)
    L_PAREN         reduce using rule 126 (direct_declarator -> L_PAREN declarator R_PAREN .)
    SEMI_COLON      reduce using rule 126 (direct_declarator -> L_PAREN declarator R_PAREN .)
    COMMA           reduce using rule 126 (direct_declarator -> L_PAREN declarator R_PAREN .)
    R_PAREN         reduce using rule 126 (direct_declarator -> L_PAREN declarator R_PAREN .)


state 161

    (111) struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym . R_BRACES

    R_BRACES        shift and go to state 231


state 162

    (114) struct_declaration_list -> struct_declaration_list struct_declaration .

    VOID            reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    R_BRACES        reduce using rule 114 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 163

    (115) struct_declaration -> type_specifier struct_declarator_list . SEMI_COLON
    (117) struct_declarator_list -> struct_declarator_list . COMMA declarator

    SEMI_COLON      shift and go to state 232
    COMMA           shift and go to state 233


state 164

    (116) struct_declarator_list -> declarator .

    SEMI_COLON      reduce using rule 116 (struct_declarator_list -> declarator .)
    COMMA           reduce using rule 116 (struct_declarator_list -> declarator .)


state 165

    (122) enumerator -> IDENTIFIER ASSIGNMENT . constant_expression
    (94) constant_expression -> . conditional_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    constant_expression            shift and go to state 234
    conditional_expression         shift and go to state 235
    logical_or_expression          shift and go to state 54
    logical_and_expression         shift and go to state 62
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 166

    (118) enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .

    SEMI_COLON      reduce using rule 118 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)


state 167

    (120) enumerator_list -> enumerator_list COMMA . enumerator
    (121) enumerator -> . IDENTIFIER
    (122) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 96

    enumerator                     shift and go to state 236

state 168

    (6) function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body . pop_sym
    (172) pop_sym -> .

    VOID            reduce using rule 172 (pop_sym -> .)
    CHAR            reduce using rule 172 (pop_sym -> .)
    INT             reduce using rule 172 (pop_sym -> .)
    LONG            reduce using rule 172 (pop_sym -> .)
    FLOAT           reduce using rule 172 (pop_sym -> .)
    DOUBLE          reduce using rule 172 (pop_sym -> .)
    STRUCT          reduce using rule 172 (pop_sym -> .)
    ENUM            reduce using rule 172 (pop_sym -> .)
    BOOL            reduce using rule 172 (pop_sym -> .)
    $end            reduce using rule 172 (pop_sym -> .)

    pop_sym                        shift and go to state 237

state 169

    (8) function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON . pop_sym
    (172) pop_sym -> .

    VOID            reduce using rule 172 (pop_sym -> .)
    CHAR            reduce using rule 172 (pop_sym -> .)
    INT             reduce using rule 172 (pop_sym -> .)
    LONG            reduce using rule 172 (pop_sym -> .)
    FLOAT           reduce using rule 172 (pop_sym -> .)
    DOUBLE          reduce using rule 172 (pop_sym -> .)
    STRUCT          reduce using rule 172 (pop_sym -> .)
    ENUM            reduce using rule 172 (pop_sym -> .)
    BOOL            reduce using rule 172 (pop_sym -> .)
    $end            reduce using rule 172 (pop_sym -> .)

    pop_sym                        shift and go to state 238

state 170

    (132) parameter_type_list -> parameter_type_list COMMA parameter_declaration .

    R_PAREN         reduce using rule 132 (parameter_type_list -> parameter_type_list COMMA parameter_declaration .)
    COMMA           reduce using rule 132 (parameter_type_list -> parameter_type_list COMMA parameter_declaration .)


state 171

    (7) function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .

    VOID            reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    CHAR            reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    INT             reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    LONG            reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    FLOAT           reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    DOUBLE          reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    STRUCT          reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    ENUM            reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    BOOL            reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)
    $end            reduce using rule 7 (function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym .)


state 172

    (150) compound_statement -> L_BRACES . R_BRACES
    (151) compound_statement -> L_BRACES . add_sym block_item_list pop_sym R_BRACES
    (171) add_sym -> .

    R_BRACES        shift and go to state 239
    L_BRACES        reduce using rule 171 (add_sym -> .)
    SEMI_COLON      reduce using rule 171 (add_sym -> .)
    IF              reduce using rule 171 (add_sym -> .)
    SWITCH          reduce using rule 171 (add_sym -> .)
    WHILE           reduce using rule 171 (add_sym -> .)
    DO              reduce using rule 171 (add_sym -> .)
    FOR             reduce using rule 171 (add_sym -> .)
    CONTINUE        reduce using rule 171 (add_sym -> .)
    BREAK           reduce using rule 171 (add_sym -> .)
    RETURN          reduce using rule 171 (add_sym -> .)
    STRUCT          reduce using rule 171 (add_sym -> .)
    ENUM            reduce using rule 171 (add_sym -> .)
    VOID            reduce using rule 171 (add_sym -> .)
    CHAR            reduce using rule 171 (add_sym -> .)
    INT             reduce using rule 171 (add_sym -> .)
    LONG            reduce using rule 171 (add_sym -> .)
    FLOAT           reduce using rule 171 (add_sym -> .)
    DOUBLE          reduce using rule 171 (add_sym -> .)
    BOOL            reduce using rule 171 (add_sym -> .)
    INCREMENT       reduce using rule 171 (add_sym -> .)
    DECREMENT       reduce using rule 171 (add_sym -> .)
    SIZEOF          reduce using rule 171 (add_sym -> .)
    BITWISE_AND     reduce using rule 171 (add_sym -> .)
    MULTIPLY        reduce using rule 171 (add_sym -> .)
    ADD             reduce using rule 171 (add_sym -> .)
    SUBSTRACT       reduce using rule 171 (add_sym -> .)
    BITWISE_ONE_COMPLEMENT reduce using rule 171 (add_sym -> .)
    LOGICAL_NOT     reduce using rule 171 (add_sym -> .)
    IDENTIFIER      reduce using rule 171 (add_sym -> .)
    INT_CONSTANT    reduce using rule 171 (add_sym -> .)
    HEX_CONSTANT    reduce using rule 171 (add_sym -> .)
    OCTAL_CONSTANT  reduce using rule 171 (add_sym -> .)
    EXPONENT_CONSTANT reduce using rule 171 (add_sym -> .)
    REAL_CONSTANT   reduce using rule 171 (add_sym -> .)
    CHAR_CONSTANT   reduce using rule 171 (add_sym -> .)
    STR_CONSTANT    reduce using rule 171 (add_sym -> .)
    L_PAREN         reduce using rule 171 (add_sym -> .)
    TRUE            reduce using rule 171 (add_sym -> .)
    FALSE           reduce using rule 171 (add_sym -> .)
    NULL            reduce using rule 171 (add_sym -> .)

    add_sym                        shift and go to state 240

state 173

    (152) function_body -> L_BRACES R_BRACES .

    VOID            reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    CHAR            reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    INT             reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    LONG            reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    FLOAT           reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    DOUBLE          reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    STRUCT          reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    ENUM            reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    BOOL            reduce using rule 152 (function_body -> L_BRACES R_BRACES .)
    $end            reduce using rule 152 (function_body -> L_BRACES R_BRACES .)


state 174

    (153) function_body -> L_BRACES block_item_list . R_BRACES
    (155) block_item_list -> block_item_list . block_item
    (156) block_item -> . statement
    (157) block_item -> . declaration
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (95) declaration -> . struct_specifier SEMI_COLON
    (96) declaration -> . enum_specifier SEMI_COLON
    (97) declaration -> . type_specifier init_declarator_list SEMI_COLON
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (111) struct_specifier -> . STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
    (118) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACES        shift and go to state 241
    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    STRUCT          shift and go to state 194
    ENUM            shift and go to state 195
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 17
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    block_item                     shift and go to state 242
    statement                      shift and go to state 176
    declaration                    shift and go to state 177
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    struct_specifier               shift and go to state 7
    enum_specifier                 shift and go to state 8
    type_specifier                 shift and go to state 184
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 175

    (154) block_item_list -> block_item .

    R_BRACES        reduce using rule 154 (block_item_list -> block_item .)
    L_BRACES        reduce using rule 154 (block_item_list -> block_item .)
    SEMI_COLON      reduce using rule 154 (block_item_list -> block_item .)
    IF              reduce using rule 154 (block_item_list -> block_item .)
    SWITCH          reduce using rule 154 (block_item_list -> block_item .)
    WHILE           reduce using rule 154 (block_item_list -> block_item .)
    DO              reduce using rule 154 (block_item_list -> block_item .)
    FOR             reduce using rule 154 (block_item_list -> block_item .)
    CONTINUE        reduce using rule 154 (block_item_list -> block_item .)
    BREAK           reduce using rule 154 (block_item_list -> block_item .)
    RETURN          reduce using rule 154 (block_item_list -> block_item .)
    STRUCT          reduce using rule 154 (block_item_list -> block_item .)
    ENUM            reduce using rule 154 (block_item_list -> block_item .)
    VOID            reduce using rule 154 (block_item_list -> block_item .)
    CHAR            reduce using rule 154 (block_item_list -> block_item .)
    INT             reduce using rule 154 (block_item_list -> block_item .)
    LONG            reduce using rule 154 (block_item_list -> block_item .)
    FLOAT           reduce using rule 154 (block_item_list -> block_item .)
    DOUBLE          reduce using rule 154 (block_item_list -> block_item .)
    BOOL            reduce using rule 154 (block_item_list -> block_item .)
    INCREMENT       reduce using rule 154 (block_item_list -> block_item .)
    DECREMENT       reduce using rule 154 (block_item_list -> block_item .)
    SIZEOF          reduce using rule 154 (block_item_list -> block_item .)
    BITWISE_AND     reduce using rule 154 (block_item_list -> block_item .)
    MULTIPLY        reduce using rule 154 (block_item_list -> block_item .)
    ADD             reduce using rule 154 (block_item_list -> block_item .)
    SUBSTRACT       reduce using rule 154 (block_item_list -> block_item .)
    BITWISE_ONE_COMPLEMENT reduce using rule 154 (block_item_list -> block_item .)
    LOGICAL_NOT     reduce using rule 154 (block_item_list -> block_item .)
    IDENTIFIER      reduce using rule 154 (block_item_list -> block_item .)
    INT_CONSTANT    reduce using rule 154 (block_item_list -> block_item .)
    HEX_CONSTANT    reduce using rule 154 (block_item_list -> block_item .)
    OCTAL_CONSTANT  reduce using rule 154 (block_item_list -> block_item .)
    EXPONENT_CONSTANT reduce using rule 154 (block_item_list -> block_item .)
    REAL_CONSTANT   reduce using rule 154 (block_item_list -> block_item .)
    CHAR_CONSTANT   reduce using rule 154 (block_item_list -> block_item .)
    STR_CONSTANT    reduce using rule 154 (block_item_list -> block_item .)
    L_PAREN         reduce using rule 154 (block_item_list -> block_item .)
    TRUE            reduce using rule 154 (block_item_list -> block_item .)
    FALSE           reduce using rule 154 (block_item_list -> block_item .)
    NULL            reduce using rule 154 (block_item_list -> block_item .)


state 176

    (156) block_item -> statement .

    R_BRACES        reduce using rule 156 (block_item -> statement .)
    L_BRACES        reduce using rule 156 (block_item -> statement .)
    SEMI_COLON      reduce using rule 156 (block_item -> statement .)
    IF              reduce using rule 156 (block_item -> statement .)
    SWITCH          reduce using rule 156 (block_item -> statement .)
    WHILE           reduce using rule 156 (block_item -> statement .)
    DO              reduce using rule 156 (block_item -> statement .)
    FOR             reduce using rule 156 (block_item -> statement .)
    CONTINUE        reduce using rule 156 (block_item -> statement .)
    BREAK           reduce using rule 156 (block_item -> statement .)
    RETURN          reduce using rule 156 (block_item -> statement .)
    STRUCT          reduce using rule 156 (block_item -> statement .)
    ENUM            reduce using rule 156 (block_item -> statement .)
    VOID            reduce using rule 156 (block_item -> statement .)
    CHAR            reduce using rule 156 (block_item -> statement .)
    INT             reduce using rule 156 (block_item -> statement .)
    LONG            reduce using rule 156 (block_item -> statement .)
    FLOAT           reduce using rule 156 (block_item -> statement .)
    DOUBLE          reduce using rule 156 (block_item -> statement .)
    BOOL            reduce using rule 156 (block_item -> statement .)
    INCREMENT       reduce using rule 156 (block_item -> statement .)
    DECREMENT       reduce using rule 156 (block_item -> statement .)
    SIZEOF          reduce using rule 156 (block_item -> statement .)
    BITWISE_AND     reduce using rule 156 (block_item -> statement .)
    MULTIPLY        reduce using rule 156 (block_item -> statement .)
    ADD             reduce using rule 156 (block_item -> statement .)
    SUBSTRACT       reduce using rule 156 (block_item -> statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 156 (block_item -> statement .)
    LOGICAL_NOT     reduce using rule 156 (block_item -> statement .)
    IDENTIFIER      reduce using rule 156 (block_item -> statement .)
    INT_CONSTANT    reduce using rule 156 (block_item -> statement .)
    HEX_CONSTANT    reduce using rule 156 (block_item -> statement .)
    OCTAL_CONSTANT  reduce using rule 156 (block_item -> statement .)
    EXPONENT_CONSTANT reduce using rule 156 (block_item -> statement .)
    REAL_CONSTANT   reduce using rule 156 (block_item -> statement .)
    CHAR_CONSTANT   reduce using rule 156 (block_item -> statement .)
    STR_CONSTANT    reduce using rule 156 (block_item -> statement .)
    L_PAREN         reduce using rule 156 (block_item -> statement .)
    TRUE            reduce using rule 156 (block_item -> statement .)
    FALSE           reduce using rule 156 (block_item -> statement .)
    NULL            reduce using rule 156 (block_item -> statement .)


state 177

    (157) block_item -> declaration .

    R_BRACES        reduce using rule 157 (block_item -> declaration .)
    L_BRACES        reduce using rule 157 (block_item -> declaration .)
    SEMI_COLON      reduce using rule 157 (block_item -> declaration .)
    IF              reduce using rule 157 (block_item -> declaration .)
    SWITCH          reduce using rule 157 (block_item -> declaration .)
    WHILE           reduce using rule 157 (block_item -> declaration .)
    DO              reduce using rule 157 (block_item -> declaration .)
    FOR             reduce using rule 157 (block_item -> declaration .)
    CONTINUE        reduce using rule 157 (block_item -> declaration .)
    BREAK           reduce using rule 157 (block_item -> declaration .)
    RETURN          reduce using rule 157 (block_item -> declaration .)
    STRUCT          reduce using rule 157 (block_item -> declaration .)
    ENUM            reduce using rule 157 (block_item -> declaration .)
    VOID            reduce using rule 157 (block_item -> declaration .)
    CHAR            reduce using rule 157 (block_item -> declaration .)
    INT             reduce using rule 157 (block_item -> declaration .)
    LONG            reduce using rule 157 (block_item -> declaration .)
    FLOAT           reduce using rule 157 (block_item -> declaration .)
    DOUBLE          reduce using rule 157 (block_item -> declaration .)
    BOOL            reduce using rule 157 (block_item -> declaration .)
    INCREMENT       reduce using rule 157 (block_item -> declaration .)
    DECREMENT       reduce using rule 157 (block_item -> declaration .)
    SIZEOF          reduce using rule 157 (block_item -> declaration .)
    BITWISE_AND     reduce using rule 157 (block_item -> declaration .)
    MULTIPLY        reduce using rule 157 (block_item -> declaration .)
    ADD             reduce using rule 157 (block_item -> declaration .)
    SUBSTRACT       reduce using rule 157 (block_item -> declaration .)
    BITWISE_ONE_COMPLEMENT reduce using rule 157 (block_item -> declaration .)
    LOGICAL_NOT     reduce using rule 157 (block_item -> declaration .)
    IDENTIFIER      reduce using rule 157 (block_item -> declaration .)
    INT_CONSTANT    reduce using rule 157 (block_item -> declaration .)
    HEX_CONSTANT    reduce using rule 157 (block_item -> declaration .)
    OCTAL_CONSTANT  reduce using rule 157 (block_item -> declaration .)
    EXPONENT_CONSTANT reduce using rule 157 (block_item -> declaration .)
    REAL_CONSTANT   reduce using rule 157 (block_item -> declaration .)
    CHAR_CONSTANT   reduce using rule 157 (block_item -> declaration .)
    STR_CONSTANT    reduce using rule 157 (block_item -> declaration .)
    L_PAREN         reduce using rule 157 (block_item -> declaration .)
    TRUE            reduce using rule 157 (block_item -> declaration .)
    FALSE           reduce using rule 157 (block_item -> declaration .)
    NULL            reduce using rule 157 (block_item -> declaration .)


state 178

    (141) statement -> compound_statement .

    R_BRACES        reduce using rule 141 (statement -> compound_statement .)
    L_BRACES        reduce using rule 141 (statement -> compound_statement .)
    SEMI_COLON      reduce using rule 141 (statement -> compound_statement .)
    IF              reduce using rule 141 (statement -> compound_statement .)
    SWITCH          reduce using rule 141 (statement -> compound_statement .)
    WHILE           reduce using rule 141 (statement -> compound_statement .)
    DO              reduce using rule 141 (statement -> compound_statement .)
    FOR             reduce using rule 141 (statement -> compound_statement .)
    CONTINUE        reduce using rule 141 (statement -> compound_statement .)
    BREAK           reduce using rule 141 (statement -> compound_statement .)
    RETURN          reduce using rule 141 (statement -> compound_statement .)
    STRUCT          reduce using rule 141 (statement -> compound_statement .)
    ENUM            reduce using rule 141 (statement -> compound_statement .)
    VOID            reduce using rule 141 (statement -> compound_statement .)
    CHAR            reduce using rule 141 (statement -> compound_statement .)
    INT             reduce using rule 141 (statement -> compound_statement .)
    LONG            reduce using rule 141 (statement -> compound_statement .)
    FLOAT           reduce using rule 141 (statement -> compound_statement .)
    DOUBLE          reduce using rule 141 (statement -> compound_statement .)
    BOOL            reduce using rule 141 (statement -> compound_statement .)
    INCREMENT       reduce using rule 141 (statement -> compound_statement .)
    DECREMENT       reduce using rule 141 (statement -> compound_statement .)
    SIZEOF          reduce using rule 141 (statement -> compound_statement .)
    BITWISE_AND     reduce using rule 141 (statement -> compound_statement .)
    MULTIPLY        reduce using rule 141 (statement -> compound_statement .)
    ADD             reduce using rule 141 (statement -> compound_statement .)
    SUBSTRACT       reduce using rule 141 (statement -> compound_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 141 (statement -> compound_statement .)
    LOGICAL_NOT     reduce using rule 141 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 141 (statement -> compound_statement .)
    INT_CONSTANT    reduce using rule 141 (statement -> compound_statement .)
    HEX_CONSTANT    reduce using rule 141 (statement -> compound_statement .)
    OCTAL_CONSTANT  reduce using rule 141 (statement -> compound_statement .)
    EXPONENT_CONSTANT reduce using rule 141 (statement -> compound_statement .)
    REAL_CONSTANT   reduce using rule 141 (statement -> compound_statement .)
    CHAR_CONSTANT   reduce using rule 141 (statement -> compound_statement .)
    STR_CONSTANT    reduce using rule 141 (statement -> compound_statement .)
    L_PAREN         reduce using rule 141 (statement -> compound_statement .)
    TRUE            reduce using rule 141 (statement -> compound_statement .)
    FALSE           reduce using rule 141 (statement -> compound_statement .)
    NULL            reduce using rule 141 (statement -> compound_statement .)
    ELSE            reduce using rule 141 (statement -> compound_statement .)
    CASE            reduce using rule 141 (statement -> compound_statement .)
    DEFAULT         reduce using rule 141 (statement -> compound_statement .)


state 179

    (142) statement -> expression_statement .

    R_BRACES        reduce using rule 142 (statement -> expression_statement .)
    L_BRACES        reduce using rule 142 (statement -> expression_statement .)
    SEMI_COLON      reduce using rule 142 (statement -> expression_statement .)
    IF              reduce using rule 142 (statement -> expression_statement .)
    SWITCH          reduce using rule 142 (statement -> expression_statement .)
    WHILE           reduce using rule 142 (statement -> expression_statement .)
    DO              reduce using rule 142 (statement -> expression_statement .)
    FOR             reduce using rule 142 (statement -> expression_statement .)
    CONTINUE        reduce using rule 142 (statement -> expression_statement .)
    BREAK           reduce using rule 142 (statement -> expression_statement .)
    RETURN          reduce using rule 142 (statement -> expression_statement .)
    STRUCT          reduce using rule 142 (statement -> expression_statement .)
    ENUM            reduce using rule 142 (statement -> expression_statement .)
    VOID            reduce using rule 142 (statement -> expression_statement .)
    CHAR            reduce using rule 142 (statement -> expression_statement .)
    INT             reduce using rule 142 (statement -> expression_statement .)
    LONG            reduce using rule 142 (statement -> expression_statement .)
    FLOAT           reduce using rule 142 (statement -> expression_statement .)
    DOUBLE          reduce using rule 142 (statement -> expression_statement .)
    BOOL            reduce using rule 142 (statement -> expression_statement .)
    INCREMENT       reduce using rule 142 (statement -> expression_statement .)
    DECREMENT       reduce using rule 142 (statement -> expression_statement .)
    SIZEOF          reduce using rule 142 (statement -> expression_statement .)
    BITWISE_AND     reduce using rule 142 (statement -> expression_statement .)
    MULTIPLY        reduce using rule 142 (statement -> expression_statement .)
    ADD             reduce using rule 142 (statement -> expression_statement .)
    SUBSTRACT       reduce using rule 142 (statement -> expression_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 142 (statement -> expression_statement .)
    LOGICAL_NOT     reduce using rule 142 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 142 (statement -> expression_statement .)
    INT_CONSTANT    reduce using rule 142 (statement -> expression_statement .)
    HEX_CONSTANT    reduce using rule 142 (statement -> expression_statement .)
    OCTAL_CONSTANT  reduce using rule 142 (statement -> expression_statement .)
    EXPONENT_CONSTANT reduce using rule 142 (statement -> expression_statement .)
    REAL_CONSTANT   reduce using rule 142 (statement -> expression_statement .)
    CHAR_CONSTANT   reduce using rule 142 (statement -> expression_statement .)
    STR_CONSTANT    reduce using rule 142 (statement -> expression_statement .)
    L_PAREN         reduce using rule 142 (statement -> expression_statement .)
    TRUE            reduce using rule 142 (statement -> expression_statement .)
    FALSE           reduce using rule 142 (statement -> expression_statement .)
    NULL            reduce using rule 142 (statement -> expression_statement .)
    ELSE            reduce using rule 142 (statement -> expression_statement .)
    CASE            reduce using rule 142 (statement -> expression_statement .)
    DEFAULT         reduce using rule 142 (statement -> expression_statement .)


state 180

    (143) statement -> selection_statement .

    R_BRACES        reduce using rule 143 (statement -> selection_statement .)
    L_BRACES        reduce using rule 143 (statement -> selection_statement .)
    SEMI_COLON      reduce using rule 143 (statement -> selection_statement .)
    IF              reduce using rule 143 (statement -> selection_statement .)
    SWITCH          reduce using rule 143 (statement -> selection_statement .)
    WHILE           reduce using rule 143 (statement -> selection_statement .)
    DO              reduce using rule 143 (statement -> selection_statement .)
    FOR             reduce using rule 143 (statement -> selection_statement .)
    CONTINUE        reduce using rule 143 (statement -> selection_statement .)
    BREAK           reduce using rule 143 (statement -> selection_statement .)
    RETURN          reduce using rule 143 (statement -> selection_statement .)
    STRUCT          reduce using rule 143 (statement -> selection_statement .)
    ENUM            reduce using rule 143 (statement -> selection_statement .)
    VOID            reduce using rule 143 (statement -> selection_statement .)
    CHAR            reduce using rule 143 (statement -> selection_statement .)
    INT             reduce using rule 143 (statement -> selection_statement .)
    LONG            reduce using rule 143 (statement -> selection_statement .)
    FLOAT           reduce using rule 143 (statement -> selection_statement .)
    DOUBLE          reduce using rule 143 (statement -> selection_statement .)
    BOOL            reduce using rule 143 (statement -> selection_statement .)
    INCREMENT       reduce using rule 143 (statement -> selection_statement .)
    DECREMENT       reduce using rule 143 (statement -> selection_statement .)
    SIZEOF          reduce using rule 143 (statement -> selection_statement .)
    BITWISE_AND     reduce using rule 143 (statement -> selection_statement .)
    MULTIPLY        reduce using rule 143 (statement -> selection_statement .)
    ADD             reduce using rule 143 (statement -> selection_statement .)
    SUBSTRACT       reduce using rule 143 (statement -> selection_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 143 (statement -> selection_statement .)
    LOGICAL_NOT     reduce using rule 143 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 143 (statement -> selection_statement .)
    INT_CONSTANT    reduce using rule 143 (statement -> selection_statement .)
    HEX_CONSTANT    reduce using rule 143 (statement -> selection_statement .)
    OCTAL_CONSTANT  reduce using rule 143 (statement -> selection_statement .)
    EXPONENT_CONSTANT reduce using rule 143 (statement -> selection_statement .)
    REAL_CONSTANT   reduce using rule 143 (statement -> selection_statement .)
    CHAR_CONSTANT   reduce using rule 143 (statement -> selection_statement .)
    STR_CONSTANT    reduce using rule 143 (statement -> selection_statement .)
    L_PAREN         reduce using rule 143 (statement -> selection_statement .)
    TRUE            reduce using rule 143 (statement -> selection_statement .)
    FALSE           reduce using rule 143 (statement -> selection_statement .)
    NULL            reduce using rule 143 (statement -> selection_statement .)
    ELSE            reduce using rule 143 (statement -> selection_statement .)
    CASE            reduce using rule 143 (statement -> selection_statement .)
    DEFAULT         reduce using rule 143 (statement -> selection_statement .)


state 181

    (144) statement -> iteration_statement .

    R_BRACES        reduce using rule 144 (statement -> iteration_statement .)
    L_BRACES        reduce using rule 144 (statement -> iteration_statement .)
    SEMI_COLON      reduce using rule 144 (statement -> iteration_statement .)
    IF              reduce using rule 144 (statement -> iteration_statement .)
    SWITCH          reduce using rule 144 (statement -> iteration_statement .)
    WHILE           reduce using rule 144 (statement -> iteration_statement .)
    DO              reduce using rule 144 (statement -> iteration_statement .)
    FOR             reduce using rule 144 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 144 (statement -> iteration_statement .)
    BREAK           reduce using rule 144 (statement -> iteration_statement .)
    RETURN          reduce using rule 144 (statement -> iteration_statement .)
    STRUCT          reduce using rule 144 (statement -> iteration_statement .)
    ENUM            reduce using rule 144 (statement -> iteration_statement .)
    VOID            reduce using rule 144 (statement -> iteration_statement .)
    CHAR            reduce using rule 144 (statement -> iteration_statement .)
    INT             reduce using rule 144 (statement -> iteration_statement .)
    LONG            reduce using rule 144 (statement -> iteration_statement .)
    FLOAT           reduce using rule 144 (statement -> iteration_statement .)
    DOUBLE          reduce using rule 144 (statement -> iteration_statement .)
    BOOL            reduce using rule 144 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 144 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 144 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 144 (statement -> iteration_statement .)
    BITWISE_AND     reduce using rule 144 (statement -> iteration_statement .)
    MULTIPLY        reduce using rule 144 (statement -> iteration_statement .)
    ADD             reduce using rule 144 (statement -> iteration_statement .)
    SUBSTRACT       reduce using rule 144 (statement -> iteration_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 144 (statement -> iteration_statement .)
    LOGICAL_NOT     reduce using rule 144 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 144 (statement -> iteration_statement .)
    INT_CONSTANT    reduce using rule 144 (statement -> iteration_statement .)
    HEX_CONSTANT    reduce using rule 144 (statement -> iteration_statement .)
    OCTAL_CONSTANT  reduce using rule 144 (statement -> iteration_statement .)
    EXPONENT_CONSTANT reduce using rule 144 (statement -> iteration_statement .)
    REAL_CONSTANT   reduce using rule 144 (statement -> iteration_statement .)
    CHAR_CONSTANT   reduce using rule 144 (statement -> iteration_statement .)
    STR_CONSTANT    reduce using rule 144 (statement -> iteration_statement .)
    L_PAREN         reduce using rule 144 (statement -> iteration_statement .)
    TRUE            reduce using rule 144 (statement -> iteration_statement .)
    FALSE           reduce using rule 144 (statement -> iteration_statement .)
    NULL            reduce using rule 144 (statement -> iteration_statement .)
    ELSE            reduce using rule 144 (statement -> iteration_statement .)
    CASE            reduce using rule 144 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 144 (statement -> iteration_statement .)


state 182

    (145) statement -> jump_statement .

    R_BRACES        reduce using rule 145 (statement -> jump_statement .)
    L_BRACES        reduce using rule 145 (statement -> jump_statement .)
    SEMI_COLON      reduce using rule 145 (statement -> jump_statement .)
    IF              reduce using rule 145 (statement -> jump_statement .)
    SWITCH          reduce using rule 145 (statement -> jump_statement .)
    WHILE           reduce using rule 145 (statement -> jump_statement .)
    DO              reduce using rule 145 (statement -> jump_statement .)
    FOR             reduce using rule 145 (statement -> jump_statement .)
    CONTINUE        reduce using rule 145 (statement -> jump_statement .)
    BREAK           reduce using rule 145 (statement -> jump_statement .)
    RETURN          reduce using rule 145 (statement -> jump_statement .)
    STRUCT          reduce using rule 145 (statement -> jump_statement .)
    ENUM            reduce using rule 145 (statement -> jump_statement .)
    VOID            reduce using rule 145 (statement -> jump_statement .)
    CHAR            reduce using rule 145 (statement -> jump_statement .)
    INT             reduce using rule 145 (statement -> jump_statement .)
    LONG            reduce using rule 145 (statement -> jump_statement .)
    FLOAT           reduce using rule 145 (statement -> jump_statement .)
    DOUBLE          reduce using rule 145 (statement -> jump_statement .)
    BOOL            reduce using rule 145 (statement -> jump_statement .)
    INCREMENT       reduce using rule 145 (statement -> jump_statement .)
    DECREMENT       reduce using rule 145 (statement -> jump_statement .)
    SIZEOF          reduce using rule 145 (statement -> jump_statement .)
    BITWISE_AND     reduce using rule 145 (statement -> jump_statement .)
    MULTIPLY        reduce using rule 145 (statement -> jump_statement .)
    ADD             reduce using rule 145 (statement -> jump_statement .)
    SUBSTRACT       reduce using rule 145 (statement -> jump_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 145 (statement -> jump_statement .)
    LOGICAL_NOT     reduce using rule 145 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 145 (statement -> jump_statement .)
    INT_CONSTANT    reduce using rule 145 (statement -> jump_statement .)
    HEX_CONSTANT    reduce using rule 145 (statement -> jump_statement .)
    OCTAL_CONSTANT  reduce using rule 145 (statement -> jump_statement .)
    EXPONENT_CONSTANT reduce using rule 145 (statement -> jump_statement .)
    REAL_CONSTANT   reduce using rule 145 (statement -> jump_statement .)
    CHAR_CONSTANT   reduce using rule 145 (statement -> jump_statement .)
    STR_CONSTANT    reduce using rule 145 (statement -> jump_statement .)
    L_PAREN         reduce using rule 145 (statement -> jump_statement .)
    TRUE            reduce using rule 145 (statement -> jump_statement .)
    FALSE           reduce using rule 145 (statement -> jump_statement .)
    NULL            reduce using rule 145 (statement -> jump_statement .)
    ELSE            reduce using rule 145 (statement -> jump_statement .)
    CASE            reduce using rule 145 (statement -> jump_statement .)
    DEFAULT         reduce using rule 145 (statement -> jump_statement .)


state 183

    (158) expression_statement -> SEMI_COLON .

    R_BRACES        reduce using rule 158 (expression_statement -> SEMI_COLON .)
    L_BRACES        reduce using rule 158 (expression_statement -> SEMI_COLON .)
    SEMI_COLON      reduce using rule 158 (expression_statement -> SEMI_COLON .)
    IF              reduce using rule 158 (expression_statement -> SEMI_COLON .)
    SWITCH          reduce using rule 158 (expression_statement -> SEMI_COLON .)
    WHILE           reduce using rule 158 (expression_statement -> SEMI_COLON .)
    DO              reduce using rule 158 (expression_statement -> SEMI_COLON .)
    FOR             reduce using rule 158 (expression_statement -> SEMI_COLON .)
    CONTINUE        reduce using rule 158 (expression_statement -> SEMI_COLON .)
    BREAK           reduce using rule 158 (expression_statement -> SEMI_COLON .)
    RETURN          reduce using rule 158 (expression_statement -> SEMI_COLON .)
    STRUCT          reduce using rule 158 (expression_statement -> SEMI_COLON .)
    ENUM            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    VOID            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    CHAR            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    INT             reduce using rule 158 (expression_statement -> SEMI_COLON .)
    LONG            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    FLOAT           reduce using rule 158 (expression_statement -> SEMI_COLON .)
    DOUBLE          reduce using rule 158 (expression_statement -> SEMI_COLON .)
    BOOL            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    INCREMENT       reduce using rule 158 (expression_statement -> SEMI_COLON .)
    DECREMENT       reduce using rule 158 (expression_statement -> SEMI_COLON .)
    SIZEOF          reduce using rule 158 (expression_statement -> SEMI_COLON .)
    BITWISE_AND     reduce using rule 158 (expression_statement -> SEMI_COLON .)
    MULTIPLY        reduce using rule 158 (expression_statement -> SEMI_COLON .)
    ADD             reduce using rule 158 (expression_statement -> SEMI_COLON .)
    SUBSTRACT       reduce using rule 158 (expression_statement -> SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 158 (expression_statement -> SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 158 (expression_statement -> SEMI_COLON .)
    IDENTIFIER      reduce using rule 158 (expression_statement -> SEMI_COLON .)
    INT_CONSTANT    reduce using rule 158 (expression_statement -> SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 158 (expression_statement -> SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 158 (expression_statement -> SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 158 (expression_statement -> SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 158 (expression_statement -> SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 158 (expression_statement -> SEMI_COLON .)
    STR_CONSTANT    reduce using rule 158 (expression_statement -> SEMI_COLON .)
    L_PAREN         reduce using rule 158 (expression_statement -> SEMI_COLON .)
    TRUE            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    FALSE           reduce using rule 158 (expression_statement -> SEMI_COLON .)
    NULL            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    R_PAREN         reduce using rule 158 (expression_statement -> SEMI_COLON .)
    ELSE            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    CASE            reduce using rule 158 (expression_statement -> SEMI_COLON .)
    DEFAULT         reduce using rule 158 (expression_statement -> SEMI_COLON .)


state 184

    (97) declaration -> type_specifier . init_declarator_list SEMI_COLON
    (98) init_declarator_list -> . init_declarator
    (99) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (100) init_declarator -> . declarator
    (101) init_declarator -> . declarator ASSIGNMENT initializer
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . no_pointer direct_declarator
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY
    (130) no_pointer -> .

    MULTIPLY        shift and go to state 24
    IDENTIFIER      reduce using rule 130 (no_pointer -> .)
    L_PAREN         reduce using rule 130 (no_pointer -> .)

    init_declarator_list           shift and go to state 20
    init_declarator                shift and go to state 23
    declarator                     shift and go to state 90
    pointer                        shift and go to state 21
    no_pointer                     shift and go to state 22

state 185

    (159) expression_statement -> expression . SEMI_COLON
    (93) expression -> expression . COMMA assignment_expression

    SEMI_COLON      shift and go to state 243
    COMMA           shift and go to state 210


state 186

    (160) selection_statement -> IF . L_PAREN expression R_PAREN statement
    (161) selection_statement -> IF . L_PAREN expression R_PAREN statement ELSE statement

    L_PAREN         shift and go to state 244


state 187

    (162) selection_statement -> SWITCH . L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES

    L_PAREN         shift and go to state 245


state 188

    (163) iteration_statement -> WHILE . L_PAREN expression R_PAREN statement

    L_PAREN         shift and go to state 246


state 189

    (164) iteration_statement -> DO . statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    statement                      shift and go to state 247
    expression                     shift and go to state 185
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 190

    (165) iteration_statement -> FOR . L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> FOR . L_PAREN expression_statement expression_statement expression R_PAREN statement

    L_PAREN         shift and go to state 248


state 191

    (167) jump_statement -> CONTINUE . SEMI_COLON

    SEMI_COLON      shift and go to state 249


state 192

    (168) jump_statement -> BREAK . SEMI_COLON

    SEMI_COLON      shift and go to state 250


state 193

    (169) jump_statement -> RETURN . SEMI_COLON
    (170) jump_statement -> RETURN . expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI_COLON      shift and go to state 251
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 252
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 194

    (111) struct_specifier -> STRUCT . IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
    (108) type_specifier -> STRUCT . IDENTIFIER

    IDENTIFIER      shift and go to state 253


state 195

    (118) enum_specifier -> ENUM . IDENTIFIER L_BRACES enumerator_list R_BRACES
    (109) type_specifier -> ENUM . IDENTIFIER

    IDENTIFIER      shift and go to state 254


state 196

    (9) function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .

    VOID            reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    CHAR            reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    INT             reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    LONG            reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    FLOAT           reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    DOUBLE          reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    STRUCT          reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    ENUM            reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    BOOL            reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)
    $end            reduce using rule 9 (function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym .)


state 197

    (137) initializer -> L_BRACES initializer_list R_BRACES .

    SEMI_COLON      reduce using rule 137 (initializer -> L_BRACES initializer_list R_BRACES .)
    COMMA           reduce using rule 137 (initializer -> L_BRACES initializer_list R_BRACES .)
    R_BRACES        reduce using rule 137 (initializer -> L_BRACES initializer_list R_BRACES .)


state 198

    (138) initializer -> L_BRACES initializer_list COMMA . R_BRACES
    (140) initializer_list -> initializer_list COMMA . initializer
    (136) initializer -> . assignment_expression
    (137) initializer -> . L_BRACES initializer_list R_BRACES
    (138) initializer -> . L_BRACES initializer_list COMMA R_BRACES
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACES        shift and go to state 255
    L_BRACES        shift and go to state 51
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    initializer                    shift and go to state 256
    assignment_expression          shift and go to state 50
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 199

    (80) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI_COLON      reduce using rule 80 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 80 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_BRACES        reduce using rule 80 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_PAREN         reduce using rule 80 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 80 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_SQBR          reduce using rule 80 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 200

    (78) conditional_expression -> logical_or_expression QUES_MARK expression . COLON conditional_expression
    (93) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 257
    COMMA           shift and go to state 210


state 201

    (76) logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .
    (74) logical_and_expression -> logical_and_expression . LOGICAL_AND inclusive_or_expression

    QUES_MARK       reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LOGICAL_OR      reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    SEMI_COLON      reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    COMMA           reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    R_BRACES        reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    R_PAREN         reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    COLON           reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    R_SQBR          reduce using rule 76 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LOGICAL_AND     shift and go to state 142


state 202

    (28) postfix_expression -> postfix_expression L_SQBR expression . R_SQBR
    (93) expression -> expression . COMMA assignment_expression

    R_SQBR          shift and go to state 258
    COMMA           shift and go to state 210


state 203

    (29) postfix_expression -> postfix_expression L_PAREN R_PAREN .

    INCREMENT       reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DECREMENT       reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    L_SQBR          reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DOT             reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ARROW           reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ASSIGNMENT      reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MULTIPLY        reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MODULUS         reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ADD             reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    SUBSTRACT       reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LEFT_SHIFT      reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    RIGHT_SHIFT     reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LESS            reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    GREATER         reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LESS_EQUALS     reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    GREATER_EQUALS  reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    EQUALS          reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    NOT_EQUALS      reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_AND     reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_XOR     reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_OR      reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LOGICAL_AND     reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    QUES_MARK       reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LOGICAL_OR      reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    SEMI_COLON      reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    COMMA           reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    R_BRACES        reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    COLON           reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    R_SQBR          reduce using rule 29 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)


state 204

    (30) postfix_expression -> postfix_expression L_PAREN argument_expression_list . R_PAREN
    (34) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    R_PAREN         shift and go to state 259
    COMMA           shift and go to state 260


state 205

    (33) argument_expression_list -> assignment_expression .

    R_PAREN         reduce using rule 33 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 33 (argument_expression_list -> assignment_expression .)


state 206

    (31) postfix_expression -> postfix_expression DOT IDENTIFIER .

    INCREMENT       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DECREMENT       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    L_SQBR          reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    L_PAREN         reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ARROW           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASSIGNMENT      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGNMENT  reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUBSTRACT_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_AND_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_OR_ASSIGNMENT reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS         reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD             reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUBSTRACT       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS            reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER         reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS          reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUES_MARK       reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMI_COLON      reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_BRACES        reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_PAREN         reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_SQBR          reduce using rule 31 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 207

    (32) postfix_expression -> postfix_expression ARROW IDENTIFIER .

    INCREMENT       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    L_SQBR          reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    L_PAREN         reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DOT             reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ARROW           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ASSIGNMENT      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MULTIPLY_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ADD_ASSIGNMENT  reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SUBSTRACT_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_AND_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_OR_ASSIGNMENT reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MULTIPLY        reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS         reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ADD             reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SUBSTRACT       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS            reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER         reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_EQUALS     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS          reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_AND     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_XOR     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_OR      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LOGICAL_AND     reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    QUES_MARK       reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LOGICAL_OR      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SEMI_COLON      reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COMMA           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    R_BRACES        reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    R_PAREN         reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COLON           reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    R_SQBR          reduce using rule 32 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)


state 208

    (40) unary_expression -> SIZEOF L_PAREN type_name . R_PAREN

    R_PAREN         shift and go to state 261


state 209

    (21) primary_expression -> L_PAREN expression R_PAREN .

    INCREMENT       reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    DECREMENT       reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    L_SQBR          reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    L_PAREN         reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    DOT             reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    ARROW           reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    ASSIGNMENT      reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    MULTIPLY        reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    DIVIDE          reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    MODULUS         reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    ADD             reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    SUBSTRACT       reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    LEFT_SHIFT      reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    RIGHT_SHIFT     reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    LESS_EQUALS     reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    GREATER_EQUALS  reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    EQUALS          reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    NOT_EQUALS      reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_AND     reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_XOR     reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_OR      reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    LOGICAL_AND     reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    QUES_MARK       reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    LOGICAL_OR      reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    SEMI_COLON      reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    R_BRACES        reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    COLON           reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)
    R_SQBR          reduce using rule 21 (primary_expression -> L_PAREN expression R_PAREN .)


state 210

    (93) expression -> expression COMMA . assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    assignment_expression          shift and go to state 262
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 211

    (48) cast_expression -> L_PAREN type_name R_PAREN . cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    cast_expression                shift and go to state 263
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 212

    (135) type_name -> type_specifier pointer .
    (129) pointer -> pointer . MULTIPLY

    R_PAREN         reduce using rule 135 (type_name -> type_specifier pointer .)
    MULTIPLY        shift and go to state 35


state 213

    (74) logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .
    (72) inclusive_or_expression -> inclusive_or_expression . BITWISE_OR exclusive_or_expression

    LOGICAL_AND     reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    QUES_MARK       reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    LOGICAL_OR      reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    SEMI_COLON      reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    COMMA           reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    R_BRACES        reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    R_PAREN         reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    COLON           reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    R_SQBR          reduce using rule 74 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    BITWISE_OR      shift and go to state 143


state 214

    (72) inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .
    (70) exclusive_or_expression -> exclusive_or_expression . BITWISE_XOR and_expression

    BITWISE_OR      reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    LOGICAL_AND     reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    QUES_MARK       reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    LOGICAL_OR      reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    SEMI_COLON      reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    COMMA           reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    R_BRACES        reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    R_PAREN         reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    COLON           reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    R_SQBR          reduce using rule 72 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    BITWISE_XOR     shift and go to state 144


state 215

    (70) exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .
    (68) and_expression -> and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    BITWISE_OR      reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    LOGICAL_AND     reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    QUES_MARK       reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    LOGICAL_OR      reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    SEMI_COLON      reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    COMMA           reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    R_BRACES        reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    R_PAREN         reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    COLON           reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    R_SQBR          reduce using rule 70 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    BITWISE_AND     shift and go to state 145


state 216

    (68) and_expression -> and_expression BITWISE_AND equality_expression .
    (65) equality_expression -> equality_expression . EQUALS relational_expression
    (66) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    BITWISE_AND     reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    BITWISE_XOR     reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    BITWISE_OR      reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    LOGICAL_AND     reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    QUES_MARK       reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    LOGICAL_OR      reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    SEMI_COLON      reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    COMMA           reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    R_BRACES        reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    R_PAREN         reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    COLON           reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    R_SQBR          reduce using rule 68 (and_expression -> and_expression BITWISE_AND equality_expression .)
    EQUALS          shift and go to state 146
    NOT_EQUALS      shift and go to state 147


state 217

    (65) equality_expression -> equality_expression EQUALS relational_expression .
    (60) relational_expression -> relational_expression . LESS shift_expression
    (61) relational_expression -> relational_expression . GREATER shift_expression
    (62) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (63) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

    EQUALS          reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_AND     reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_XOR     reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_OR      reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    LOGICAL_AND     reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    QUES_MARK       reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    LOGICAL_OR      reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    SEMI_COLON      reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    COMMA           reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    R_BRACES        reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    R_PAREN         reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    COLON           reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    R_SQBR          reduce using rule 65 (equality_expression -> equality_expression EQUALS relational_expression .)
    LESS            shift and go to state 148
    GREATER         shift and go to state 149
    LESS_EQUALS     shift and go to state 150
    GREATER_EQUALS  shift and go to state 151


state 218

    (66) equality_expression -> equality_expression NOT_EQUALS relational_expression .
    (60) relational_expression -> relational_expression . LESS shift_expression
    (61) relational_expression -> relational_expression . GREATER shift_expression
    (62) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (63) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

    EQUALS          reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_AND     reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_XOR     reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_OR      reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LOGICAL_AND     reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    QUES_MARK       reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LOGICAL_OR      reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    SEMI_COLON      reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COMMA           reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    R_BRACES        reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    R_PAREN         reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COLON           reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    R_SQBR          reduce using rule 66 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LESS            shift and go to state 148
    GREATER         shift and go to state 149
    LESS_EQUALS     shift and go to state 150
    GREATER_EQUALS  shift and go to state 151


state 219

    (60) relational_expression -> relational_expression LESS shift_expression .
    (57) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (58) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    LESS_EQUALS     reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER_EQUALS  reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    EQUALS          reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    NOT_EQUALS      reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_AND     reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_XOR     reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_OR      reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    LOGICAL_AND     reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    QUES_MARK       reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    LOGICAL_OR      reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    SEMI_COLON      reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    R_BRACES        reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    R_PAREN         reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    R_SQBR          reduce using rule 60 (relational_expression -> relational_expression LESS shift_expression .)
    LEFT_SHIFT      shift and go to state 152
    RIGHT_SHIFT     shift and go to state 153


state 220

    (61) relational_expression -> relational_expression GREATER shift_expression .
    (57) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (58) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS_EQUALS     reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER_EQUALS  reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUALS          reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    NOT_EQUALS      reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_AND     reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_XOR     reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_OR      reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    LOGICAL_AND     reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    QUES_MARK       reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    LOGICAL_OR      reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    SEMI_COLON      reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    R_BRACES        reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    R_PAREN         reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    R_SQBR          reduce using rule 61 (relational_expression -> relational_expression GREATER shift_expression .)
    LEFT_SHIFT      shift and go to state 152
    RIGHT_SHIFT     shift and go to state 153


state 221

    (62) relational_expression -> relational_expression LESS_EQUALS shift_expression .
    (57) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (58) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    GREATER         reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LESS_EQUALS     reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    GREATER_EQUALS  reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    EQUALS          reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_AND     reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_XOR     reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_OR      reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LOGICAL_AND     reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    QUES_MARK       reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LOGICAL_OR      reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    SEMI_COLON      reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    COMMA           reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    R_BRACES        reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    R_PAREN         reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    COLON           reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    R_SQBR          reduce using rule 62 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 152
    RIGHT_SHIFT     shift and go to state 153


state 222

    (63) relational_expression -> relational_expression GREATER_EQUALS shift_expression .
    (57) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (58) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    GREATER         reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LESS_EQUALS     reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    GREATER_EQUALS  reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    EQUALS          reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_AND     reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_XOR     reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_OR      reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LOGICAL_AND     reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    QUES_MARK       reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LOGICAL_OR      reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    SEMI_COLON      reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    COMMA           reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    R_BRACES        reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    R_PAREN         reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    COLON           reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    R_SQBR          reduce using rule 63 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 152
    RIGHT_SHIFT     shift and go to state 153


state 223

    (57) shift_expression -> shift_expression LEFT_SHIFT additive_expression .
    (54) additive_expression -> additive_expression . ADD multiplicative_expression
    (55) additive_expression -> additive_expression . SUBSTRACT multiplicative_expression

    LEFT_SHIFT      reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS            reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER         reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS_EQUALS     reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER_EQUALS  reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    EQUALS          reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    BITWISE_AND     reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    BITWISE_XOR     reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    BITWISE_OR      reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LOGICAL_AND     reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    QUES_MARK       reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LOGICAL_OR      reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    SEMI_COLON      reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COMMA           reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    R_BRACES        reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    R_PAREN         reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COLON           reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    R_SQBR          reduce using rule 57 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    ADD             shift and go to state 154
    SUBSTRACT       shift and go to state 155


state 224

    (58) shift_expression -> shift_expression RIGHT_SHIFT additive_expression .
    (54) additive_expression -> additive_expression . ADD multiplicative_expression
    (55) additive_expression -> additive_expression . SUBSTRACT multiplicative_expression

    LEFT_SHIFT      reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS            reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER         reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS_EQUALS     reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER_EQUALS  reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    EQUALS          reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    BITWISE_AND     reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    BITWISE_XOR     reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    BITWISE_OR      reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LOGICAL_AND     reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    QUES_MARK       reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LOGICAL_OR      reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    SEMI_COLON      reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COMMA           reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    R_BRACES        reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    R_PAREN         reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COLON           reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    R_SQBR          reduce using rule 58 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    ADD             shift and go to state 154
    SUBSTRACT       shift and go to state 155


state 225

    (54) additive_expression -> additive_expression ADD multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (52) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    ADD             reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SUBSTRACT       reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LESS            reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GREATER         reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LESS_EQUALS     reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    EQUALS          reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    NOT_EQUALS      reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITWISE_AND     reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITWISE_XOR     reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITWISE_OR      reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LOGICAL_AND     reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    QUES_MARK       reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LOGICAL_OR      reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SEMI_COLON      reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COMMA           reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    R_BRACES        reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    R_PAREN         reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COLON           reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    R_SQBR          reduce using rule 54 (additive_expression -> additive_expression ADD multiplicative_expression .)
    MULTIPLY        shift and go to state 156
    DIVIDE          shift and go to state 157
    MODULUS         shift and go to state 158


state 226

    (55) additive_expression -> additive_expression SUBSTRACT multiplicative_expression .
    (50) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (51) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (52) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    ADD             reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    SUBSTRACT       reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LESS            reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    GREATER         reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LESS_EQUALS     reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    EQUALS          reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    NOT_EQUALS      reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    BITWISE_AND     reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    BITWISE_XOR     reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    BITWISE_OR      reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LOGICAL_AND     reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    QUES_MARK       reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LOGICAL_OR      reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    SEMI_COLON      reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    COMMA           reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    R_BRACES        reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    R_PAREN         reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    COLON           reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    R_SQBR          reduce using rule 55 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    MULTIPLY        shift and go to state 156
    DIVIDE          shift and go to state 157
    MODULUS         shift and go to state 158


state 227

    (50) multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .

    MULTIPLY        reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    DIVIDE          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MODULUS         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    ADD             reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SUBSTRACT       reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LEFT_SHIFT      reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_SHIFT     reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESS            reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATER         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESS_EQUALS     reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATER_EQUALS  reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    EQUALS          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    NOT_EQUALS      reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_AND     reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_XOR     reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_OR      reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOGICAL_AND     reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    QUES_MARK       reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOGICAL_OR      reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SEMI_COLON      reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COMMA           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    R_BRACES        reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    R_PAREN         reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COLON           reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    R_SQBR          reduce using rule 50 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)


state 228

    (51) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    MULTIPLY        reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MODULUS         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    ADD             reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SUBSTRACT       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_SHIFT      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_SHIFT     reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS            reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS_EQUALS     reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER_EQUALS  reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQUALS          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NOT_EQUALS      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_AND     reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_XOR     reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_OR      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOGICAL_AND     reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUES_MARK       reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOGICAL_OR      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI_COLON      reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_BRACES        reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_PAREN         reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_SQBR          reduce using rule 51 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 229

    (52) multiplicative_expression -> multiplicative_expression MODULUS cast_expression .

    MULTIPLY        reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    DIVIDE          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MODULUS         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    ADD             reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    SUBSTRACT       reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LEFT_SHIFT      reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_SHIFT     reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS            reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS_EQUALS     reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER_EQUALS  reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    EQUALS          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    NOT_EQUALS      reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    BITWISE_AND     reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    BITWISE_XOR     reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    BITWISE_OR      reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LOGICAL_AND     reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    QUES_MARK       reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LOGICAL_OR      reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    SEMI_COLON      reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COMMA           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    R_BRACES        reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    R_PAREN         reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COLON           reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    R_SQBR          reduce using rule 52 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)


state 230

    (127) direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR .

    L_SQBR          reduce using rule 127 (direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR .)
    ASSIGNMENT      reduce using rule 127 (direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR .)
    L_PAREN         reduce using rule 127 (direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR .)
    SEMI_COLON      reduce using rule 127 (direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR .)
    COMMA           reduce using rule 127 (direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR .)
    R_PAREN         reduce using rule 127 (direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR .)


state 231

    (111) struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES .

    SEMI_COLON      reduce using rule 111 (struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES .)


state 232

    (115) struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .

    VOID            reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    CHAR            reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    INT             reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    LONG            reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    FLOAT           reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    DOUBLE          reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    STRUCT          reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    ENUM            reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    BOOL            reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)
    R_BRACES        reduce using rule 115 (struct_declaration -> type_specifier struct_declarator_list SEMI_COLON .)


state 233

    (117) struct_declarator_list -> struct_declarator_list COMMA . declarator
    (123) declarator -> . pointer direct_declarator
    (124) declarator -> . no_pointer direct_declarator
    (128) pointer -> . MULTIPLY
    (129) pointer -> . pointer MULTIPLY
    (130) no_pointer -> .

    MULTIPLY        shift and go to state 24
    IDENTIFIER      reduce using rule 130 (no_pointer -> .)
    L_PAREN         reduce using rule 130 (no_pointer -> .)

    declarator                     shift and go to state 264
    pointer                        shift and go to state 21
    no_pointer                     shift and go to state 22

state 234

    (122) enumerator -> IDENTIFIER ASSIGNMENT constant_expression .

    R_BRACES        reduce using rule 122 (enumerator -> IDENTIFIER ASSIGNMENT constant_expression .)
    COMMA           reduce using rule 122 (enumerator -> IDENTIFIER ASSIGNMENT constant_expression .)


state 235

    (94) constant_expression -> conditional_expression .

    R_BRACES        reduce using rule 94 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 94 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 94 (constant_expression -> conditional_expression .)


state 236

    (120) enumerator_list -> enumerator_list COMMA enumerator .

    R_BRACES        reduce using rule 120 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 120 (enumerator_list -> enumerator_list COMMA enumerator .)


state 237

    (6) function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .

    VOID            reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    CHAR            reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    INT             reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    LONG            reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    FLOAT           reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    DOUBLE          reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    STRUCT          reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    ENUM            reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    BOOL            reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)
    $end            reduce using rule 6 (function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym .)


state 238

    (8) function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .

    VOID            reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    CHAR            reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    INT             reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    LONG            reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    FLOAT           reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    DOUBLE          reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    STRUCT          reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    ENUM            reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    BOOL            reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)
    $end            reduce using rule 8 (function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym .)


state 239

    (150) compound_statement -> L_BRACES R_BRACES .

    R_BRACES        reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    L_BRACES        reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    SEMI_COLON      reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    IF              reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    SWITCH          reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    WHILE           reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    DO              reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    FOR             reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    CONTINUE        reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    BREAK           reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    RETURN          reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    STRUCT          reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    ENUM            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    VOID            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    CHAR            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    INT             reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    LONG            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    FLOAT           reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    DOUBLE          reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    BOOL            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    INCREMENT       reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    DECREMENT       reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    SIZEOF          reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    BITWISE_AND     reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    MULTIPLY        reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    ADD             reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    SUBSTRACT       reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    BITWISE_ONE_COMPLEMENT reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    LOGICAL_NOT     reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    IDENTIFIER      reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    INT_CONSTANT    reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    HEX_CONSTANT    reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    OCTAL_CONSTANT  reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    EXPONENT_CONSTANT reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    REAL_CONSTANT   reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    CHAR_CONSTANT   reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    STR_CONSTANT    reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    L_PAREN         reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    TRUE            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    FALSE           reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    NULL            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    ELSE            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    CASE            reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)
    DEFAULT         reduce using rule 150 (compound_statement -> L_BRACES R_BRACES .)


state 240

    (151) compound_statement -> L_BRACES add_sym . block_item_list pop_sym R_BRACES
    (154) block_item_list -> . block_item
    (155) block_item_list -> . block_item_list block_item
    (156) block_item -> . statement
    (157) block_item -> . declaration
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (95) declaration -> . struct_specifier SEMI_COLON
    (96) declaration -> . enum_specifier SEMI_COLON
    (97) declaration -> . type_specifier init_declarator_list SEMI_COLON
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (111) struct_specifier -> . STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
    (118) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    STRUCT          shift and go to state 194
    ENUM            shift and go to state 195
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 17
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    block_item_list                shift and go to state 265
    block_item                     shift and go to state 175
    statement                      shift and go to state 176
    declaration                    shift and go to state 177
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    struct_specifier               shift and go to state 7
    enum_specifier                 shift and go to state 8
    type_specifier                 shift and go to state 184
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 241

    (153) function_body -> L_BRACES block_item_list R_BRACES .

    VOID            reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    CHAR            reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    INT             reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    LONG            reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    FLOAT           reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    DOUBLE          reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    STRUCT          reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    ENUM            reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    BOOL            reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)
    $end            reduce using rule 153 (function_body -> L_BRACES block_item_list R_BRACES .)


state 242

    (155) block_item_list -> block_item_list block_item .

    R_BRACES        reduce using rule 155 (block_item_list -> block_item_list block_item .)
    L_BRACES        reduce using rule 155 (block_item_list -> block_item_list block_item .)
    SEMI_COLON      reduce using rule 155 (block_item_list -> block_item_list block_item .)
    IF              reduce using rule 155 (block_item_list -> block_item_list block_item .)
    SWITCH          reduce using rule 155 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 155 (block_item_list -> block_item_list block_item .)
    DO              reduce using rule 155 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 155 (block_item_list -> block_item_list block_item .)
    CONTINUE        reduce using rule 155 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 155 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 155 (block_item_list -> block_item_list block_item .)
    STRUCT          reduce using rule 155 (block_item_list -> block_item_list block_item .)
    ENUM            reduce using rule 155 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 155 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 155 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 155 (block_item_list -> block_item_list block_item .)
    LONG            reduce using rule 155 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 155 (block_item_list -> block_item_list block_item .)
    DOUBLE          reduce using rule 155 (block_item_list -> block_item_list block_item .)
    BOOL            reduce using rule 155 (block_item_list -> block_item_list block_item .)
    INCREMENT       reduce using rule 155 (block_item_list -> block_item_list block_item .)
    DECREMENT       reduce using rule 155 (block_item_list -> block_item_list block_item .)
    SIZEOF          reduce using rule 155 (block_item_list -> block_item_list block_item .)
    BITWISE_AND     reduce using rule 155 (block_item_list -> block_item_list block_item .)
    MULTIPLY        reduce using rule 155 (block_item_list -> block_item_list block_item .)
    ADD             reduce using rule 155 (block_item_list -> block_item_list block_item .)
    SUBSTRACT       reduce using rule 155 (block_item_list -> block_item_list block_item .)
    BITWISE_ONE_COMPLEMENT reduce using rule 155 (block_item_list -> block_item_list block_item .)
    LOGICAL_NOT     reduce using rule 155 (block_item_list -> block_item_list block_item .)
    IDENTIFIER      reduce using rule 155 (block_item_list -> block_item_list block_item .)
    INT_CONSTANT    reduce using rule 155 (block_item_list -> block_item_list block_item .)
    HEX_CONSTANT    reduce using rule 155 (block_item_list -> block_item_list block_item .)
    OCTAL_CONSTANT  reduce using rule 155 (block_item_list -> block_item_list block_item .)
    EXPONENT_CONSTANT reduce using rule 155 (block_item_list -> block_item_list block_item .)
    REAL_CONSTANT   reduce using rule 155 (block_item_list -> block_item_list block_item .)
    CHAR_CONSTANT   reduce using rule 155 (block_item_list -> block_item_list block_item .)
    STR_CONSTANT    reduce using rule 155 (block_item_list -> block_item_list block_item .)
    L_PAREN         reduce using rule 155 (block_item_list -> block_item_list block_item .)
    TRUE            reduce using rule 155 (block_item_list -> block_item_list block_item .)
    FALSE           reduce using rule 155 (block_item_list -> block_item_list block_item .)
    NULL            reduce using rule 155 (block_item_list -> block_item_list block_item .)


state 243

    (159) expression_statement -> expression SEMI_COLON .

    R_BRACES        reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    L_BRACES        reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    SEMI_COLON      reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    IF              reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    SWITCH          reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    WHILE           reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    DO              reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    FOR             reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    CONTINUE        reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    BREAK           reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    RETURN          reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    STRUCT          reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    ENUM            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    VOID            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    CHAR            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    INT             reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    LONG            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    FLOAT           reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    DOUBLE          reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    BOOL            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    INCREMENT       reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    DECREMENT       reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    SIZEOF          reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    BITWISE_AND     reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    MULTIPLY        reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    ADD             reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    SUBSTRACT       reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    IDENTIFIER      reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    INT_CONSTANT    reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    STR_CONSTANT    reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    L_PAREN         reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    TRUE            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    FALSE           reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    NULL            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    R_PAREN         reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    ELSE            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    CASE            reduce using rule 159 (expression_statement -> expression SEMI_COLON .)
    DEFAULT         reduce using rule 159 (expression_statement -> expression SEMI_COLON .)


state 244

    (160) selection_statement -> IF L_PAREN . expression R_PAREN statement
    (161) selection_statement -> IF L_PAREN . expression R_PAREN statement ELSE statement
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 266
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 245

    (162) selection_statement -> SWITCH L_PAREN . expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 267
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 246

    (163) iteration_statement -> WHILE L_PAREN . expression R_PAREN statement
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 268
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 247

    (164) iteration_statement -> DO statement . WHILE L_PAREN expression R_PAREN SEMI_COLON

    WHILE           shift and go to state 269


state 248

    (165) iteration_statement -> FOR L_PAREN . expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> FOR L_PAREN . expression_statement expression_statement expression R_PAREN statement
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI_COLON      shift and go to state 183
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression_statement           shift and go to state 270
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 249

    (167) jump_statement -> CONTINUE SEMI_COLON .

    R_BRACES        reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    L_BRACES        reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    SEMI_COLON      reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    IF              reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    SWITCH          reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    WHILE           reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    DO              reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    FOR             reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    CONTINUE        reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    BREAK           reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    RETURN          reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    STRUCT          reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    ENUM            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    VOID            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    CHAR            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    INT             reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    LONG            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    FLOAT           reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    DOUBLE          reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    BOOL            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    INCREMENT       reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    DECREMENT       reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    SIZEOF          reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    BITWISE_AND     reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    MULTIPLY        reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    ADD             reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    SUBSTRACT       reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    IDENTIFIER      reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    INT_CONSTANT    reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    STR_CONSTANT    reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    L_PAREN         reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    TRUE            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    FALSE           reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    NULL            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    ELSE            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    CASE            reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)
    DEFAULT         reduce using rule 167 (jump_statement -> CONTINUE SEMI_COLON .)


state 250

    (168) jump_statement -> BREAK SEMI_COLON .

    R_BRACES        reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    L_BRACES        reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    SEMI_COLON      reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    IF              reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    SWITCH          reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    WHILE           reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    DO              reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    FOR             reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    CONTINUE        reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    BREAK           reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    RETURN          reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    STRUCT          reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    ENUM            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    VOID            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    CHAR            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    INT             reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    LONG            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    FLOAT           reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    DOUBLE          reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    BOOL            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    INCREMENT       reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    DECREMENT       reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    SIZEOF          reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    BITWISE_AND     reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    MULTIPLY        reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    ADD             reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    SUBSTRACT       reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    IDENTIFIER      reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    INT_CONSTANT    reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    STR_CONSTANT    reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    L_PAREN         reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    TRUE            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    FALSE           reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    NULL            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    ELSE            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    CASE            reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)
    DEFAULT         reduce using rule 168 (jump_statement -> BREAK SEMI_COLON .)


state 251

    (169) jump_statement -> RETURN SEMI_COLON .

    R_BRACES        reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    L_BRACES        reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    SEMI_COLON      reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    IF              reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    SWITCH          reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    WHILE           reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    DO              reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    FOR             reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    CONTINUE        reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    BREAK           reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    RETURN          reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    STRUCT          reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    ENUM            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    VOID            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    CHAR            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    INT             reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    LONG            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    FLOAT           reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    DOUBLE          reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    BOOL            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    INCREMENT       reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    DECREMENT       reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    SIZEOF          reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    BITWISE_AND     reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    MULTIPLY        reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    ADD             reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    SUBSTRACT       reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    IDENTIFIER      reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    INT_CONSTANT    reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    STR_CONSTANT    reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    L_PAREN         reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    TRUE            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    FALSE           reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    NULL            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    ELSE            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    CASE            reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)
    DEFAULT         reduce using rule 169 (jump_statement -> RETURN SEMI_COLON .)


state 252

    (170) jump_statement -> RETURN expression . SEMI_COLON
    (93) expression -> expression . COMMA assignment_expression

    SEMI_COLON      shift and go to state 271
    COMMA           shift and go to state 210


state 253

    (111) struct_specifier -> STRUCT IDENTIFIER . add_sym_struct struct_declaration_list pop_sym R_BRACES
    (108) type_specifier -> STRUCT IDENTIFIER .
    (112) add_sym_struct -> . L_BRACES

    MULTIPLY        reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    IDENTIFIER      reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    L_PAREN         reduce using rule 108 (type_specifier -> STRUCT IDENTIFIER .)
    L_BRACES        shift and go to state 40

    add_sym_struct                 shift and go to state 39

state 254

    (118) enum_specifier -> ENUM IDENTIFIER . L_BRACES enumerator_list R_BRACES
    (109) type_specifier -> ENUM IDENTIFIER .

    L_BRACES        shift and go to state 41
    MULTIPLY        reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)
    L_PAREN         reduce using rule 109 (type_specifier -> ENUM IDENTIFIER .)


state 255

    (138) initializer -> L_BRACES initializer_list COMMA R_BRACES .

    SEMI_COLON      reduce using rule 138 (initializer -> L_BRACES initializer_list COMMA R_BRACES .)
    COMMA           reduce using rule 138 (initializer -> L_BRACES initializer_list COMMA R_BRACES .)
    R_BRACES        reduce using rule 138 (initializer -> L_BRACES initializer_list COMMA R_BRACES .)


state 256

    (140) initializer_list -> initializer_list COMMA initializer .

    R_BRACES        reduce using rule 140 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 140 (initializer_list -> initializer_list COMMA initializer .)


state 257

    (78) conditional_expression -> logical_or_expression QUES_MARK expression COLON . conditional_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    logical_or_expression          shift and go to state 54
    conditional_expression         shift and go to state 272
    logical_and_expression         shift and go to state 62
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 258

    (28) postfix_expression -> postfix_expression L_SQBR expression R_SQBR .

    INCREMENT       reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DECREMENT       reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    L_SQBR          reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    L_PAREN         reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DOT             reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ARROW           reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ASSIGNMENT      reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MULTIPLY_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DIVIDE_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MODULUS_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ADD_ASSIGNMENT  reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    SUBSTRACT_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_AND_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_OR_ASSIGNMENT reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MULTIPLY        reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DIVIDE          reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MODULUS         reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ADD             reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    SUBSTRACT       reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LEFT_SHIFT      reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    RIGHT_SHIFT     reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LESS            reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    GREATER         reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LESS_EQUALS     reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    GREATER_EQUALS  reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    EQUALS          reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    NOT_EQUALS      reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_AND     reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_XOR     reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_OR      reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LOGICAL_AND     reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    QUES_MARK       reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LOGICAL_OR      reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    SEMI_COLON      reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    COMMA           reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    R_BRACES        reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    R_PAREN         reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    COLON           reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    R_SQBR          reduce using rule 28 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)


state 259

    (30) postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .

    INCREMENT       reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DECREMENT       reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    L_SQBR          reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    L_PAREN         reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DOT             reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ARROW           reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ASSIGNMENT      reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MULTIPLY        reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DIVIDE          reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MODULUS         reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ADD             reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    SUBSTRACT       reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LEFT_SHIFT      reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    RIGHT_SHIFT     reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LESS            reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    GREATER         reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LESS_EQUALS     reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    GREATER_EQUALS  reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    EQUALS          reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    NOT_EQUALS      reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_AND     reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_XOR     reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_OR      reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LOGICAL_AND     reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    QUES_MARK       reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LOGICAL_OR      reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    SEMI_COLON      reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    COMMA           reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    R_BRACES        reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    R_PAREN         reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    COLON           reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    R_SQBR          reduce using rule 30 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)


state 260

    (34) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    assignment_expression          shift and go to state 273
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 261

    (40) unary_expression -> SIZEOF L_PAREN type_name R_PAREN .

    ASSIGNMENT      reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MULTIPLY        reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    DIVIDE          reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MODULUS         reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    ADD             reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SUBSTRACT       reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_SHIFT      reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_SHIFT     reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LESS            reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GREATER         reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LESS_EQUALS     reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GREATER_EQUALS  reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    EQUALS          reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    NOT_EQUALS      reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_AND     reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_XOR     reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_OR      reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LOGICAL_AND     reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    QUES_MARK       reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LOGICAL_OR      reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SEMI_COLON      reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COMMA           reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_BRACES        reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_PAREN         reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COLON           reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_SQBR          reduce using rule 40 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)


state 262

    (93) expression -> expression COMMA assignment_expression .

    R_PAREN         reduce using rule 93 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 93 (expression -> expression COMMA assignment_expression .)
    SEMI_COLON      reduce using rule 93 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 93 (expression -> expression COMMA assignment_expression .)
    R_SQBR          reduce using rule 93 (expression -> expression COMMA assignment_expression .)


state 263

    (48) cast_expression -> L_PAREN type_name R_PAREN cast_expression .

    MULTIPLY        reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    DIVIDE          reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MODULUS         reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    ADD             reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SUBSTRACT       reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LEFT_SHIFT      reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    RIGHT_SHIFT     reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LESS            reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    GREATER         reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LESS_EQUALS     reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    GREATER_EQUALS  reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    EQUALS          reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    NOT_EQUALS      reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    BITWISE_AND     reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    BITWISE_XOR     reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    BITWISE_OR      reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LOGICAL_AND     reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    QUES_MARK       reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LOGICAL_OR      reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SEMI_COLON      reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    COMMA           reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_BRACES        reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    ASSIGNMENT      reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    MODULUS_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    ADD_ASSIGNMENT  reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_PAREN         reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    COLON           reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)
    R_SQBR          reduce using rule 48 (cast_expression -> L_PAREN type_name R_PAREN cast_expression .)


state 264

    (117) struct_declarator_list -> struct_declarator_list COMMA declarator .

    SEMI_COLON      reduce using rule 117 (struct_declarator_list -> struct_declarator_list COMMA declarator .)
    COMMA           reduce using rule 117 (struct_declarator_list -> struct_declarator_list COMMA declarator .)


state 265

    (151) compound_statement -> L_BRACES add_sym block_item_list . pop_sym R_BRACES
    (155) block_item_list -> block_item_list . block_item
    (172) pop_sym -> .
    (156) block_item -> . statement
    (157) block_item -> . declaration
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (95) declaration -> . struct_specifier SEMI_COLON
    (96) declaration -> . enum_specifier SEMI_COLON
    (97) declaration -> . type_specifier init_declarator_list SEMI_COLON
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (111) struct_specifier -> . STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES
    (118) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (102) type_specifier -> . VOID
    (103) type_specifier -> . CHAR
    (104) type_specifier -> . INT
    (105) type_specifier -> . LONG
    (106) type_specifier -> . FLOAT
    (107) type_specifier -> . DOUBLE
    (108) type_specifier -> . STRUCT IDENTIFIER
    (109) type_specifier -> . ENUM IDENTIFIER
    (110) type_specifier -> . BOOL
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_BRACES        reduce using rule 172 (pop_sym -> .)
    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    STRUCT          shift and go to state 194
    ENUM            shift and go to state 195
    VOID            shift and go to state 9
    CHAR            shift and go to state 10
    INT             shift and go to state 11
    LONG            shift and go to state 12
    FLOAT           shift and go to state 13
    DOUBLE          shift and go to state 14
    BOOL            shift and go to state 17
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    pop_sym                        shift and go to state 274
    block_item                     shift and go to state 242
    statement                      shift and go to state 176
    declaration                    shift and go to state 177
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    struct_specifier               shift and go to state 7
    enum_specifier                 shift and go to state 8
    type_specifier                 shift and go to state 184
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 266

    (160) selection_statement -> IF L_PAREN expression . R_PAREN statement
    (161) selection_statement -> IF L_PAREN expression . R_PAREN statement ELSE statement
    (93) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 275
    COMMA           shift and go to state 210


state 267

    (162) selection_statement -> SWITCH L_PAREN expression . R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (93) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 276
    COMMA           shift and go to state 210


state 268

    (163) iteration_statement -> WHILE L_PAREN expression . R_PAREN statement
    (93) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 277
    COMMA           shift and go to state 210


state 269

    (164) iteration_statement -> DO statement WHILE . L_PAREN expression R_PAREN SEMI_COLON

    L_PAREN         shift and go to state 278


state 270

    (165) iteration_statement -> FOR L_PAREN expression_statement . expression_statement R_PAREN statement
    (166) iteration_statement -> FOR L_PAREN expression_statement . expression_statement expression R_PAREN statement
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    SEMI_COLON      shift and go to state 183
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression_statement           shift and go to state 279
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 271

    (170) jump_statement -> RETURN expression SEMI_COLON .

    R_BRACES        reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    L_BRACES        reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    SEMI_COLON      reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    IF              reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    SWITCH          reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    WHILE           reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    DO              reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    FOR             reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    CONTINUE        reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    BREAK           reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    RETURN          reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    STRUCT          reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    ENUM            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    VOID            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    CHAR            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    INT             reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    LONG            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    FLOAT           reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    DOUBLE          reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    BOOL            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    INCREMENT       reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    DECREMENT       reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    SIZEOF          reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    BITWISE_AND     reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    MULTIPLY        reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    ADD             reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    SUBSTRACT       reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    IDENTIFIER      reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    INT_CONSTANT    reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    STR_CONSTANT    reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    L_PAREN         reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    TRUE            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    FALSE           reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    NULL            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    ELSE            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    CASE            reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)
    DEFAULT         reduce using rule 170 (jump_statement -> RETURN expression SEMI_COLON .)


state 272

    (78) conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .

    SEMI_COLON      reduce using rule 78 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    COMMA           reduce using rule 78 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    R_BRACES        reduce using rule 78 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    R_PAREN         reduce using rule 78 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    COLON           reduce using rule 78 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    R_SQBR          reduce using rule 78 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)


state 273

    (34) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    R_PAREN         reduce using rule 34 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 34 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 274

    (151) compound_statement -> L_BRACES add_sym block_item_list pop_sym . R_BRACES

    R_BRACES        shift and go to state 280


state 275

    (160) selection_statement -> IF L_PAREN expression R_PAREN . statement
    (161) selection_statement -> IF L_PAREN expression R_PAREN . statement ELSE statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 185
    statement                      shift and go to state 281
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 276

    (162) selection_statement -> SWITCH L_PAREN expression R_PAREN . L_BRACES add_sym labeled_statement_list pop_sym R_BRACES

    L_BRACES        shift and go to state 282


state 277

    (163) iteration_statement -> WHILE L_PAREN expression R_PAREN . statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 185
    statement                      shift and go to state 283
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 278

    (164) iteration_statement -> DO statement WHILE L_PAREN . expression R_PAREN SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 284
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 279

    (165) iteration_statement -> FOR L_PAREN expression_statement expression_statement . R_PAREN statement
    (166) iteration_statement -> FOR L_PAREN expression_statement expression_statement . expression R_PAREN statement
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    R_PAREN         shift and go to state 285
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 286
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 280

    (151) compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .

    R_BRACES        reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    L_BRACES        reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    SEMI_COLON      reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    IF              reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    SWITCH          reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    WHILE           reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    DO              reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    FOR             reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    CONTINUE        reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    BREAK           reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    RETURN          reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    STRUCT          reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    ENUM            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    VOID            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    CHAR            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    INT             reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    LONG            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    FLOAT           reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    DOUBLE          reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    BOOL            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    INCREMENT       reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    DECREMENT       reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    SIZEOF          reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    BITWISE_AND     reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    MULTIPLY        reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    ADD             reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    SUBSTRACT       reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    BITWISE_ONE_COMPLEMENT reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    LOGICAL_NOT     reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    IDENTIFIER      reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    INT_CONSTANT    reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    HEX_CONSTANT    reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    OCTAL_CONSTANT  reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    EXPONENT_CONSTANT reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    REAL_CONSTANT   reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    CHAR_CONSTANT   reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    STR_CONSTANT    reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    L_PAREN         reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    TRUE            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    FALSE           reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    NULL            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    ELSE            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    CASE            reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)
    DEFAULT         reduce using rule 151 (compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES .)


state 281

    (160) selection_statement -> IF L_PAREN expression R_PAREN statement .
    (161) selection_statement -> IF L_PAREN expression R_PAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    R_BRACES        reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_BRACES        reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SEMI_COLON      reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DO              reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    STRUCT          reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    ENUM            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    VOID            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CHAR            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    INT             reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    LONG            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    FLOAT           reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DOUBLE          reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BOOL            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    INCREMENT       reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DECREMENT       reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BITWISE_AND     reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    MULTIPLY        reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    ADD             reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SUBSTRACT       reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    INT_CONSTANT    reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    STR_CONSTANT    reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    TRUE            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    FALSE           reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    NULL            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    ELSE            shift and go to state 287

  ! ELSE            [ reduce using rule 160 (selection_statement -> IF L_PAREN expression R_PAREN statement .) ]


state 282

    (162) selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES . add_sym labeled_statement_list pop_sym R_BRACES
    (171) add_sym -> .

    CASE            reduce using rule 171 (add_sym -> .)
    DEFAULT         reduce using rule 171 (add_sym -> .)

    add_sym                        shift and go to state 288

state 283

    (163) iteration_statement -> WHILE L_PAREN expression R_PAREN statement .

    R_BRACES        reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    L_BRACES        reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SEMI_COLON      reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    DO              reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    STRUCT          reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    ENUM            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    VOID            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    CHAR            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    INT             reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    LONG            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    FLOAT           reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    DOUBLE          reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    BOOL            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    INCREMENT       reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    DECREMENT       reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    BITWISE_AND     reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    MULTIPLY        reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    ADD             reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SUBSTRACT       reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    INT_CONSTANT    reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    STR_CONSTANT    reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    TRUE            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    FALSE           reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    NULL            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    ELSE            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 163 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)


state 284

    (164) iteration_statement -> DO statement WHILE L_PAREN expression . R_PAREN SEMI_COLON
    (93) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 289
    COMMA           shift and go to state 210


state 285

    (165) iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN . statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression_statement           shift and go to state 179
    statement                      shift and go to state 290
    compound_statement             shift and go to state 178
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 286

    (166) iteration_statement -> FOR L_PAREN expression_statement expression_statement expression . R_PAREN statement
    (93) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 291
    COMMA           shift and go to state 210


state 287

    (161) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE . statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression                     shift and go to state 185
    statement                      shift and go to state 292
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 288

    (162) selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym . labeled_statement_list pop_sym R_BRACES
    (146) labeled_statement_list -> . labeled_statement_list labeled_statement
    (147) labeled_statement_list -> . labeled_statement
    (148) labeled_statement -> . CASE constant_expression COLON statement
    (149) labeled_statement -> . DEFAULT COLON statement

    CASE            shift and go to state 295
    DEFAULT         shift and go to state 296

    labeled_statement_list         shift and go to state 293
    labeled_statement              shift and go to state 294

state 289

    (164) iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 297


state 290

    (165) iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .

    R_BRACES        reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    L_BRACES        reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SEMI_COLON      reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    IF              reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SWITCH          reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    WHILE           reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    DO              reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    FOR             reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    CONTINUE        reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    BREAK           reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    RETURN          reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    STRUCT          reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    ENUM            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    VOID            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    CHAR            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    INT             reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    LONG            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    FLOAT           reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    DOUBLE          reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    BOOL            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    INCREMENT       reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    DECREMENT       reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SIZEOF          reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    BITWISE_AND     reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    MULTIPLY        reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    ADD             reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SUBSTRACT       reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    IDENTIFIER      reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    INT_CONSTANT    reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    STR_CONSTANT    reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    L_PAREN         reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    TRUE            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    FALSE           reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    NULL            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    ELSE            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    CASE            reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    DEFAULT         reduce using rule 165 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)


state 291

    (166) iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN . statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    expression_statement           shift and go to state 179
    expression                     shift and go to state 185
    statement                      shift and go to state 298
    compound_statement             shift and go to state 178
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 292

    (161) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .

    R_BRACES        reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_BRACES        reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SEMI_COLON      reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IF              reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SWITCH          reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    WHILE           reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DO              reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    FOR             reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CONTINUE        reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BREAK           reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    RETURN          reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    STRUCT          reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    ENUM            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    VOID            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CHAR            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    INT             reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    LONG            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    FLOAT           reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DOUBLE          reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BOOL            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    INCREMENT       reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DECREMENT       reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SIZEOF          reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BITWISE_AND     reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    MULTIPLY        reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    ADD             reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SUBSTRACT       reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    LOGICAL_NOT     reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    INT_CONSTANT    reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    HEX_CONSTANT    reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    OCTAL_CONSTANT  reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    EXPONENT_CONSTANT reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    REAL_CONSTANT   reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CHAR_CONSTANT   reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    STR_CONSTANT    reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_PAREN         reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    TRUE            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    FALSE           reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    NULL            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    ELSE            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CASE            reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DEFAULT         reduce using rule 161 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)


state 293

    (162) selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list . pop_sym R_BRACES
    (146) labeled_statement_list -> labeled_statement_list . labeled_statement
    (172) pop_sym -> .
    (148) labeled_statement -> . CASE constant_expression COLON statement
    (149) labeled_statement -> . DEFAULT COLON statement

    R_BRACES        reduce using rule 172 (pop_sym -> .)
    CASE            shift and go to state 295
    DEFAULT         shift and go to state 296

    pop_sym                        shift and go to state 299
    labeled_statement              shift and go to state 300

state 294

    (147) labeled_statement_list -> labeled_statement .

    CASE            reduce using rule 147 (labeled_statement_list -> labeled_statement .)
    DEFAULT         reduce using rule 147 (labeled_statement_list -> labeled_statement .)
    R_BRACES        reduce using rule 147 (labeled_statement_list -> labeled_statement .)


state 295

    (148) labeled_statement -> CASE . constant_expression COLON statement
    (94) constant_expression -> . conditional_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL

    L_PAREN         shift and go to state 135
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    constant_expression            shift and go to state 301
    conditional_expression         shift and go to state 235
    logical_or_expression          shift and go to state 54
    logical_and_expression         shift and go to state 62
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88
    cast_expression                shift and go to state 59
    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    primary_expression             shift and go to state 63

state 296

    (149) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 302


state 297

    (164) iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .

    R_BRACES        reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    L_BRACES        reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SEMI_COLON      reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    IF              reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SWITCH          reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    WHILE           reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    DO              reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    FOR             reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    CONTINUE        reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    BREAK           reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    RETURN          reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    STRUCT          reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    ENUM            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    VOID            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    CHAR            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    INT             reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    LONG            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    FLOAT           reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    DOUBLE          reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    BOOL            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    INCREMENT       reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    DECREMENT       reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SIZEOF          reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    BITWISE_AND     reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    MULTIPLY        reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    ADD             reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SUBSTRACT       reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    IDENTIFIER      reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    INT_CONSTANT    reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    STR_CONSTANT    reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    L_PAREN         reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    TRUE            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    FALSE           reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    NULL            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    ELSE            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    CASE            reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    DEFAULT         reduce using rule 164 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)


state 298

    (166) iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .

    R_BRACES        reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    L_BRACES        reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SEMI_COLON      reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    IF              reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SWITCH          reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    WHILE           reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    DO              reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    FOR             reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    CONTINUE        reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    BREAK           reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    RETURN          reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    STRUCT          reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    ENUM            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    VOID            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    CHAR            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    INT             reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    LONG            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    FLOAT           reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    DOUBLE          reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    BOOL            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    INCREMENT       reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    DECREMENT       reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SIZEOF          reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    BITWISE_AND     reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    MULTIPLY        reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    ADD             reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SUBSTRACT       reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    INT_CONSTANT    reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    STR_CONSTANT    reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    L_PAREN         reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    TRUE            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    FALSE           reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    NULL            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    ELSE            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    CASE            reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    DEFAULT         reduce using rule 166 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)


state 299

    (162) selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym . R_BRACES

    R_BRACES        shift and go to state 303


state 300

    (146) labeled_statement_list -> labeled_statement_list labeled_statement .

    CASE            reduce using rule 146 (labeled_statement_list -> labeled_statement_list labeled_statement .)
    DEFAULT         reduce using rule 146 (labeled_statement_list -> labeled_statement_list labeled_statement .)
    R_BRACES        reduce using rule 146 (labeled_statement_list -> labeled_statement_list labeled_statement .)


state 301

    (148) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 304


state 302

    (149) labeled_statement -> DEFAULT COLON . statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    statement                      shift and go to state 305
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 303

    (162) selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .

    R_BRACES        reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    L_BRACES        reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    SEMI_COLON      reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    IF              reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    SWITCH          reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    WHILE           reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    DO              reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    FOR             reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    CONTINUE        reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    BREAK           reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    RETURN          reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    STRUCT          reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    ENUM            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    VOID            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    CHAR            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    INT             reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    LONG            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    FLOAT           reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    DOUBLE          reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    BOOL            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    INCREMENT       reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    DECREMENT       reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    SIZEOF          reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    BITWISE_AND     reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    MULTIPLY        reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    ADD             reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    SUBSTRACT       reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    BITWISE_ONE_COMPLEMENT reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    LOGICAL_NOT     reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    IDENTIFIER      reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    INT_CONSTANT    reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    HEX_CONSTANT    reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    OCTAL_CONSTANT  reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    EXPONENT_CONSTANT reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    REAL_CONSTANT   reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    CHAR_CONSTANT   reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    STR_CONSTANT    reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    L_PAREN         reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    TRUE            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    FALSE           reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    NULL            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    ELSE            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    CASE            reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)
    DEFAULT         reduce using rule 162 (selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES .)


state 304

    (148) labeled_statement -> CASE constant_expression COLON . statement
    (141) statement -> . compound_statement
    (142) statement -> . expression_statement
    (143) statement -> . selection_statement
    (144) statement -> . iteration_statement
    (145) statement -> . jump_statement
    (150) compound_statement -> . L_BRACES R_BRACES
    (151) compound_statement -> . L_BRACES add_sym block_item_list pop_sym R_BRACES
    (158) expression_statement -> . SEMI_COLON
    (159) expression_statement -> . expression SEMI_COLON
    (160) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (161) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (162) selection_statement -> . SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES
    (163) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (164) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (165) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (166) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (167) jump_statement -> . CONTINUE SEMI_COLON
    (168) jump_statement -> . BREAK SEMI_COLON
    (169) jump_statement -> . RETURN SEMI_COLON
    (170) jump_statement -> . RETURN expression SEMI_COLON
    (92) expression -> . assignment_expression
    (93) expression -> . expression COMMA assignment_expression
    (79) assignment_expression -> . conditional_expression
    (80) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (77) conditional_expression -> . logical_or_expression
    (78) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (35) unary_expression -> . postfix_expression
    (36) unary_expression -> . INCREMENT unary_expression
    (37) unary_expression -> . DECREMENT unary_expression
    (38) unary_expression -> . unary_operator cast_expression
    (39) unary_expression -> . SIZEOF unary_expression
    (40) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (75) logical_or_expression -> . logical_and_expression
    (76) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (25) postfix_expression -> . primary_expression
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (28) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (29) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (30) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (31) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (32) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (41) unary_operator -> . BITWISE_AND
    (42) unary_operator -> . MULTIPLY
    (43) unary_operator -> . ADD
    (44) unary_operator -> . SUBSTRACT
    (45) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (46) unary_operator -> . LOGICAL_NOT
    (73) logical_and_expression -> . inclusive_or_expression
    (74) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (13) primary_expression -> . IDENTIFIER
    (14) primary_expression -> . INT_CONSTANT
    (15) primary_expression -> . HEX_CONSTANT
    (16) primary_expression -> . OCTAL_CONSTANT
    (17) primary_expression -> . EXPONENT_CONSTANT
    (18) primary_expression -> . REAL_CONSTANT
    (19) primary_expression -> . CHAR_CONSTANT
    (20) primary_expression -> . STR_CONSTANT
    (21) primary_expression -> . L_PAREN expression R_PAREN
    (22) primary_expression -> . TRUE
    (23) primary_expression -> . FALSE
    (24) primary_expression -> . NULL
    (71) inclusive_or_expression -> . exclusive_or_expression
    (72) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (69) exclusive_or_expression -> . and_expression
    (70) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (67) and_expression -> . equality_expression
    (68) and_expression -> . and_expression BITWISE_AND equality_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQUALS relational_expression
    (66) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (59) relational_expression -> . shift_expression
    (60) relational_expression -> . relational_expression LESS shift_expression
    (61) relational_expression -> . relational_expression GREATER shift_expression
    (62) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (63) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (56) shift_expression -> . additive_expression
    (57) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (58) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (53) additive_expression -> . multiplicative_expression
    (54) additive_expression -> . additive_expression ADD multiplicative_expression
    (55) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (49) multiplicative_expression -> . cast_expression
    (50) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (51) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (52) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (47) cast_expression -> . unary_expression
    (48) cast_expression -> . L_PAREN type_name R_PAREN cast_expression

    L_BRACES        shift and go to state 172
    SEMI_COLON      shift and go to state 183
    IF              shift and go to state 186
    SWITCH          shift and go to state 187
    WHILE           shift and go to state 188
    DO              shift and go to state 189
    FOR             shift and go to state 190
    CONTINUE        shift and go to state 191
    BREAK           shift and go to state 192
    RETURN          shift and go to state 193
    INCREMENT       shift and go to state 56
    DECREMENT       shift and go to state 57
    SIZEOF          shift and go to state 60
    BITWISE_AND     shift and go to state 65
    MULTIPLY        shift and go to state 66
    ADD             shift and go to state 67
    SUBSTRACT       shift and go to state 68
    BITWISE_ONE_COMPLEMENT shift and go to state 69
    LOGICAL_NOT     shift and go to state 70
    IDENTIFIER      shift and go to state 64
    INT_CONSTANT    shift and go to state 72
    HEX_CONSTANT    shift and go to state 73
    OCTAL_CONSTANT  shift and go to state 74
    EXPONENT_CONSTANT shift and go to state 75
    REAL_CONSTANT   shift and go to state 76
    CHAR_CONSTANT   shift and go to state 77
    STR_CONSTANT    shift and go to state 78
    L_PAREN         shift and go to state 61
    TRUE            shift and go to state 79
    FALSE           shift and go to state 80
    NULL            shift and go to state 81

    statement                      shift and go to state 306
    compound_statement             shift and go to state 178
    expression_statement           shift and go to state 179
    selection_statement            shift and go to state 180
    iteration_statement            shift and go to state 181
    jump_statement                 shift and go to state 182
    expression                     shift and go to state 185
    assignment_expression          shift and go to state 140
    conditional_expression         shift and go to state 52
    unary_expression               shift and go to state 53
    logical_or_expression          shift and go to state 54
    postfix_expression             shift and go to state 55
    unary_operator                 shift and go to state 58
    cast_expression                shift and go to state 59
    logical_and_expression         shift and go to state 62
    primary_expression             shift and go to state 63
    inclusive_or_expression        shift and go to state 71
    exclusive_or_expression        shift and go to state 82
    and_expression                 shift and go to state 83
    equality_expression            shift and go to state 84
    relational_expression          shift and go to state 85
    shift_expression               shift and go to state 86
    additive_expression            shift and go to state 87
    multiplicative_expression      shift and go to state 88

state 305

    (149) labeled_statement -> DEFAULT COLON statement .

    CASE            reduce using rule 149 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 149 (labeled_statement -> DEFAULT COLON statement .)
    R_BRACES        reduce using rule 149 (labeled_statement -> DEFAULT COLON statement .)


state 306

    (148) labeled_statement -> CASE constant_expression COLON statement .

    CASE            reduce using rule 148 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 148 (labeled_statement -> CASE constant_expression COLON statement .)
    R_BRACES        reduce using rule 148 (labeled_statement -> CASE constant_expression COLON statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 281 resolved as shift
