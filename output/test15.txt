Token                 Lexeme                          Line#  Column#
INT                   int                             1      1      
IDENTIFIER            a                               1      5      
COMMA                 ,                               1      6      
IDENTIFIER            b                               1      8      
COMMA                 ,                               1      9      
IDENTIFIER            c                               1      10     
SEMI_COLON            ;                               1      11     
INT                   int                             3      1      
IDENTIFIER            main                            3      5      
L_PAREN               (                               3      9      
R_PAREN               )                               3      10     
SEMI_COLON            ;                               3      11     
STRUCT                struct                          5      1      
IDENTIFIER            main                            5      8      
L_BRACES              {                               5      12     
INT                   int                             6      5      
IDENTIFIER            f                               6      9      
SEMI_COLON            ;                               6      10     
STRUCT                struct                          7      5      
IDENTIFIER            main                            7      12     
MULTIPLY              *                               7      16     
IDENTIFIER            main                            7      18     
SEMI_COLON            ;                               7      22     
R_BRACES              }                               8      1      
SEMI_COLON            ;                               8      2      
STRUCT                struct                          11     1      
IDENTIFIER            Node                            11     8      
L_BRACES              {                               11     12     
INT                   int                             12     5      
IDENTIFIER            a                               12     9      
SEMI_COLON            ;                               12     10     
INT                   int                             13     5      
IDENTIFIER            b                               13     9      
SEMI_COLON            ;                               13     10     
STRUCT                struct                          14     5      
IDENTIFIER            Node                            14     12     
MULTIPLY              *                               14     16     
IDENTIFIER            next                            14     18     
COMMA                 ,                               14     22     
MULTIPLY              *                               14     24     
IDENTIFIER            ptr                             14     25     
SEMI_COLON            ;                               14     28     
STRUCT                struct                          15     5      
IDENTIFIER            Node                            15     12     
MULTIPLY              *                               15     16     
IDENTIFIER            left                            15     18     
SEMI_COLON            ;                               15     22     
R_BRACES              }                               16     1      
SEMI_COLON            ;                               16     2      
VOID                  void                            18     1      
IDENTIFIER            insert                          18     6      
L_PAREN               (                               18     12     
R_PAREN               )                               18     13     
L_BRACES              {                               18     14     
STRUCT                struct                          19     5      
IDENTIFIER            Node                            19     12     
IDENTIFIER            a                               19     17     
SEMI_COLON            ;                               19     18     
STRUCT                struct                          20     5      
IDENTIFIER            Node                            20     12     
MULTIPLY              *                               20     16     
IDENTIFIER            ptr                             20     18     
ASSIGNMENT            =                               20     22     
BITWISE_AND           &                               20     24     
IDENTIFIER            a                               20     25     
SEMI_COLON            ;                               20     26     
IDENTIFIER            ptr                             21     5      
ARROW                 ->                              21     8      
IDENTIFIER            a                               21     10     
ASSIGNMENT            =                               21     12     
INT_CONSTANT          45                              21     14     
SEMI_COLON            ;                               21     16     
IDENTIFIER            ptr                             22     5      
ARROW                 ->                              22     8      
IDENTIFIER            next                            22     10     
ASSIGNMENT            =                               22     15     
NULL                  NULL                            22     17     
SEMI_COLON            ;                               22     21     
R_BRACES              }                               23     1      
INT                   int                             25     1      
MULTIPLY              *                               25     4      
IDENTIFIER            foo                             25     6      
L_PAREN               (                               25     9      
INT                   int                             25     10     
IDENTIFIER            t                               25     14     
COMMA                 ,                               25     15     
INT                   int                             25     17     
IDENTIFIER            u                               25     21     
COMMA                 ,                               25     22     
CHAR                  char                            25     24     
IDENTIFIER            str                             25     29     
L_SQBR                [                               25     32     
INT_CONSTANT          24                              25     33     
R_SQBR                ]                               25     35     
R_PAREN               )                               25     36     
L_BRACES              {                               25     37     
WHILE                 while                           26     5      
L_PAREN               (                               26     11     
IDENTIFIER            t                               26     12     
DECREMENT             --                              26     13     
R_PAREN               )                               26     15     
L_BRACES              {                               27     5      
INT                   int                             28     9      
IDENTIFIER            i                               28     13     
SEMI_COLON            ;                               28     14     
IDENTIFIER            i                               29     9      
ASSIGNMENT            =                               29     10     
INT_CONSTANT          0                               29     11     
SEMI_COLON            ;                               29     12     
FOR                   for                             30     9      
L_PAREN               (                               30     12     
IDENTIFIER            i                               30     13     
ASSIGNMENT            =                               30     14     
INT_CONSTANT          0                               30     15     
SEMI_COLON            ;                               30     16     
IDENTIFIER            i                               30     17     
LESS                  <                               30     18     
INT_CONSTANT          24                              30     19     
SEMI_COLON            ;                               30     21     
IDENTIFIER            i                               30     22     
INCREMENT             ++                              30     23     
R_PAREN               )                               30     25     
IDENTIFIER            str                             30     26     
L_SQBR                [                               30     29     
IDENTIFIER            i                               30     30     
R_SQBR                ]                               30     31     
ASSIGNMENT            =                               30     33     
L_PAREN               (                               30     35     
CHAR                  char                            30     36     
R_PAREN               )                               30     40     
L_PAREN               (                               30     41     
CHAR_CONSTANT         'a'                             30     42     
ADD                   +                               30     46     
IDENTIFIER            i                               30     48     
R_PAREN               )                               30     49     
SEMI_COLON            ;                               30     50     
R_BRACES              }                               31     5      
RETURN                return                          32     5      
L_PAREN               (                               32     12     
VOID                  void                            32     13     
MULTIPLY              *                               32     17     
R_PAREN               )                               32     18     
IDENTIFIER            t                               32     19     
ADD                   +                               32     21     
IDENTIFIER            u                               32     23     
SEMI_COLON            ;                               32     24     
R_BRACES              }                               33     1      
INT                   int                             35     1      
IDENTIFIER            zoo                             35     5      
L_PAREN               (                               35     8      
FLOAT                 float                           35     9      
IDENTIFIER            a                               35     15     
COMMA                 ,                               35     16     
FLOAT                 float                           35     18     
IDENTIFIER            d                               35     24     
R_PAREN               )                               35     25     
L_BRACES              {                               35     26     
RETURN                return                          36     5      
L_PAREN               (                               36     12     
INT                   int                             36     13     
R_PAREN               )                               36     16     
IDENTIFIER            a                               36     17     
MODULUS               %                               36     18     
L_PAREN               (                               36     19     
LONG                  long                            36     20     
R_PAREN               )                               36     24     
IDENTIFIER            d                               36     25     
SEMI_COLON            ;                               36     26     
R_BRACES              }                               37     1      
INT                   int                             39     1      
IDENTIFIER            ter                             39     5      
L_PAREN               (                               39     8      
INT                   int                             39     9      
IDENTIFIER            c                               39     13     
R_PAREN               )                               39     14     
L_BRACES              {                               39     15     
RETURN                return                          40     5      
IDENTIFIER            a                               40     12     
GREATER               >                               40     14     
IDENTIFIER            b                               40     16     
QUES_MARK             ?                               40     18     
IDENTIFIER            a                               40     20     
COLON                 :                               40     21     
L_PAREN               (                               40     22     
IDENTIFIER            b                               40     23     
MODULUS               %                               40     25     
IDENTIFIER            a                               40     26     
QUES_MARK             ?                               40     28     
IDENTIFIER            c                               40     30     
COLON                 :                               40     32     
IDENTIFIER            c                               40     33     
R_PAREN               )                               40     34     
SEMI_COLON            ;                               40     35     
R_BRACES              }                               41     1      
INT                   int                             43     1      
IDENTIFIER            main                            43     5      
L_PAREN               (                               43     9      
R_PAREN               )                               43     10     
L_BRACES              {                               43     11     
STRUCT                struct                          45     5      
IDENTIFIER            inside                          45     12     
L_BRACES              {                               45     18     
INT                   int                             46     9      
IDENTIFIER            x                               46     13     
SEMI_COLON            ;                               46     14     
STRUCT                struct                          47     9      
IDENTIFIER            inside                          47     16     
MULTIPLY              *                               47     23     
IDENTIFIER            s                               47     24     
SEMI_COLON            ;                               47     25     
R_BRACES              }                               48     5      
SEMI_COLON            ;                               48     6      
STRUCT                struct                          50     5      
IDENTIFIER            inside                          50     12     
IDENTIFIER            main1                           50     19     
SEMI_COLON            ;                               50     24     
IDENTIFIER            main1                           52     5      
DOT                   .                               52     10     
IDENTIFIER            x                               52     11     
ASSIGNMENT            =                               52     12     
IDENTIFIER            main1                           52     14     
DOT                   .                               52     19     
IDENTIFIER            s                               52     20     
ARROW                 ->                              52     21     
IDENTIFIER            x                               52     23     
SEMI_COLON            ;                               52     24     
INT                   int                             54     5      
IDENTIFIER            a                               54     9      
L_SQBR                [                               54     10     
INT_CONSTANT          45                              54     11     
R_SQBR                ]                               54     13     
L_SQBR                [                               54     14     
INT_CONSTANT          50                              54     15     
R_SQBR                ]                               54     17     
SEMI_COLON            ;                               54     18     
INT                   int                             55     5      
IDENTIFIER            z                               55     9      
SEMI_COLON            ;                               55     10     
IDENTIFIER            z                               56     5      
ASSIGNMENT            =                               56     7      
INT_CONSTANT          0                               56     9      
SEMI_COLON            ;                               56     10     
DO                    do                              57     5      
L_BRACES              {                               57     7      
INT                   int                             58     9      
IDENTIFIER            j                               58     13     
ASSIGNMENT            =                               58     15     
IDENTIFIER            z                               58     17     
ADD                   +                               58     19     
INT_CONSTANT          1                               58     21     
SEMI_COLON            ;                               58     22     
IDENTIFIER            a                               59     9      
L_SQBR                [                               59     10     
INT_CONSTANT          12                              59     11     
R_SQBR                ]                               59     13     
L_SQBR                [                               59     14     
INT_CONSTANT          13                              59     15     
R_SQBR                ]                               59     17     
ASSIGNMENT            =                               59     19     
IDENTIFIER            j                               59     21     
INCREMENT             ++                              59     22     
SEMI_COLON            ;                               59     24     
IF                    if                              60     9      
L_PAREN               (                               60     11     
IDENTIFIER            j                               60     12     
EQUALS                ==                              60     14     
INT_CONSTANT          1000                            60     17     
ADD                   +                               60     22     
L_PAREN               (                               60     24     
FLOAT                 float                           60     25     
R_PAREN               )                               60     30     
INT_CONSTANT          1                               60     31     
R_PAREN               )                               60     32     
L_BRACES              {                               60     33     
BREAK                 break                           61     13     
SEMI_COLON            ;                               61     18     
R_BRACES              }                               62     9      
ELSE                  else                            62     10     
IF                    if                              62     15     
L_PAREN               (                               62     17     
IDENTIFIER            j                               62     18     
NOT_EQUALS            !=                              62     20     
ADD                   +                               62     23     
INT_CONSTANT          23                              62     24     
ADD                   +                               62     28     
L_PAREN               (                               62     30     
FLOAT                 float                           62     31     
R_PAREN               )                               62     36     
REAL_CONSTANT         23.4                            62     37     
R_PAREN               )                               62     41     
CONTINUE              continue                        62     42     
SEMI_COLON            ;                               62     50     
IDENTIFIER            z                               63     9      
ASSIGNMENT            =                               63     11     
INCREMENT             ++                              63     13     
IDENTIFIER            z                               63     15     
SEMI_COLON            ;                               63     16     
R_BRACES              }                               64     5      
WHILE                 while                           64     6      
L_PAREN               (                               64     11     
IDENTIFIER            z                               64     12     
LESS                  <                               64     14     
INT_CONSTANT          100                             64     16     
R_PAREN               )                               64     19     
SEMI_COLON            ;                               64     20     
INT                   int                             66     5      
IDENTIFIER            cc                              66     9      
ASSIGNMENT            =                               66     12     
INT_CONSTANT          0                               66     14     
SEMI_COLON            ;                               66     15     
FOR                   for                             67     5      
L_PAREN               (                               67     8      
SEMI_COLON            ;                               67     9      
SEMI_COLON            ;                               67     10     
IDENTIFIER            cc                              67     11     
ADD_ASSIGNMENT        +=                              67     14     
IDENTIFIER            cc                              67     17     
MODULUS               %                               67     19     
INT_CONSTANT          2                               67     20     
ADD                   +                               67     22     
REAL_CONSTANT         3.45                            67     24     
R_PAREN               )                               67     28     
L_BRACES              {                               67     29     
BOOL                  bool                            68     9      
IDENTIFIER            flag                            68     14     
ASSIGNMENT            =                               68     19     
INT_CONSTANT          1                               68     21     
SEMI_COLON            ;                               68     22     
IF                    if                              69     9      
L_PAREN               (                               69     11     
IDENTIFIER            cc                              69     12     
MODULUS               %                               69     14     
INT_CONSTANT          22                              69     15     
MODULUS               %                               69     18     
INT_CONSTANT          34                              69     20     
R_PAREN               )                               69     22     
L_BRACES              {                               69     23     
INT                   int                             70     13     
IDENTIFIER            k                               70     17     
SEMI_COLON            ;                               70     18     
FOR                   for                             71     13     
L_PAREN               (                               71     16     
IDENTIFIER            k                               71     17     
ASSIGNMENT            =                               71     19     
INT_CONSTANT          23                              71     21     
SEMI_COLON            ;                               71     23     
IDENTIFIER            k                               71     24     
LESS                  <                               71     25     
INT_CONSTANT          46                              71     26     
SEMI_COLON            ;                               71     28     
R_PAREN               )                               71     29     
L_BRACES              {                               71     30     
IF                    if                              72     17     
L_PAREN               (                               72     19     
L_PAREN               (                               72     20     
IDENTIFIER            k                               72     21     
NOT_EQUALS            !=                              72     23     
INT_CONSTANT          0                               72     26     
R_PAREN               )                               72     27     
LOGICAL_AND           &&                              72     29     
IDENTIFIER            cc                              72     32     
EQUALS                ==                              72     35     
IDENTIFIER            k                               72     38     
R_PAREN               )                               72     39     
IDENTIFIER            flag                            72     40     
ASSIGNMENT            =                               72     45     
INT_CONSTANT          0                               72     47     
SEMI_COLON            ;                               72     48     
ELSE                  else                            73     17     
BREAK                 break                           73     22     
SEMI_COLON            ;                               73     27     
R_BRACES              }                               74     13     
FOR                   for                             75     13     
L_PAREN               (                               75     16     
SEMI_COLON            ;                               75     17     
IDENTIFIER            flag                            75     18     
NOT_EQUALS            !=                              75     22     
IDENTIFIER            flag                            75     24     
ADD                   +                               75     29     
INT_CONSTANT          3                               75     31     
SEMI_COLON            ;                               75     32     
R_PAREN               )                               75     33     
L_BRACES              {                               75     34     
CONTINUE              continue                        76     17     
SEMI_COLON            ;                               76     25     
IF                    if                              77     17     
L_PAREN               (                               77     19     
IDENTIFIER            flag                            77     20     
BITWISE_XOR           ^                               77     25     
INT_CONSTANT          3                               77     27     
R_PAREN               )                               77     28     
BREAK                 break                           77     29     
SEMI_COLON            ;                               77     34     
R_BRACES              }                               78     13     
R_BRACES              }                               79     9      
IF                    if                              80     9      
L_PAREN               (                               80     11     
LOGICAL_NOT           !                               80     12     
IDENTIFIER            flag                            80     13     
R_PAREN               )                               80     17     
CONTINUE              continue                        80     18     
SEMI_COLON            ;                               80     26     
R_BRACES              }                               81     5      
SWITCH                switch                          83     5      
L_PAREN               (                               83     12     
L_PAREN               (                               83     13     
LONG                  long                            83     14     
R_PAREN               )                               83     18     
INT_CONSTANT          23                              83     19     
R_PAREN               )                               83     21     
L_BRACES              {                               84     5      
CASE                  case                            85     5      
INT_CONSTANT          23                              85     10     
COLON                 :                               85     12     
L_BRACES              {                               85     14     
MULTIPLY              *                               85     15     
MULTIPLY              *                               85     16     
IDENTIFIER            a                               85     17     
ADD_ASSIGNMENT        +=                              85     19     
IDENTIFIER            b                               85     22     
SEMI_COLON            ;                               85     23     
BREAK                 break                           85     24     
SEMI_COLON            ;                               85     29     
R_BRACES              }                               85     30     
DEFAULT               default                         86     5      
COLON                 :                               86     12     
L_BRACES              {                               86     13     
IDENTIFIER            b                               87     9      
ADD_ASSIGNMENT        +=                              87     11     
MULTIPLY              *                               87     14     
MULTIPLY              *                               87     15     
IDENTIFIER            a                               87     16     
LOGICAL_OR            ||                              87     18     
IDENTIFIER            c                               87     21     
ADD                   +                               87     23     
INT_CONSTANT          4                               87     25     
SEMI_COLON            ;                               87     26     
BREAK                 break                           88     9      
SEMI_COLON            ;                               88     14     
R_BRACES              }                               89     5      
R_BRACES              }                               90     5      
RETURN                return                          92     5      
MULTIPLY              *                               92     12     
L_PAREN               (                               92     13     
IDENTIFIER            foo                             92     14     
L_PAREN               (                               92     17     
INT_CONSTANT          4                               92     18     
COMMA                 ,                               92     19     
INT_CONSTANT          5                               92     20     
COMMA                 ,                               92     21     
STR_CONSTANT          "str24"                         92     22     
R_PAREN               )                               92     29     
ADD                   +                               92     31     
L_PAREN               (                               92     33     
LONG                  long                            92     34     
R_PAREN               )                               92     38     
BITWISE_AND           &                               92     39     
IDENTIFIER            z                               92     40     
R_PAREN               )                               92     41     
SEMI_COLON            ;                               92     42     
R_BRACES              }                               93     1      
