Token                 Lexeme                          Line#  Column#
INT                   int                             69     1      
IDENTIFIER            printf                          69     5      
L_PAREN               (                               69     11     
CHAR                  char                            69     12     
IDENTIFIER            s                               69     17     
L_SQBR                [                               69     18     
INT_CONSTANT          20                              69     19     
R_SQBR                ]                               69     21     
COMMA                 ,                               69     22     
INT                   int                             69     23     
IDENTIFIER            a                               69     27     
R_PAREN               )                               69     28     
SEMI_COLON            ;                               69     29     
INT                   int                             70     1      
IDENTIFIER            printf1                         70     5      
L_PAREN               (                               70     12     
CHAR                  char                            70     13     
IDENTIFIER            s                               70     18     
L_SQBR                [                               70     19     
INT_CONSTANT          20                              70     20     
R_SQBR                ]                               70     22     
R_PAREN               )                               70     23     
SEMI_COLON            ;                               70     24     
INT                   int                             71     1      
IDENTIFIER            printf2                         71     5      
L_PAREN               (                               71     12     
CHAR                  char                            71     13     
IDENTIFIER            s                               71     18     
L_SQBR                [                               71     19     
INT_CONSTANT          20                              71     20     
R_SQBR                ]                               71     22     
COMMA                 ,                               71     23     
INT                   int                             71     24     
IDENTIFIER            a                               71     28     
COMMA                 ,                               71     29     
INT                   int                             71     30     
IDENTIFIER            b                               71     34     
R_PAREN               )                               71     35     
SEMI_COLON            ;                               71     36     
INT                   int                             72     1      
IDENTIFIER            scanf                           72     5      
L_PAREN               (                               72     10     
CHAR                  char                            72     11     
IDENTIFIER            s                               72     16     
L_SQBR                [                               72     17     
INT_CONSTANT          20                              72     18     
R_SQBR                ]                               72     20     
COMMA                 ,                               72     21     
INT                   int                             72     22     
MULTIPLY              *                               72     26     
IDENTIFIER            a                               72     27     
R_PAREN               )                               72     28     
SEMI_COLON            ;                               72     29     
VOID                  void                            73     1      
MULTIPLY              *                               73     6      
IDENTIFIER            malloc                          73     7      
L_PAREN               (                               73     13     
INT                   int                             73     14     
IDENTIFIER            size                            73     18     
R_PAREN               )                               73     22     
SEMI_COLON            ;                               73     23     
STRUCT                struct                          75     1      
IDENTIFIER            Node                            75     8      
L_BRACES              {                               75     12     
INT                   int                             76     5      
IDENTIFIER            v                               76     9      
SEMI_COLON            ;                               76     10     
STRUCT                struct                          77     5      
IDENTIFIER            Node                            77     12     
MULTIPLY              *                               77     17     
IDENTIFIER            next                            77     18     
SEMI_COLON            ;                               77     22     
R_BRACES              }                               78     1      
SEMI_COLON            ;                               78     2      
STRUCT                struct                          80     1      
IDENTIFIER            Node                            80     8      
MULTIPLY              *                               80     13     
IDENTIFIER            adj                             80     14     
L_SQBR                [                               80     17     
INT_CONSTANT          11                              80     18     
R_SQBR                ]                               80     20     
SEMI_COLON            ;                               80     21     
INT                   int                             81     1      
IDENTIFIER            visited                         81     5      
L_SQBR                [                               81     12     
INT_CONSTANT          11                              81     13     
R_SQBR                ]                               81     15     
SEMI_COLON            ;                               81     16     
VOID                  void                            83     1      
IDENTIFIER            dfs                             83     6      
L_PAREN               (                               83     9      
INT                   int                             83     10     
IDENTIFIER            u                               83     14     
COMMA                 ,                               83     15     
INT                   int                             83     16     
IDENTIFIER            p                               83     20     
R_PAREN               )                               83     21     
L_BRACES              {                               83     22     
IDENTIFIER            visited                         84     5      
L_SQBR                [                               84     12     
IDENTIFIER            u                               84     13     
R_SQBR                ]                               84     14     
ASSIGNMENT            =                               84     16     
INT_CONSTANT          1                               84     18     
SEMI_COLON            ;                               84     19     
IF                    if                              85     5      
L_PAREN               (                               85     8      
IDENTIFIER            p                               85     9      
EQUALS                ==                              85     11     
SUBSTRACT             -                               85     14     
INT_CONSTANT          1                               85     15     
R_PAREN               )                               85     16     
IDENTIFIER            printf                          85     18     
L_PAREN               (                               85     24     
STR_CONSTANT          "Node %ld: new tree\n"          85     25     
COMMA                 ,                               85     47     
IDENTIFIER            u                               85     48     
ADD                   +                               85     49     
INT_CONSTANT          1                               85     50     
R_PAREN               )                               85     51     
SEMI_COLON            ;                               85     52     
ELSE                  else                            86     5      
IDENTIFIER            printf2                         86     10     
L_PAREN               (                               86     17     
STR_CONSTANT          "Node %ld: Parent: %ld\n"       86     18     
COMMA                 ,                               86     43     
IDENTIFIER            u                               86     44     
ADD                   +                               86     45     
INT_CONSTANT          1                               86     46     
COMMA                 ,                               86     47     
IDENTIFIER            p                               86     48     
ADD                   +                               86     49     
INT_CONSTANT          1                               86     50     
R_PAREN               )                               86     51     
SEMI_COLON            ;                               86     52     
STRUCT                struct                          87     5      
IDENTIFIER            Node                            87     12     
MULTIPLY              *                               87     17     
IDENTIFIER            node                            87     18     
ASSIGNMENT            =                               87     23     
IDENTIFIER            adj                             87     25     
L_SQBR                [                               87     28     
IDENTIFIER            u                               87     29     
R_SQBR                ]                               87     30     
SEMI_COLON            ;                               87     31     
WHILE                 while                           88     5      
L_PAREN               (                               88     10     
IDENTIFIER            node                            88     11     
NOT_EQUALS            !=                              88     16     
NULL                  NULL                            88     19     
R_PAREN               )                               88     23     
L_BRACES              {                               88     24     
IF                    if                              89     9      
L_PAREN               (                               89     12     
LOGICAL_NOT           !                               89     13     
IDENTIFIER            visited                         89     14     
L_SQBR                [                               89     21     
IDENTIFIER            node                            89     22     
ARROW                 ->                              89     26     
IDENTIFIER            v                               89     28     
R_SQBR                ]                               89     29     
R_PAREN               )                               89     30     
IDENTIFIER            dfs                             89     32     
L_PAREN               (                               89     35     
IDENTIFIER            node                            89     36     
ARROW                 ->                              89     40     
IDENTIFIER            v                               89     42     
COMMA                 ,                               89     43     
IDENTIFIER            u                               89     44     
R_PAREN               )                               89     45     
SEMI_COLON            ;                               89     46     
IDENTIFIER            node                            90     9      
ASSIGNMENT            =                               90     14     
IDENTIFIER            node                            90     16     
ARROW                 ->                              90     20     
IDENTIFIER            next                            90     22     
SEMI_COLON            ;                               90     26     
R_BRACES              }                               91     5      
R_BRACES              }                               92     1      
VOID                  void                            94     1      
IDENTIFIER            push                            94     6      
L_PAREN               (                               94     10     
INT                   int                             94     11     
IDENTIFIER            u                               94     15     
COMMA                 ,                               94     16     
INT                   int                             94     17     
IDENTIFIER            v                               94     21     
R_PAREN               )                               94     22     
L_BRACES              {                               94     23     
IF                    if                              95     5      
L_PAREN               (                               95     7      
IDENTIFIER            u                               95     8      
GREATER_EQUALS        >=                              95     9      
INT_CONSTANT          11                              95     11     
R_PAREN               )                               95     13     
RETURN                return                          95     15     
SEMI_COLON            ;                               95     21     
STRUCT                struct                          96     5      
IDENTIFIER            Node                            96     12     
MULTIPLY              *                               96     17     
IDENTIFIER            node                            96     18     
ASSIGNMENT            =                               96     23     
L_PAREN               (                               96     25     
STRUCT                struct                          96     26     
IDENTIFIER            Node                            96     33     
MULTIPLY              *                               96     37     
R_PAREN               )                               96     38     
IDENTIFIER            malloc                          96     39     
L_PAREN               (                               96     45     
SIZEOF                sizeof                          96     46     
L_PAREN               (                               96     52     
STRUCT                struct                          96     53     
IDENTIFIER            Node                            96     60     
R_PAREN               )                               96     64     
R_PAREN               )                               96     65     
SEMI_COLON            ;                               96     66     
IDENTIFIER            node                            97     5      
ARROW                 ->                              97     9      
IDENTIFIER            v                               97     11     
ASSIGNMENT            =                               97     13     
IDENTIFIER            v                               97     15     
SEMI_COLON            ;                               97     16     
IDENTIFIER            node                            98     5      
ARROW                 ->                              98     9      
IDENTIFIER            next                            98     11     
ASSIGNMENT            =                               98     16     
IDENTIFIER            adj                             98     18     
L_SQBR                [                               98     21     
IDENTIFIER            u                               98     22     
R_SQBR                ]                               98     23     
SEMI_COLON            ;                               98     24     
IDENTIFIER            adj                             99     5      
L_SQBR                [                               99     8      
IDENTIFIER            u                               99     9      
R_SQBR                ]                               99     10     
ASSIGNMENT            =                               99     12     
IDENTIFIER            node                            99     14     
SEMI_COLON            ;                               99     18     
R_BRACES              }                               100    1      
INT                   int                             102    1      
IDENTIFIER            main                            102    5      
L_PAREN               (                               102    9      
R_PAREN               )                               102    10     
L_BRACES              {                               102    11     
INT                   int                             103    5      
IDENTIFIER            i                               103    9      
SEMI_COLON            ;                               103    10     
FOR                   for                             104    5      
L_PAREN               (                               104    8      
IDENTIFIER            i                               104    9      
ASSIGNMENT            =                               104    11     
INT_CONSTANT          0                               104    13     
SEMI_COLON            ;                               104    14     
IDENTIFIER            i                               104    15     
LESS                  <                               104    16     
INT_CONSTANT          11                              104    17     
SEMI_COLON            ;                               104    19     
IDENTIFIER            i                               104    20     
INCREMENT             ++                              104    21     
R_PAREN               )                               104    23     
L_BRACES              {                               104    24     
IDENTIFIER            adj                             105    9      
L_SQBR                [                               105    12     
IDENTIFIER            i                               105    13     
R_SQBR                ]                               105    14     
ASSIGNMENT            =                               105    16     
NULL                  NULL                            105    18     
SEMI_COLON            ;                               105    22     
IDENTIFIER            visited                         106    9      
L_SQBR                [                               106    16     
IDENTIFIER            i                               106    17     
R_SQBR                ]                               106    18     
ASSIGNMENT            =                               106    20     
INT_CONSTANT          0                               106    22     
SEMI_COLON            ;                               106    23     
R_BRACES              }                               107    5      
INT                   int                             108    5      
IDENTIFIER            n                               108    9      
SEMI_COLON            ;                               108    10     
IDENTIFIER            printf1                         109    5      
L_PAREN               (                               109    12     
STR_CONSTANT          "Enter number of vertice (<=10)\n"  109    13     
R_PAREN               )                               109    47     
SEMI_COLON            ;                               109    48     
IDENTIFIER            scanf                           110    5      
L_PAREN               (                               110    10     
STR_CONSTANT          "%ld"                           110    11     
COMMA                 ,                               110    16     
BITWISE_AND           &                               110    17     
IDENTIFIER            n                               110    18     
R_PAREN               )                               110    19     
SEMI_COLON            ;                               110    20     
IF                    if                              111    5      
L_PAREN               (                               111    7      
IDENTIFIER            n                               111    8      
GREATER               >                               111    9      
INT_CONSTANT          10                              111    10     
LOGICAL_OR            ||                              111    13     
IDENTIFIER            n                               111    16     
LESS                  <                               111    17     
INT_CONSTANT          1                               111    18     
R_PAREN               )                               111    19     
L_BRACES              {                               111    20     
IDENTIFIER            printf1                         112    9      
L_PAREN               (                               112    16     
STR_CONSTANT          "invalid number\n"              112    17     
R_PAREN               )                               112    35     
SEMI_COLON            ;                               112    36     
RETURN                return                          113    9      
SUBSTRACT             -                               113    16     
INT_CONSTANT          1                               113    17     
SEMI_COLON            ;                               113    18     
R_BRACES              }                               114    5      
FOR                   for                             115    5      
L_PAREN               (                               115    8      
IDENTIFIER            i                               115    9      
ASSIGNMENT            =                               115    11     
INT_CONSTANT          0                               115    13     
SEMI_COLON            ;                               115    14     
IDENTIFIER            i                               115    15     
LESS                  <                               115    17     
IDENTIFIER            n                               115    18     
SEMI_COLON            ;                               115    19     
IDENTIFIER            i                               115    20     
INCREMENT             ++                              115    21     
R_PAREN               )                               115    23     
L_BRACES              {                               115    24     
INT                   int                             116    9      
IDENTIFIER            v                               116    13     
SEMI_COLON            ;                               116    14     
DO                    do                              117    9      
L_BRACES              {                               117    11     
IDENTIFIER            scanf                           118    13     
L_PAREN               (                               118    18     
STR_CONSTANT          "%ld"                           118    19     
COMMA                 ,                               118    24     
BITWISE_AND           &                               118    25     
IDENTIFIER            v                               118    26     
R_PAREN               )                               118    27     
SEMI_COLON            ;                               118    28     
IF                    if                              119    13     
L_PAREN               (                               119    15     
IDENTIFIER            v                               119    16     
EQUALS                ==                              119    18     
SUBSTRACT             -                               119    21     
INT_CONSTANT          1                               119    22     
R_PAREN               )                               119    23     
L_BRACES              {                               119    24     
BREAK                 break                           120    17     
SEMI_COLON            ;                               120    22     
R_BRACES              }                               121    13     
IDENTIFIER            push                            122    13     
L_PAREN               (                               122    17     
IDENTIFIER            i                               122    18     
COMMA                 ,                               122    19     
IDENTIFIER            v                               122    20     
SUBSTRACT             -                               122    21     
INT_CONSTANT          1                               122    22     
R_PAREN               )                               122    23     
SEMI_COLON            ;                               122    24     
R_BRACES              }                               123    9      
WHILE                 while                           123    10     
L_PAREN               (                               123    15     
TRUE                  true                            123    16     
R_PAREN               )                               123    20     
SEMI_COLON            ;                               123    21     
R_BRACES              }                               124    5      
FOR                   for                             125    5      
L_PAREN               (                               125    8      
IDENTIFIER            i                               125    9      
ASSIGNMENT            =                               125    11     
INT_CONSTANT          0                               125    13     
SEMI_COLON            ;                               125    14     
IDENTIFIER            i                               125    15     
LESS                  <                               125    16     
IDENTIFIER            n                               125    17     
SEMI_COLON            ;                               125    18     
IDENTIFIER            i                               125    19     
INCREMENT             ++                              125    20     
R_PAREN               )                               125    22     
L_BRACES              {                               125    23     
IF                    if                              126    9      
L_PAREN               (                               126    11     
LOGICAL_NOT           !                               126    12     
IDENTIFIER            visited                         126    13     
L_SQBR                [                               126    20     
IDENTIFIER            i                               126    21     
R_SQBR                ]                               126    22     
R_PAREN               )                               126    23     
IDENTIFIER            dfs                             126    25     
L_PAREN               (                               126    28     
IDENTIFIER            i                               126    29     
COMMA                 ,                               126    30     
SUBSTRACT             -                               126    31     
INT_CONSTANT          1                               126    32     
R_PAREN               )                               126    33     
SEMI_COLON            ;                               126    34     
R_BRACES              }                               127    5      
R_BRACES              }                               129    1      
