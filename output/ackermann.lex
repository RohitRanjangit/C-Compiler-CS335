Token                 Lexeme                          Line#  Column#
INT                   int                             35     1      
IDENTIFIER            printf                          35     5      
L_PAREN               (                               35     11     
CHAR                  char                            35     12     
IDENTIFIER            s                               35     17     
L_SQBR                [                               35     18     
INT_CONSTANT          20                              35     19     
R_SQBR                ]                               35     21     
COMMA                 ,                               35     22     
INT                   int                             35     23     
IDENTIFIER            a                               35     27     
R_PAREN               )                               35     28     
SEMI_COLON            ;                               35     29     
INT                   int                             36     1      
IDENTIFIER            printf1                         36     5      
L_PAREN               (                               36     12     
CHAR                  char                            36     13     
IDENTIFIER            s                               36     18     
L_SQBR                [                               36     19     
INT_CONSTANT          20                              36     20     
R_SQBR                ]                               36     22     
R_PAREN               )                               36     23     
SEMI_COLON            ;                               36     24     
INT                   int                             37     1      
IDENTIFIER            scanf                           37     5      
L_PAREN               (                               37     10     
CHAR                  char                            37     11     
IDENTIFIER            s                               37     16     
L_SQBR                [                               37     17     
INT_CONSTANT          20                              37     18     
R_SQBR                ]                               37     20     
COMMA                 ,                               37     21     
INT                   int                             37     22     
MULTIPLY              *                               37     26     
IDENTIFIER            a                               37     27     
R_PAREN               )                               37     28     
SEMI_COLON            ;                               37     29     
INT                   int                             39     1      
IDENTIFIER            ackermann                       39     5      
L_PAREN               (                               39     14     
INT                   int                             39     15     
IDENTIFIER            m                               39     19     
COMMA                 ,                               39     20     
INT                   int                             39     21     
IDENTIFIER            n                               39     25     
R_PAREN               )                               39     26     
L_BRACES              {                               39     27     
IF                    if                              40     5      
L_PAREN               (                               40     8      
IDENTIFIER            m                               40     9      
EQUALS                ==                              40     11     
INT_CONSTANT          0                               40     14     
R_PAREN               )                               40     15     
L_BRACES              {                               40     16     
RETURN                return                          41     9      
IDENTIFIER            n                               41     16     
ADD                   +                               41     17     
INT_CONSTANT          1                               41     18     
SEMI_COLON            ;                               41     19     
R_BRACES              }                               42     5      
ELSE                  else                            43     5      
IF                    if                              43     10     
L_PAREN               (                               43     12     
IDENTIFIER            m                               43     14     
GREATER               >                               43     16     
INT_CONSTANT          0                               43     18     
LOGICAL_AND           &&                              43     20     
IDENTIFIER            n                               43     23     
EQUALS                ==                              43     24     
INT_CONSTANT          0                               43     26     
R_PAREN               )                               43     27     
L_BRACES              {                               43     28     
RETURN                return                          44     9      
IDENTIFIER            ackermann                       44     16     
L_PAREN               (                               44     25     
IDENTIFIER            m                               44     26     
SUBSTRACT             -                               44     27     
INT_CONSTANT          1                               44     28     
COMMA                 ,                               44     29     
INT_CONSTANT          1                               44     30     
R_PAREN               )                               44     31     
SEMI_COLON            ;                               44     32     
R_BRACES              }                               45     5      
ELSE                  else                            46     5      
IF                    if                              46     10     
L_PAREN               (                               46     13     
IDENTIFIER            m                               46     14     
GREATER               >                               46     16     
INT_CONSTANT          0                               46     18     
LOGICAL_AND           &&                              46     20     
IDENTIFIER            n                               46     23     
GREATER               >                               46     24     
INT_CONSTANT          0                               46     25     
R_PAREN               )                               46     26     
L_BRACES              {                               46     27     
RETURN                return                          47     9      
IDENTIFIER            ackermann                       47     16     
L_PAREN               (                               47     25     
IDENTIFIER            m                               47     26     
SUBSTRACT             -                               47     27     
INT_CONSTANT          1                               47     28     
COMMA                 ,                               47     29     
IDENTIFIER            ackermann                       47     30     
L_PAREN               (                               47     39     
IDENTIFIER            m                               47     40     
COMMA                 ,                               47     41     
IDENTIFIER            n                               47     42     
SUBSTRACT             -                               47     43     
INT_CONSTANT          1                               47     44     
R_PAREN               )                               47     45     
R_PAREN               )                               47     46     
SEMI_COLON            ;                               47     47     
R_BRACES              }                               48     5      
RETURN                return                          49     5      
SUBSTRACT             -                               49     12     
INT_CONSTANT          1                               49     13     
SEMI_COLON            ;                               49     14     
R_BRACES              }                               50     1      
INT                   int                             52     1      
IDENTIFIER            main                            52     5      
L_PAREN               (                               52     9      
R_PAREN               )                               52     10     
L_BRACES              {                               52     11     
INT                   int                             53     5      
IDENTIFIER            m                               53     9      
COMMA                 ,                               53     10     
IDENTIFIER            n                               53     11     
SEMI_COLON            ;                               53     12     
IDENTIFIER            scanf                           54     5      
L_PAREN               (                               54     10     
STR_CONSTANT          "%ld"                           54     11     
COMMA                 ,                               54     16     
BITWISE_AND           &                               54     17     
IDENTIFIER            m                               54     18     
R_PAREN               )                               54     19     
SEMI_COLON            ;                               54     20     
IDENTIFIER            scanf                           55     5      
L_PAREN               (                               55     10     
STR_CONSTANT          "%ld"                           55     11     
COMMA                 ,                               55     16     
BITWISE_AND           &                               55     17     
IDENTIFIER            n                               55     18     
R_PAREN               )                               55     19     
SEMI_COLON            ;                               55     20     
IF                    if                              56     5      
L_PAREN               (                               56     7      
IDENTIFIER            m                               56     8      
LESS                  <                               56     10     
INT_CONSTANT          0                               56     12     
LOGICAL_OR            ||                              56     14     
IDENTIFIER            n                               56     17     
LESS                  <                               56     18     
INT_CONSTANT          0                               56     19     
R_PAREN               )                               56     20     
L_BRACES              {                               56     21     
IDENTIFIER            printf1                         57     9      
L_PAREN               (                               57     16     
STR_CONSTANT          "Enter positive number"         57     17     
R_PAREN               )                               57     40     
SEMI_COLON            ;                               57     41     
R_BRACES              }                               58     5      
IDENTIFIER            printf                          59     5      
L_PAREN               (                               59     11     
STR_CONSTANT          "%ld\n"                         59     12     
COMMA                 ,                               59     19     
IDENTIFIER            ackermann                       59     20     
L_PAREN               (                               59     29     
IDENTIFIER            m                               59     30     
COMMA                 ,                               59     31     
IDENTIFIER            n                               59     32     
R_PAREN               )                               59     33     
R_PAREN               )                               59     34     
SEMI_COLON            ;                               59     35     
R_BRACES              }                               61     1      
