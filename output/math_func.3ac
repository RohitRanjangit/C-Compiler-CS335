main:
BeginFunc
tmp@0 = sconst@enter a number to output absolute: 
push tmp@0
None = func_call printf
pop tmp@0
tmp@2 = sconst@%f
tmp@1 = addr(n|main)
push tmp@2
push tmp@1
None = func_call scanf
pop tmp@1
pop tmp@2
tmp@4 = sconst@value: %f\n
push n|main
tmp@3 = func_call fabs
pop n|main
push tmp@4
push tmp@3
None = func_call printff
pop tmp@3
pop tmp@4
tmp@5 = sconst@enter a number, power to output pow: 
push tmp@5
None = func_call printf
pop tmp@5
tmp@8 = sconst@%f, %f
tmp@6 = addr(n|main)
tmp@7 = addr(p|main)
push tmp@8
push tmp@6
push tmp@7
None = func_call scanf1
pop tmp@7
pop tmp@6
pop tmp@8
tmp@10 = sconst@value: %f\n
push n|main
push p|main
tmp@9 = func_call pow
pop p|main
pop n|main
push tmp@10
push tmp@9
None = func_call printff
pop tmp@9
pop tmp@10
tmp@11 = sconst@enter a number to output square root of it: 
push tmp@11
None = func_call printf
pop tmp@11
tmp@13 = sconst@%f
tmp@12 = addr(n|main)
push tmp@13
push tmp@12
None = func_call scanf
pop tmp@12
pop tmp@13
tmp@15 = sconst@value: %f\n
push n|main
tmp@14 = func_call sqrt
pop n|main
push tmp@15
push tmp@14
None = func_call printff
pop tmp@14
pop tmp@15
tmp@16 = sconst@enter a number to output ceil: 
push tmp@16
None = func_call printf
pop tmp@16
tmp@18 = sconst@%f
tmp@17 = addr(n|main)
push tmp@18
push tmp@17
None = func_call scanf
pop tmp@17
pop tmp@18
tmp@20 = sconst@value: %f\n
push n|main
tmp@19 = func_call ceil
pop n|main
push tmp@20
push tmp@19
None = func_call printff
pop tmp@19
pop tmp@20
tmp@21 = sconst@enter a number to output floor: 
push tmp@21
None = func_call printf
pop tmp@21
tmp@23 = sconst@%f
tmp@22 = addr(n|main)
push tmp@23
push tmp@22
None = func_call scanf
pop tmp@22
pop tmp@23
tmp@25 = sconst@value: %f\n
push n|main
tmp@24 = func_call floor
pop n|main
push tmp@25
push tmp@24
None = func_call printff
pop tmp@24
pop tmp@25
tmp@26 = sconst@enter a number to output cos: 
push tmp@26
None = func_call printf
pop tmp@26
tmp@28 = sconst@%f
tmp@27 = addr(n|main)
push tmp@28
push tmp@27
None = func_call scanf
pop tmp@27
pop tmp@28
tmp@30 = sconst@value: %f\n
push n|main
tmp@29 = func_call cos
pop n|main
push tmp@30
push tmp@29
None = func_call printff
pop tmp@29
pop tmp@30
tmp@31 = sconst@enter a number to output sin: 
push tmp@31
None = func_call printf
pop tmp@31
tmp@33 = sconst@%f
tmp@32 = addr(n|main)
push tmp@33
push tmp@32
None = func_call scanf
pop tmp@32
pop tmp@33
tmp@35 = sconst@value: %f\n
push n|main
tmp@34 = func_call sin
pop n|main
push tmp@35
push tmp@34
None = func_call printff
pop tmp@34
pop tmp@35
tmp@36 = sconst@enter a number to output tan: 
push tmp@36
None = func_call printf
pop tmp@36
tmp@38 = sconst@%f
tmp@37 = addr(n|main)
push tmp@38
push tmp@37
None = func_call scanf
pop tmp@37
pop tmp@38
tmp@40 = sconst@value: %f\n
push n|main
tmp@39 = func_call tan
pop n|main
push tmp@40
push tmp@39
None = func_call printff
pop tmp@39
pop tmp@40
tmp@41 = sconst@enter a number to output exp: 
push tmp@41
None = func_call printf
pop tmp@41
tmp@43 = sconst@%f
tmp@42 = addr(n|main)
push tmp@43
push tmp@42
None = func_call scanf
pop tmp@42
pop tmp@43
tmp@45 = sconst@value: %f\n
push n|main
tmp@44 = func_call exp
pop n|main
push tmp@45
push tmp@44
None = func_call printff
pop tmp@44
pop tmp@45
tmp@46 = sconst@enter a number to output log: 
push tmp@46
None = func_call printf
pop tmp@46
tmp@48 = sconst@%f
tmp@47 = addr(n|main)
push tmp@48
push tmp@47
None = func_call scanf
pop tmp@47
pop tmp@48
tmp@50 = sconst@value: %f\n
push n|main
tmp@49 = func_call log
pop n|main
push tmp@50
push tmp@49
None = func_call printff
pop tmp@49
pop tmp@50
tmp@51 = sconst@enter a number to output log2: 
push tmp@51
None = func_call printf
pop tmp@51
tmp@53 = sconst@%f
tmp@52 = addr(n|main)
push tmp@53
push tmp@52
None = func_call scanf
pop tmp@52
pop tmp@53
tmp@55 = sconst@value: %f\n
push n|main
tmp@54 = func_call log2
pop n|main
push tmp@55
push tmp@54
None = func_call printff
pop tmp@54
pop tmp@55
tmp@56 = sconst@enter a number to output log10: 
push tmp@56
None = func_call printf
pop tmp@56
tmp@58 = sconst@%f
tmp@57 = addr(n|main)
push tmp@58
push tmp@57
None = func_call scanf
pop tmp@57
pop tmp@58
tmp@60 = sconst@value: %f\n
push n|main
tmp@59 = func_call log10
pop n|main
push tmp@60
push tmp@59
None = func_call printff
pop tmp@59
pop tmp@60
return lconst@0
EndFunc
