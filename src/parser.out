Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BLOCK_COMMENT
    FALSE
    INLINE_COMMENT
    TRUE

Grammar

Rule 0     S' -> program
Rule 1     program -> translation_unit
Rule 2     translation_unit -> external_declaration
Rule 3     translation_unit -> translation_unit external_declaration
Rule 4     external_declaration -> function_definition
Rule 5     external_declaration -> declaration
Rule 6     function_definition -> declaration_specifiers declarator declaration_list compound_statement
Rule 7     function_definition -> declaration_specifiers declarator compound_statement
Rule 8     function_definition -> declarator declaration_list compound_statement
Rule 9     function_definition -> declarator compound_statement
Rule 10    primary_expression -> IDENTIFIER
Rule 11    primary_expression -> NULL
Rule 12    primary_expression -> INT_CONSTANT
Rule 13    primary_expression -> HEX_CONSTANT
Rule 14    primary_expression -> OCTAL_CONSTANT
Rule 15    primary_expression -> EXPONENT_CONSTANT
Rule 16    primary_expression -> REAL_CONSTANT
Rule 17    primary_expression -> CHAR_CONSTANT
Rule 18    primary_expression -> STR_CONSTANT
Rule 19    primary_expression -> L_PAREN expression R_PAREN
Rule 20    postfix_expression -> primary_expression
Rule 21    postfix_expression -> postfix_expression L_SQBR expression R_SQBR
Rule 22    postfix_expression -> postfix_expression L_PAREN R_PAREN
Rule 23    postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN
Rule 24    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 25    postfix_expression -> postfix_expression ARROW IDENTIFIER
Rule 26    postfix_expression -> postfix_expression INCREMENT
Rule 27    postfix_expression -> postfix_expression DECREMENT
Rule 28    argument_expression_list -> assignment_expression
Rule 29    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 30    unary_expression -> postfix_expression
Rule 31    unary_expression -> INCREMENT unary_expression
Rule 32    unary_expression -> DECREMENT unary_expression
Rule 33    unary_expression -> unary_operator cast_expression
Rule 34    unary_expression -> SIZEOF unary_expression
Rule 35    unary_expression -> SIZEOF L_PAREN type_name R_PAREN
Rule 36    unary_operator -> BITWISE_AND
Rule 37    unary_operator -> MULTIPLY
Rule 38    unary_operator -> ADD
Rule 39    unary_operator -> SUBSTRACT
Rule 40    unary_operator -> BITWISE_ONE_COMPLEMENT
Rule 41    unary_operator -> LOGICAL_NOT
Rule 42    cast_expression -> unary_expression
Rule 43    cast_expression -> L_PAREN type_specifier R_PAREN cast_expression
Rule 44    multiplicative_expression -> cast_expression
Rule 45    multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression
Rule 46    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 47    multiplicative_expression -> multiplicative_expression MODULUS cast_expression
Rule 48    additive_expression -> multiplicative_expression
Rule 49    additive_expression -> additive_expression ADD multiplicative_expression
Rule 50    additive_expression -> additive_expression SUBSTRACT multiplicative_expression
Rule 51    shift_expression -> additive_expression
Rule 52    shift_expression -> shift_expression LEFT_SHIFT additive_expression
Rule 53    shift_expression -> shift_expression RIGHT_SHIFT additive_expression
Rule 54    relational_expression -> shift_expression
Rule 55    relational_expression -> relational_expression LESS shift_expression
Rule 56    relational_expression -> relational_expression GREATER shift_expression
Rule 57    relational_expression -> relational_expression LESS_EQUALS shift_expression
Rule 58    relational_expression -> relational_expression GREATER_EQUALS shift_expression
Rule 59    equality_expression -> relational_expression
Rule 60    equality_expression -> equality_expression EQUALS relational_expression
Rule 61    equality_expression -> equality_expression NOT_EQUALS relational_expression
Rule 62    and_expression -> equality_expression
Rule 63    and_expression -> and_expression BITWISE_AND equality_expression
Rule 64    exclusive_or_expression -> and_expression
Rule 65    exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression
Rule 66    inclusive_or_expression -> exclusive_or_expression
Rule 67    inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression
Rule 68    logical_and_expression -> inclusive_or_expression
Rule 69    logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression
Rule 70    logical_or_expression -> logical_and_expression
Rule 71    logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression
Rule 72    conditional_expression -> logical_or_expression
Rule 73    conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression
Rule 74    assignment_expression -> conditional_expression
Rule 75    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 76    assignment_operator -> ASSIGNMENT
Rule 77    assignment_operator -> MULTIPLY_ASSIGNMENT
Rule 78    assignment_operator -> DIVIDE_ASSIGNMENT
Rule 79    assignment_operator -> MODULUS_ASSIGNMENT
Rule 80    assignment_operator -> ADD_ASSIGNMENT
Rule 81    assignment_operator -> SUBSTRACT_ASSIGNMENT
Rule 82    assignment_operator -> LEFT_SHIFT_ASSIGNMENT
Rule 83    assignment_operator -> RIGHT_SHIFT_ASSIGNMENT
Rule 84    assignment_operator -> BITWISE_AND_ASSIGNMENT
Rule 85    assignment_operator -> BITWISE_XOR_ASSIGNMENT
Rule 86    assignment_operator -> BITWISE_OR_ASSIGNMENT
Rule 87    expression -> assignment_expression
Rule 88    expression -> expression COMMA assignment_expression
Rule 89    constant_expression -> conditional_expression
Rule 90    declaration -> declaration_specifiers SEMI_COLON
Rule 91    declaration -> declaration_specifiers init_declarator_list SEMI_COLON
Rule 92    declaration_specifiers -> storage_class_specifier
Rule 93    declaration_specifiers -> storage_class_specifier declaration_specifiers
Rule 94    declaration_specifiers -> type_specifier
Rule 95    declaration_specifiers -> type_specifier declaration_specifiers
Rule 96    declaration_specifiers -> type_qualifier
Rule 97    declaration_specifiers -> type_qualifier declaration_specifiers
Rule 98    init_declarator_list -> init_declarator
Rule 99    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 100   init_declarator -> declarator
Rule 101   init_declarator -> declarator ASSIGNMENT initializer
Rule 102   storage_class_specifier -> TYPEDEF
Rule 103   storage_class_specifier -> EXTERN
Rule 104   storage_class_specifier -> STATIC
Rule 105   storage_class_specifier -> AUTO
Rule 106   storage_class_specifier -> REGISTER
Rule 107   type_specifier -> VOID
Rule 108   type_specifier -> CHAR
Rule 109   type_specifier -> SHORT
Rule 110   type_specifier -> INT
Rule 111   type_specifier -> LONG
Rule 112   type_specifier -> FLOAT
Rule 113   type_specifier -> DOUBLE
Rule 114   type_specifier -> SIGNED
Rule 115   type_specifier -> UNSIGNED
Rule 116   type_specifier -> struct_or_union_specifier
Rule 117   type_specifier -> enum_specifier
Rule 118   type_specifier -> BOOL
Rule 119   struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
Rule 120   struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES
Rule 121   struct_or_union_specifier -> struct_or_union IDENTIFIER
Rule 122   struct_or_union -> STRUCT
Rule 123   struct_or_union -> UNION
Rule 124   struct_declaration_list -> struct_declaration
Rule 125   struct_declaration_list -> struct_declaration_list struct_declaration
Rule 126   struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON
Rule 127   specifier_qualifier_list -> type_specifier specifier_qualifier_list
Rule 128   specifier_qualifier_list -> type_specifier
Rule 129   specifier_qualifier_list -> type_qualifier specifier_qualifier_list
Rule 130   specifier_qualifier_list -> type_qualifier
Rule 131   struct_declarator_list -> struct_declarator
Rule 132   struct_declarator_list -> struct_declarator_list COMMA struct_declarator
Rule 133   struct_declarator -> declarator
Rule 134   struct_declarator -> COLON constant_expression
Rule 135   struct_declarator -> declarator COLON constant_expression
Rule 136   enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES
Rule 137   enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
Rule 138   enum_specifier -> ENUM IDENTIFIER
Rule 139   enumerator_list -> enumerator
Rule 140   enumerator_list -> enumerator_list COMMA enumerator
Rule 141   enumerator -> IDENTIFIER
Rule 142   enumerator -> IDENTIFIER ASSIGNMENT constant_expression
Rule 143   type_qualifier -> CONST
Rule 144   type_qualifier -> VOLATILE
Rule 145   declarator -> pointer direct_declarator
Rule 146   declarator -> direct_declarator
Rule 147   direct_declarator -> IDENTIFIER
Rule 148   direct_declarator -> L_PAREN declarator R_PAREN
Rule 149   direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR
Rule 150   direct_declarator -> direct_declarator L_SQBR R_SQBR
Rule 151   direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN
Rule 152   direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN
Rule 153   direct_declarator -> direct_declarator L_PAREN R_PAREN
Rule 154   pointer -> MULTIPLY
Rule 155   pointer -> MULTIPLY type_qualifier_list
Rule 156   pointer -> MULTIPLY pointer
Rule 157   pointer -> MULTIPLY type_qualifier_list pointer
Rule 158   type_qualifier_list -> type_qualifier
Rule 159   type_qualifier_list -> type_qualifier_list type_qualifier
Rule 160   parameter_type_list -> parameter_declaration
Rule 161   parameter_type_list -> parameter_type_list COMMA parameter_declaration
Rule 162   parameter_declaration -> declaration_specifiers declarator
Rule 163   parameter_declaration -> declaration_specifiers abstract_declarator
Rule 164   parameter_declaration -> declaration_specifiers
Rule 165   identifier_list -> IDENTIFIER
Rule 166   identifier_list -> identifier_list COMMA IDENTIFIER
Rule 167   type_name -> specifier_qualifier_list
Rule 168   type_name -> specifier_qualifier_list abstract_declarator
Rule 169   abstract_declarator -> pointer
Rule 170   abstract_declarator -> direct_abstract_declarator
Rule 171   abstract_declarator -> pointer direct_abstract_declarator
Rule 172   direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN
Rule 173   direct_abstract_declarator -> L_SQBR R_SQBR
Rule 174   direct_abstract_declarator -> L_SQBR constant_expression R_SQBR
Rule 175   direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR
Rule 176   direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR
Rule 177   direct_abstract_declarator -> L_PAREN R_PAREN
Rule 178   direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN
Rule 179   direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN
Rule 180   direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
Rule 181   initializer -> assignment_expression
Rule 182   initializer -> L_BRACES initializer_list R_BRACES
Rule 183   initializer -> L_BRACES initializer_list COMMA R_BRACES
Rule 184   initializer_list -> initializer
Rule 185   initializer_list -> initializer_list COMMA initializer
Rule 186   statement -> labeled_statement
Rule 187   statement -> compound_statement
Rule 188   statement -> expression_statement
Rule 189   statement -> selection_statement
Rule 190   statement -> iteration_statement
Rule 191   statement -> jump_statement
Rule 192   labeled_statement -> IDENTIFIER COLON statement
Rule 193   labeled_statement -> CASE constant_expression COLON statement
Rule 194   labeled_statement -> DEFAULT COLON statement
Rule 195   compound_statement -> L_BRACES R_BRACES
Rule 196   compound_statement -> L_BRACES statement_list R_BRACES
Rule 197   compound_statement -> L_BRACES declaration_list R_BRACES
Rule 198   compound_statement -> L_BRACES declaration_list statement_list R_BRACES
Rule 199   declaration_list -> declaration
Rule 200   declaration_list -> declaration_list declaration
Rule 201   statement_list -> statement
Rule 202   statement_list -> statement_list statement
Rule 203   expression_statement -> SEMI_COLON
Rule 204   expression_statement -> expression SEMI_COLON
Rule 205   selection_statement -> IF L_PAREN expression R_PAREN statement
Rule 206   selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement
Rule 207   selection_statement -> SWITCH L_PAREN expression R_PAREN statement
Rule 208   iteration_statement -> WHILE L_PAREN expression R_PAREN statement
Rule 209   iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
Rule 210   iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement
Rule 211   iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
Rule 212   jump_statement -> GOTO IDENTIFIER SEMI_COLON
Rule 213   jump_statement -> CONTINUE SEMI_COLON
Rule 214   jump_statement -> BREAK SEMI_COLON
Rule 215   jump_statement -> RETURN SEMI_COLON
Rule 216   jump_statement -> RETURN expression SEMI_COLON

Terminals, with rules where they appear

ADD                  : 38 49
ADD_ASSIGNMENT       : 80
ARROW                : 25
ASSIGNMENT           : 76 101 142
AUTO                 : 105
BITWISE_AND          : 36 63
BITWISE_AND_ASSIGNMENT : 84
BITWISE_ONE_COMPLEMENT : 40
BITWISE_OR           : 67
BITWISE_OR_ASSIGNMENT : 86
BITWISE_XOR          : 65
BITWISE_XOR_ASSIGNMENT : 85
BLOCK_COMMENT        : 
BOOL                 : 118
BREAK                : 214
CASE                 : 193
CHAR                 : 108
CHAR_CONSTANT        : 17
COLON                : 73 134 135 192 193 194
COMMA                : 29 88 99 132 140 161 166 183 185
CONST                : 143
CONTINUE             : 213
DECREMENT            : 27 32
DEFAULT              : 194
DIVIDE               : 46
DIVIDE_ASSIGNMENT    : 78
DO                   : 209
DOT                  : 24
DOUBLE               : 113
ELSE                 : 206
ENUM                 : 136 137 138
EQUALS               : 60
EXPONENT_CONSTANT    : 15
EXTERN               : 103
FALSE                : 
FLOAT                : 112
FOR                  : 210 211
GOTO                 : 212
GREATER              : 56
GREATER_EQUALS       : 58
HEX_CONSTANT         : 13
IDENTIFIER           : 10 24 25 119 121 137 138 141 142 147 165 166 192 212
IF                   : 205 206
INCREMENT            : 26 31
INLINE_COMMENT       : 
INT                  : 110
INT_CONSTANT         : 12
LEFT_SHIFT           : 52
LEFT_SHIFT_ASSIGNMENT : 82
LESS                 : 55
LESS_EQUALS          : 57
LOGICAL_AND          : 69
LOGICAL_NOT          : 41
LOGICAL_OR           : 71
LONG                 : 111
L_BRACES             : 119 120 136 137 182 183 195 196 197 198
L_PAREN              : 19 22 23 35 43 148 151 152 153 172 177 178 179 180 205 206 207 208 209 210 211
L_SQBR               : 21 149 150 173 174 175 176
MODULUS              : 47
MODULUS_ASSIGNMENT   : 79
MULTIPLY             : 37 45 154 155 156 157
MULTIPLY_ASSIGNMENT  : 77
NOT_EQUALS           : 61
NULL                 : 11
OCTAL_CONSTANT       : 14
QUES_MARK            : 73
REAL_CONSTANT        : 16
REGISTER             : 106
RETURN               : 215 216
RIGHT_SHIFT          : 53
RIGHT_SHIFT_ASSIGNMENT : 83
R_BRACES             : 119 120 136 137 182 183 195 196 197 198
R_PAREN              : 19 22 23 35 43 148 151 152 153 172 177 178 179 180 205 206 207 208 209 210 211
R_SQBR               : 21 149 150 173 174 175 176
SEMI_COLON           : 90 91 126 203 204 209 212 213 214 215 216
SHORT                : 109
SIGNED               : 114
SIZEOF               : 34 35
STATIC               : 104
STRUCT               : 122
STR_CONSTANT         : 18
SUBSTRACT            : 39 50
SUBSTRACT_ASSIGNMENT : 81
SWITCH               : 207
TRUE                 : 
TYPEDEF              : 102
UNION                : 123
UNSIGNED             : 115
VOID                 : 107
VOLATILE             : 144
WHILE                : 208 209
error                : 

Nonterminals, with rules where they appear

abstract_declarator  : 163 168 172
additive_expression  : 49 50 51 52 53
and_expression       : 63 64 65
argument_expression_list : 23 29
assignment_expression : 28 29 75 87 88 181
assignment_operator  : 75
cast_expression      : 33 43 44 45 46 47
compound_statement   : 6 7 8 9 187
conditional_expression : 73 74 89
constant_expression  : 134 135 142 149 174 176 193
declaration          : 5 199 200
declaration_list     : 6 8 197 198 200
declaration_specifiers : 6 7 90 91 93 95 97 162 163 164
declarator           : 6 7 8 9 100 101 133 135 148 162
direct_abstract_declarator : 170 171 175 176 179 180
direct_declarator    : 145 146 149 150 151 152 153
enum_specifier       : 117
enumerator           : 139 140
enumerator_list      : 136 137 140
equality_expression  : 60 61 62 63
exclusive_or_expression : 65 66 67
expression           : 19 21 73 88 204 205 206 207 208 209 211 216
expression_statement : 188 210 210 211 211
external_declaration : 2 3
function_definition  : 4
identifier_list      : 152 166
inclusive_or_expression : 67 68 69
init_declarator      : 98 99
init_declarator_list : 91 99
initializer          : 101 184 185
initializer_list     : 182 183 185
iteration_statement  : 190
jump_statement       : 191
labeled_statement    : 186
logical_and_expression : 69 70 71
logical_or_expression : 71 72 73
multiplicative_expression : 45 46 47 48 49 50
parameter_declaration : 160 161
parameter_type_list  : 151 161 178 180
pointer              : 145 156 157 169 171
postfix_expression   : 21 22 23 24 25 26 27 30
primary_expression   : 20
program              : 0
relational_expression : 55 56 57 58 59 60 61
selection_statement  : 189
shift_expression     : 52 53 54 55 56 57 58
specifier_qualifier_list : 126 127 129 167 168
statement            : 192 193 194 201 202 205 206 206 207 208 209 210 211
statement_list       : 196 198 202
storage_class_specifier : 92 93
struct_declaration   : 124 125
struct_declaration_list : 119 120 125
struct_declarator    : 131 132
struct_declarator_list : 126 132
struct_or_union      : 119 120 121
struct_or_union_specifier : 116
translation_unit     : 1 3
type_name            : 35
type_qualifier       : 96 97 129 130 158 159
type_qualifier_list  : 155 157 159
type_specifier       : 43 94 95 127 128
unary_expression     : 31 32 34 42 75
unary_operator       : 33

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . translation_unit
    (2) translation_unit -> . external_declaration
    (3) translation_unit -> . translation_unit external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (7) function_definition -> . declaration_specifiers declarator compound_statement
    (8) function_definition -> . declarator declaration_list compound_statement
    (9) function_definition -> . declarator compound_statement
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    program                        shift and go to state 1
    translation_unit               shift and go to state 2
    external_declaration           shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declaration_specifiers         shift and go to state 6
    declarator                     shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 1

    (0) S' -> program .



state 2

    (1) program -> translation_unit .
    (3) translation_unit -> translation_unit . external_declaration
    (4) external_declaration -> . function_definition
    (5) external_declaration -> . declaration
    (6) function_definition -> . declaration_specifiers declarator declaration_list compound_statement
    (7) function_definition -> . declaration_specifiers declarator compound_statement
    (8) function_definition -> . declarator declaration_list compound_statement
    (9) function_definition -> . declarator compound_statement
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    $end            reduce using rule 1 (program -> translation_unit .)
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    external_declaration           shift and go to state 39
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    declaration_specifiers         shift and go to state 6
    declarator                     shift and go to state 7
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 3

    (2) translation_unit -> external_declaration .

    TYPEDEF         reduce using rule 2 (translation_unit -> external_declaration .)
    EXTERN          reduce using rule 2 (translation_unit -> external_declaration .)
    STATIC          reduce using rule 2 (translation_unit -> external_declaration .)
    AUTO            reduce using rule 2 (translation_unit -> external_declaration .)
    REGISTER        reduce using rule 2 (translation_unit -> external_declaration .)
    VOID            reduce using rule 2 (translation_unit -> external_declaration .)
    CHAR            reduce using rule 2 (translation_unit -> external_declaration .)
    SHORT           reduce using rule 2 (translation_unit -> external_declaration .)
    INT             reduce using rule 2 (translation_unit -> external_declaration .)
    LONG            reduce using rule 2 (translation_unit -> external_declaration .)
    FLOAT           reduce using rule 2 (translation_unit -> external_declaration .)
    DOUBLE          reduce using rule 2 (translation_unit -> external_declaration .)
    SIGNED          reduce using rule 2 (translation_unit -> external_declaration .)
    UNSIGNED        reduce using rule 2 (translation_unit -> external_declaration .)
    BOOL            reduce using rule 2 (translation_unit -> external_declaration .)
    CONST           reduce using rule 2 (translation_unit -> external_declaration .)
    VOLATILE        reduce using rule 2 (translation_unit -> external_declaration .)
    MULTIPLY        reduce using rule 2 (translation_unit -> external_declaration .)
    IDENTIFIER      reduce using rule 2 (translation_unit -> external_declaration .)
    L_PAREN         reduce using rule 2 (translation_unit -> external_declaration .)
    ENUM            reduce using rule 2 (translation_unit -> external_declaration .)
    STRUCT          reduce using rule 2 (translation_unit -> external_declaration .)
    UNION           reduce using rule 2 (translation_unit -> external_declaration .)
    $end            reduce using rule 2 (translation_unit -> external_declaration .)


state 4

    (4) external_declaration -> function_definition .

    TYPEDEF         reduce using rule 4 (external_declaration -> function_definition .)
    EXTERN          reduce using rule 4 (external_declaration -> function_definition .)
    STATIC          reduce using rule 4 (external_declaration -> function_definition .)
    AUTO            reduce using rule 4 (external_declaration -> function_definition .)
    REGISTER        reduce using rule 4 (external_declaration -> function_definition .)
    VOID            reduce using rule 4 (external_declaration -> function_definition .)
    CHAR            reduce using rule 4 (external_declaration -> function_definition .)
    SHORT           reduce using rule 4 (external_declaration -> function_definition .)
    INT             reduce using rule 4 (external_declaration -> function_definition .)
    LONG            reduce using rule 4 (external_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (external_declaration -> function_definition .)
    DOUBLE          reduce using rule 4 (external_declaration -> function_definition .)
    SIGNED          reduce using rule 4 (external_declaration -> function_definition .)
    UNSIGNED        reduce using rule 4 (external_declaration -> function_definition .)
    BOOL            reduce using rule 4 (external_declaration -> function_definition .)
    CONST           reduce using rule 4 (external_declaration -> function_definition .)
    VOLATILE        reduce using rule 4 (external_declaration -> function_definition .)
    MULTIPLY        reduce using rule 4 (external_declaration -> function_definition .)
    IDENTIFIER      reduce using rule 4 (external_declaration -> function_definition .)
    L_PAREN         reduce using rule 4 (external_declaration -> function_definition .)
    ENUM            reduce using rule 4 (external_declaration -> function_definition .)
    STRUCT          reduce using rule 4 (external_declaration -> function_definition .)
    UNION           reduce using rule 4 (external_declaration -> function_definition .)
    $end            reduce using rule 4 (external_declaration -> function_definition .)


state 5

    (5) external_declaration -> declaration .

    TYPEDEF         reduce using rule 5 (external_declaration -> declaration .)
    EXTERN          reduce using rule 5 (external_declaration -> declaration .)
    STATIC          reduce using rule 5 (external_declaration -> declaration .)
    AUTO            reduce using rule 5 (external_declaration -> declaration .)
    REGISTER        reduce using rule 5 (external_declaration -> declaration .)
    VOID            reduce using rule 5 (external_declaration -> declaration .)
    CHAR            reduce using rule 5 (external_declaration -> declaration .)
    SHORT           reduce using rule 5 (external_declaration -> declaration .)
    INT             reduce using rule 5 (external_declaration -> declaration .)
    LONG            reduce using rule 5 (external_declaration -> declaration .)
    FLOAT           reduce using rule 5 (external_declaration -> declaration .)
    DOUBLE          reduce using rule 5 (external_declaration -> declaration .)
    SIGNED          reduce using rule 5 (external_declaration -> declaration .)
    UNSIGNED        reduce using rule 5 (external_declaration -> declaration .)
    BOOL            reduce using rule 5 (external_declaration -> declaration .)
    CONST           reduce using rule 5 (external_declaration -> declaration .)
    VOLATILE        reduce using rule 5 (external_declaration -> declaration .)
    MULTIPLY        reduce using rule 5 (external_declaration -> declaration .)
    IDENTIFIER      reduce using rule 5 (external_declaration -> declaration .)
    L_PAREN         reduce using rule 5 (external_declaration -> declaration .)
    ENUM            reduce using rule 5 (external_declaration -> declaration .)
    STRUCT          reduce using rule 5 (external_declaration -> declaration .)
    UNION           reduce using rule 5 (external_declaration -> declaration .)
    $end            reduce using rule 5 (external_declaration -> declaration .)


state 6

    (6) function_definition -> declaration_specifiers . declarator declaration_list compound_statement
    (7) function_definition -> declaration_specifiers . declarator compound_statement
    (90) declaration -> declaration_specifiers . SEMI_COLON
    (91) declaration -> declaration_specifiers . init_declarator_list SEMI_COLON
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (98) init_declarator_list -> . init_declarator
    (99) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN
    (100) init_declarator -> . declarator
    (101) init_declarator -> . declarator ASSIGNMENT initializer

    SEMI_COLON      shift and go to state 41
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34

    declarator                     shift and go to state 40
    init_declarator_list           shift and go to state 42
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12
    init_declarator                shift and go to state 43

state 7

    (8) function_definition -> declarator . declaration_list compound_statement
    (9) function_definition -> declarator . compound_statement
    (199) declaration_list -> . declaration
    (200) declaration_list -> . declaration_list declaration
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    L_BRACES        shift and go to state 47
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    declaration_list               shift and go to state 44
    compound_statement             shift and go to state 45
    declaration                    shift and go to state 46
    declaration_specifiers         shift and go to state 48
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 8

    (92) declaration_specifiers -> storage_class_specifier .
    (93) declaration_specifiers -> storage_class_specifier . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    SEMI_COLON      reduce using rule 92 (declaration_specifiers -> storage_class_specifier .)
    MULTIPLY        reduce using rule 92 (declaration_specifiers -> storage_class_specifier .)
    IDENTIFIER      reduce using rule 92 (declaration_specifiers -> storage_class_specifier .)
    L_PAREN         reduce using rule 92 (declaration_specifiers -> storage_class_specifier .)
    L_SQBR          reduce using rule 92 (declaration_specifiers -> storage_class_specifier .)
    R_PAREN         reduce using rule 92 (declaration_specifiers -> storage_class_specifier .)
    COMMA           reduce using rule 92 (declaration_specifiers -> storage_class_specifier .)
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    storage_class_specifier        shift and go to state 8
    declaration_specifiers         shift and go to state 49
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 9

    (94) declaration_specifiers -> type_specifier .
    (95) declaration_specifiers -> type_specifier . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    SEMI_COLON      reduce using rule 94 (declaration_specifiers -> type_specifier .)
    MULTIPLY        reduce using rule 94 (declaration_specifiers -> type_specifier .)
    IDENTIFIER      reduce using rule 94 (declaration_specifiers -> type_specifier .)
    L_PAREN         reduce using rule 94 (declaration_specifiers -> type_specifier .)
    L_SQBR          reduce using rule 94 (declaration_specifiers -> type_specifier .)
    R_PAREN         reduce using rule 94 (declaration_specifiers -> type_specifier .)
    COMMA           reduce using rule 94 (declaration_specifiers -> type_specifier .)
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    type_specifier                 shift and go to state 9
    declaration_specifiers         shift and go to state 50
    storage_class_specifier        shift and go to state 8
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 10

    (96) declaration_specifiers -> type_qualifier .
    (97) declaration_specifiers -> type_qualifier . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    SEMI_COLON      reduce using rule 96 (declaration_specifiers -> type_qualifier .)
    MULTIPLY        reduce using rule 96 (declaration_specifiers -> type_qualifier .)
    IDENTIFIER      reduce using rule 96 (declaration_specifiers -> type_qualifier .)
    L_PAREN         reduce using rule 96 (declaration_specifiers -> type_qualifier .)
    L_SQBR          reduce using rule 96 (declaration_specifiers -> type_qualifier .)
    R_PAREN         reduce using rule 96 (declaration_specifiers -> type_qualifier .)
    COMMA           reduce using rule 96 (declaration_specifiers -> type_qualifier .)
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    type_qualifier                 shift and go to state 10
    declaration_specifiers         shift and go to state 51
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 11

    (145) declarator -> pointer . direct_declarator
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN

    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34

    direct_declarator              shift and go to state 52

state 12

    (146) declarator -> direct_declarator .
    (149) direct_declarator -> direct_declarator . L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> direct_declarator . L_SQBR R_SQBR
    (151) direct_declarator -> direct_declarator . L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> direct_declarator . L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> direct_declarator . L_PAREN R_PAREN

    L_BRACES        reduce using rule 146 (declarator -> direct_declarator .)
    TYPEDEF         reduce using rule 146 (declarator -> direct_declarator .)
    EXTERN          reduce using rule 146 (declarator -> direct_declarator .)
    STATIC          reduce using rule 146 (declarator -> direct_declarator .)
    AUTO            reduce using rule 146 (declarator -> direct_declarator .)
    REGISTER        reduce using rule 146 (declarator -> direct_declarator .)
    VOID            reduce using rule 146 (declarator -> direct_declarator .)
    CHAR            reduce using rule 146 (declarator -> direct_declarator .)
    SHORT           reduce using rule 146 (declarator -> direct_declarator .)
    INT             reduce using rule 146 (declarator -> direct_declarator .)
    LONG            reduce using rule 146 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 146 (declarator -> direct_declarator .)
    DOUBLE          reduce using rule 146 (declarator -> direct_declarator .)
    SIGNED          reduce using rule 146 (declarator -> direct_declarator .)
    UNSIGNED        reduce using rule 146 (declarator -> direct_declarator .)
    BOOL            reduce using rule 146 (declarator -> direct_declarator .)
    CONST           reduce using rule 146 (declarator -> direct_declarator .)
    VOLATILE        reduce using rule 146 (declarator -> direct_declarator .)
    ENUM            reduce using rule 146 (declarator -> direct_declarator .)
    STRUCT          reduce using rule 146 (declarator -> direct_declarator .)
    UNION           reduce using rule 146 (declarator -> direct_declarator .)
    ASSIGNMENT      reduce using rule 146 (declarator -> direct_declarator .)
    SEMI_COLON      reduce using rule 146 (declarator -> direct_declarator .)
    COMMA           reduce using rule 146 (declarator -> direct_declarator .)
    R_PAREN         reduce using rule 146 (declarator -> direct_declarator .)
    COLON           reduce using rule 146 (declarator -> direct_declarator .)
    L_SQBR          shift and go to state 53
    L_PAREN         shift and go to state 54


state 13

    (102) storage_class_specifier -> TYPEDEF .

    TYPEDEF         reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    EXTERN          reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    STATIC          reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    AUTO            reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    REGISTER        reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    VOID            reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    CHAR            reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    SHORT           reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    INT             reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    LONG            reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    FLOAT           reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    DOUBLE          reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    SIGNED          reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    UNSIGNED        reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    BOOL            reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    CONST           reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    VOLATILE        reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    ENUM            reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    STRUCT          reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    UNION           reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    SEMI_COLON      reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    MULTIPLY        reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    IDENTIFIER      reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    L_PAREN         reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    L_SQBR          reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    R_PAREN         reduce using rule 102 (storage_class_specifier -> TYPEDEF .)
    COMMA           reduce using rule 102 (storage_class_specifier -> TYPEDEF .)


state 14

    (103) storage_class_specifier -> EXTERN .

    TYPEDEF         reduce using rule 103 (storage_class_specifier -> EXTERN .)
    EXTERN          reduce using rule 103 (storage_class_specifier -> EXTERN .)
    STATIC          reduce using rule 103 (storage_class_specifier -> EXTERN .)
    AUTO            reduce using rule 103 (storage_class_specifier -> EXTERN .)
    REGISTER        reduce using rule 103 (storage_class_specifier -> EXTERN .)
    VOID            reduce using rule 103 (storage_class_specifier -> EXTERN .)
    CHAR            reduce using rule 103 (storage_class_specifier -> EXTERN .)
    SHORT           reduce using rule 103 (storage_class_specifier -> EXTERN .)
    INT             reduce using rule 103 (storage_class_specifier -> EXTERN .)
    LONG            reduce using rule 103 (storage_class_specifier -> EXTERN .)
    FLOAT           reduce using rule 103 (storage_class_specifier -> EXTERN .)
    DOUBLE          reduce using rule 103 (storage_class_specifier -> EXTERN .)
    SIGNED          reduce using rule 103 (storage_class_specifier -> EXTERN .)
    UNSIGNED        reduce using rule 103 (storage_class_specifier -> EXTERN .)
    BOOL            reduce using rule 103 (storage_class_specifier -> EXTERN .)
    CONST           reduce using rule 103 (storage_class_specifier -> EXTERN .)
    VOLATILE        reduce using rule 103 (storage_class_specifier -> EXTERN .)
    ENUM            reduce using rule 103 (storage_class_specifier -> EXTERN .)
    STRUCT          reduce using rule 103 (storage_class_specifier -> EXTERN .)
    UNION           reduce using rule 103 (storage_class_specifier -> EXTERN .)
    SEMI_COLON      reduce using rule 103 (storage_class_specifier -> EXTERN .)
    MULTIPLY        reduce using rule 103 (storage_class_specifier -> EXTERN .)
    IDENTIFIER      reduce using rule 103 (storage_class_specifier -> EXTERN .)
    L_PAREN         reduce using rule 103 (storage_class_specifier -> EXTERN .)
    L_SQBR          reduce using rule 103 (storage_class_specifier -> EXTERN .)
    R_PAREN         reduce using rule 103 (storage_class_specifier -> EXTERN .)
    COMMA           reduce using rule 103 (storage_class_specifier -> EXTERN .)


state 15

    (104) storage_class_specifier -> STATIC .

    TYPEDEF         reduce using rule 104 (storage_class_specifier -> STATIC .)
    EXTERN          reduce using rule 104 (storage_class_specifier -> STATIC .)
    STATIC          reduce using rule 104 (storage_class_specifier -> STATIC .)
    AUTO            reduce using rule 104 (storage_class_specifier -> STATIC .)
    REGISTER        reduce using rule 104 (storage_class_specifier -> STATIC .)
    VOID            reduce using rule 104 (storage_class_specifier -> STATIC .)
    CHAR            reduce using rule 104 (storage_class_specifier -> STATIC .)
    SHORT           reduce using rule 104 (storage_class_specifier -> STATIC .)
    INT             reduce using rule 104 (storage_class_specifier -> STATIC .)
    LONG            reduce using rule 104 (storage_class_specifier -> STATIC .)
    FLOAT           reduce using rule 104 (storage_class_specifier -> STATIC .)
    DOUBLE          reduce using rule 104 (storage_class_specifier -> STATIC .)
    SIGNED          reduce using rule 104 (storage_class_specifier -> STATIC .)
    UNSIGNED        reduce using rule 104 (storage_class_specifier -> STATIC .)
    BOOL            reduce using rule 104 (storage_class_specifier -> STATIC .)
    CONST           reduce using rule 104 (storage_class_specifier -> STATIC .)
    VOLATILE        reduce using rule 104 (storage_class_specifier -> STATIC .)
    ENUM            reduce using rule 104 (storage_class_specifier -> STATIC .)
    STRUCT          reduce using rule 104 (storage_class_specifier -> STATIC .)
    UNION           reduce using rule 104 (storage_class_specifier -> STATIC .)
    SEMI_COLON      reduce using rule 104 (storage_class_specifier -> STATIC .)
    MULTIPLY        reduce using rule 104 (storage_class_specifier -> STATIC .)
    IDENTIFIER      reduce using rule 104 (storage_class_specifier -> STATIC .)
    L_PAREN         reduce using rule 104 (storage_class_specifier -> STATIC .)
    L_SQBR          reduce using rule 104 (storage_class_specifier -> STATIC .)
    R_PAREN         reduce using rule 104 (storage_class_specifier -> STATIC .)
    COMMA           reduce using rule 104 (storage_class_specifier -> STATIC .)


state 16

    (105) storage_class_specifier -> AUTO .

    TYPEDEF         reduce using rule 105 (storage_class_specifier -> AUTO .)
    EXTERN          reduce using rule 105 (storage_class_specifier -> AUTO .)
    STATIC          reduce using rule 105 (storage_class_specifier -> AUTO .)
    AUTO            reduce using rule 105 (storage_class_specifier -> AUTO .)
    REGISTER        reduce using rule 105 (storage_class_specifier -> AUTO .)
    VOID            reduce using rule 105 (storage_class_specifier -> AUTO .)
    CHAR            reduce using rule 105 (storage_class_specifier -> AUTO .)
    SHORT           reduce using rule 105 (storage_class_specifier -> AUTO .)
    INT             reduce using rule 105 (storage_class_specifier -> AUTO .)
    LONG            reduce using rule 105 (storage_class_specifier -> AUTO .)
    FLOAT           reduce using rule 105 (storage_class_specifier -> AUTO .)
    DOUBLE          reduce using rule 105 (storage_class_specifier -> AUTO .)
    SIGNED          reduce using rule 105 (storage_class_specifier -> AUTO .)
    UNSIGNED        reduce using rule 105 (storage_class_specifier -> AUTO .)
    BOOL            reduce using rule 105 (storage_class_specifier -> AUTO .)
    CONST           reduce using rule 105 (storage_class_specifier -> AUTO .)
    VOLATILE        reduce using rule 105 (storage_class_specifier -> AUTO .)
    ENUM            reduce using rule 105 (storage_class_specifier -> AUTO .)
    STRUCT          reduce using rule 105 (storage_class_specifier -> AUTO .)
    UNION           reduce using rule 105 (storage_class_specifier -> AUTO .)
    SEMI_COLON      reduce using rule 105 (storage_class_specifier -> AUTO .)
    MULTIPLY        reduce using rule 105 (storage_class_specifier -> AUTO .)
    IDENTIFIER      reduce using rule 105 (storage_class_specifier -> AUTO .)
    L_PAREN         reduce using rule 105 (storage_class_specifier -> AUTO .)
    L_SQBR          reduce using rule 105 (storage_class_specifier -> AUTO .)
    R_PAREN         reduce using rule 105 (storage_class_specifier -> AUTO .)
    COMMA           reduce using rule 105 (storage_class_specifier -> AUTO .)


state 17

    (106) storage_class_specifier -> REGISTER .

    TYPEDEF         reduce using rule 106 (storage_class_specifier -> REGISTER .)
    EXTERN          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    STATIC          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    AUTO            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    REGISTER        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    VOID            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    CHAR            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    SHORT           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    INT             reduce using rule 106 (storage_class_specifier -> REGISTER .)
    LONG            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    FLOAT           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    DOUBLE          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    SIGNED          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    UNSIGNED        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    BOOL            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    CONST           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    VOLATILE        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    ENUM            reduce using rule 106 (storage_class_specifier -> REGISTER .)
    STRUCT          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    UNION           reduce using rule 106 (storage_class_specifier -> REGISTER .)
    SEMI_COLON      reduce using rule 106 (storage_class_specifier -> REGISTER .)
    MULTIPLY        reduce using rule 106 (storage_class_specifier -> REGISTER .)
    IDENTIFIER      reduce using rule 106 (storage_class_specifier -> REGISTER .)
    L_PAREN         reduce using rule 106 (storage_class_specifier -> REGISTER .)
    L_SQBR          reduce using rule 106 (storage_class_specifier -> REGISTER .)
    R_PAREN         reduce using rule 106 (storage_class_specifier -> REGISTER .)
    COMMA           reduce using rule 106 (storage_class_specifier -> REGISTER .)


state 18

    (107) type_specifier -> VOID .

    TYPEDEF         reduce using rule 107 (type_specifier -> VOID .)
    EXTERN          reduce using rule 107 (type_specifier -> VOID .)
    STATIC          reduce using rule 107 (type_specifier -> VOID .)
    AUTO            reduce using rule 107 (type_specifier -> VOID .)
    REGISTER        reduce using rule 107 (type_specifier -> VOID .)
    VOID            reduce using rule 107 (type_specifier -> VOID .)
    CHAR            reduce using rule 107 (type_specifier -> VOID .)
    SHORT           reduce using rule 107 (type_specifier -> VOID .)
    INT             reduce using rule 107 (type_specifier -> VOID .)
    LONG            reduce using rule 107 (type_specifier -> VOID .)
    FLOAT           reduce using rule 107 (type_specifier -> VOID .)
    DOUBLE          reduce using rule 107 (type_specifier -> VOID .)
    SIGNED          reduce using rule 107 (type_specifier -> VOID .)
    UNSIGNED        reduce using rule 107 (type_specifier -> VOID .)
    BOOL            reduce using rule 107 (type_specifier -> VOID .)
    CONST           reduce using rule 107 (type_specifier -> VOID .)
    VOLATILE        reduce using rule 107 (type_specifier -> VOID .)
    ENUM            reduce using rule 107 (type_specifier -> VOID .)
    STRUCT          reduce using rule 107 (type_specifier -> VOID .)
    UNION           reduce using rule 107 (type_specifier -> VOID .)
    SEMI_COLON      reduce using rule 107 (type_specifier -> VOID .)
    MULTIPLY        reduce using rule 107 (type_specifier -> VOID .)
    IDENTIFIER      reduce using rule 107 (type_specifier -> VOID .)
    L_PAREN         reduce using rule 107 (type_specifier -> VOID .)
    L_SQBR          reduce using rule 107 (type_specifier -> VOID .)
    R_PAREN         reduce using rule 107 (type_specifier -> VOID .)
    COMMA           reduce using rule 107 (type_specifier -> VOID .)
    COLON           reduce using rule 107 (type_specifier -> VOID .)


state 19

    (108) type_specifier -> CHAR .

    TYPEDEF         reduce using rule 108 (type_specifier -> CHAR .)
    EXTERN          reduce using rule 108 (type_specifier -> CHAR .)
    STATIC          reduce using rule 108 (type_specifier -> CHAR .)
    AUTO            reduce using rule 108 (type_specifier -> CHAR .)
    REGISTER        reduce using rule 108 (type_specifier -> CHAR .)
    VOID            reduce using rule 108 (type_specifier -> CHAR .)
    CHAR            reduce using rule 108 (type_specifier -> CHAR .)
    SHORT           reduce using rule 108 (type_specifier -> CHAR .)
    INT             reduce using rule 108 (type_specifier -> CHAR .)
    LONG            reduce using rule 108 (type_specifier -> CHAR .)
    FLOAT           reduce using rule 108 (type_specifier -> CHAR .)
    DOUBLE          reduce using rule 108 (type_specifier -> CHAR .)
    SIGNED          reduce using rule 108 (type_specifier -> CHAR .)
    UNSIGNED        reduce using rule 108 (type_specifier -> CHAR .)
    BOOL            reduce using rule 108 (type_specifier -> CHAR .)
    CONST           reduce using rule 108 (type_specifier -> CHAR .)
    VOLATILE        reduce using rule 108 (type_specifier -> CHAR .)
    ENUM            reduce using rule 108 (type_specifier -> CHAR .)
    STRUCT          reduce using rule 108 (type_specifier -> CHAR .)
    UNION           reduce using rule 108 (type_specifier -> CHAR .)
    SEMI_COLON      reduce using rule 108 (type_specifier -> CHAR .)
    MULTIPLY        reduce using rule 108 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 108 (type_specifier -> CHAR .)
    L_PAREN         reduce using rule 108 (type_specifier -> CHAR .)
    L_SQBR          reduce using rule 108 (type_specifier -> CHAR .)
    R_PAREN         reduce using rule 108 (type_specifier -> CHAR .)
    COMMA           reduce using rule 108 (type_specifier -> CHAR .)
    COLON           reduce using rule 108 (type_specifier -> CHAR .)


state 20

    (109) type_specifier -> SHORT .

    TYPEDEF         reduce using rule 109 (type_specifier -> SHORT .)
    EXTERN          reduce using rule 109 (type_specifier -> SHORT .)
    STATIC          reduce using rule 109 (type_specifier -> SHORT .)
    AUTO            reduce using rule 109 (type_specifier -> SHORT .)
    REGISTER        reduce using rule 109 (type_specifier -> SHORT .)
    VOID            reduce using rule 109 (type_specifier -> SHORT .)
    CHAR            reduce using rule 109 (type_specifier -> SHORT .)
    SHORT           reduce using rule 109 (type_specifier -> SHORT .)
    INT             reduce using rule 109 (type_specifier -> SHORT .)
    LONG            reduce using rule 109 (type_specifier -> SHORT .)
    FLOAT           reduce using rule 109 (type_specifier -> SHORT .)
    DOUBLE          reduce using rule 109 (type_specifier -> SHORT .)
    SIGNED          reduce using rule 109 (type_specifier -> SHORT .)
    UNSIGNED        reduce using rule 109 (type_specifier -> SHORT .)
    BOOL            reduce using rule 109 (type_specifier -> SHORT .)
    CONST           reduce using rule 109 (type_specifier -> SHORT .)
    VOLATILE        reduce using rule 109 (type_specifier -> SHORT .)
    ENUM            reduce using rule 109 (type_specifier -> SHORT .)
    STRUCT          reduce using rule 109 (type_specifier -> SHORT .)
    UNION           reduce using rule 109 (type_specifier -> SHORT .)
    SEMI_COLON      reduce using rule 109 (type_specifier -> SHORT .)
    MULTIPLY        reduce using rule 109 (type_specifier -> SHORT .)
    IDENTIFIER      reduce using rule 109 (type_specifier -> SHORT .)
    L_PAREN         reduce using rule 109 (type_specifier -> SHORT .)
    L_SQBR          reduce using rule 109 (type_specifier -> SHORT .)
    R_PAREN         reduce using rule 109 (type_specifier -> SHORT .)
    COMMA           reduce using rule 109 (type_specifier -> SHORT .)
    COLON           reduce using rule 109 (type_specifier -> SHORT .)


state 21

    (110) type_specifier -> INT .

    TYPEDEF         reduce using rule 110 (type_specifier -> INT .)
    EXTERN          reduce using rule 110 (type_specifier -> INT .)
    STATIC          reduce using rule 110 (type_specifier -> INT .)
    AUTO            reduce using rule 110 (type_specifier -> INT .)
    REGISTER        reduce using rule 110 (type_specifier -> INT .)
    VOID            reduce using rule 110 (type_specifier -> INT .)
    CHAR            reduce using rule 110 (type_specifier -> INT .)
    SHORT           reduce using rule 110 (type_specifier -> INT .)
    INT             reduce using rule 110 (type_specifier -> INT .)
    LONG            reduce using rule 110 (type_specifier -> INT .)
    FLOAT           reduce using rule 110 (type_specifier -> INT .)
    DOUBLE          reduce using rule 110 (type_specifier -> INT .)
    SIGNED          reduce using rule 110 (type_specifier -> INT .)
    UNSIGNED        reduce using rule 110 (type_specifier -> INT .)
    BOOL            reduce using rule 110 (type_specifier -> INT .)
    CONST           reduce using rule 110 (type_specifier -> INT .)
    VOLATILE        reduce using rule 110 (type_specifier -> INT .)
    ENUM            reduce using rule 110 (type_specifier -> INT .)
    STRUCT          reduce using rule 110 (type_specifier -> INT .)
    UNION           reduce using rule 110 (type_specifier -> INT .)
    SEMI_COLON      reduce using rule 110 (type_specifier -> INT .)
    MULTIPLY        reduce using rule 110 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 110 (type_specifier -> INT .)
    L_PAREN         reduce using rule 110 (type_specifier -> INT .)
    L_SQBR          reduce using rule 110 (type_specifier -> INT .)
    R_PAREN         reduce using rule 110 (type_specifier -> INT .)
    COMMA           reduce using rule 110 (type_specifier -> INT .)
    COLON           reduce using rule 110 (type_specifier -> INT .)


state 22

    (111) type_specifier -> LONG .

    TYPEDEF         reduce using rule 111 (type_specifier -> LONG .)
    EXTERN          reduce using rule 111 (type_specifier -> LONG .)
    STATIC          reduce using rule 111 (type_specifier -> LONG .)
    AUTO            reduce using rule 111 (type_specifier -> LONG .)
    REGISTER        reduce using rule 111 (type_specifier -> LONG .)
    VOID            reduce using rule 111 (type_specifier -> LONG .)
    CHAR            reduce using rule 111 (type_specifier -> LONG .)
    SHORT           reduce using rule 111 (type_specifier -> LONG .)
    INT             reduce using rule 111 (type_specifier -> LONG .)
    LONG            reduce using rule 111 (type_specifier -> LONG .)
    FLOAT           reduce using rule 111 (type_specifier -> LONG .)
    DOUBLE          reduce using rule 111 (type_specifier -> LONG .)
    SIGNED          reduce using rule 111 (type_specifier -> LONG .)
    UNSIGNED        reduce using rule 111 (type_specifier -> LONG .)
    BOOL            reduce using rule 111 (type_specifier -> LONG .)
    CONST           reduce using rule 111 (type_specifier -> LONG .)
    VOLATILE        reduce using rule 111 (type_specifier -> LONG .)
    ENUM            reduce using rule 111 (type_specifier -> LONG .)
    STRUCT          reduce using rule 111 (type_specifier -> LONG .)
    UNION           reduce using rule 111 (type_specifier -> LONG .)
    SEMI_COLON      reduce using rule 111 (type_specifier -> LONG .)
    MULTIPLY        reduce using rule 111 (type_specifier -> LONG .)
    IDENTIFIER      reduce using rule 111 (type_specifier -> LONG .)
    L_PAREN         reduce using rule 111 (type_specifier -> LONG .)
    L_SQBR          reduce using rule 111 (type_specifier -> LONG .)
    R_PAREN         reduce using rule 111 (type_specifier -> LONG .)
    COMMA           reduce using rule 111 (type_specifier -> LONG .)
    COLON           reduce using rule 111 (type_specifier -> LONG .)


state 23

    (112) type_specifier -> FLOAT .

    TYPEDEF         reduce using rule 112 (type_specifier -> FLOAT .)
    EXTERN          reduce using rule 112 (type_specifier -> FLOAT .)
    STATIC          reduce using rule 112 (type_specifier -> FLOAT .)
    AUTO            reduce using rule 112 (type_specifier -> FLOAT .)
    REGISTER        reduce using rule 112 (type_specifier -> FLOAT .)
    VOID            reduce using rule 112 (type_specifier -> FLOAT .)
    CHAR            reduce using rule 112 (type_specifier -> FLOAT .)
    SHORT           reduce using rule 112 (type_specifier -> FLOAT .)
    INT             reduce using rule 112 (type_specifier -> FLOAT .)
    LONG            reduce using rule 112 (type_specifier -> FLOAT .)
    FLOAT           reduce using rule 112 (type_specifier -> FLOAT .)
    DOUBLE          reduce using rule 112 (type_specifier -> FLOAT .)
    SIGNED          reduce using rule 112 (type_specifier -> FLOAT .)
    UNSIGNED        reduce using rule 112 (type_specifier -> FLOAT .)
    BOOL            reduce using rule 112 (type_specifier -> FLOAT .)
    CONST           reduce using rule 112 (type_specifier -> FLOAT .)
    VOLATILE        reduce using rule 112 (type_specifier -> FLOAT .)
    ENUM            reduce using rule 112 (type_specifier -> FLOAT .)
    STRUCT          reduce using rule 112 (type_specifier -> FLOAT .)
    UNION           reduce using rule 112 (type_specifier -> FLOAT .)
    SEMI_COLON      reduce using rule 112 (type_specifier -> FLOAT .)
    MULTIPLY        reduce using rule 112 (type_specifier -> FLOAT .)
    IDENTIFIER      reduce using rule 112 (type_specifier -> FLOAT .)
    L_PAREN         reduce using rule 112 (type_specifier -> FLOAT .)
    L_SQBR          reduce using rule 112 (type_specifier -> FLOAT .)
    R_PAREN         reduce using rule 112 (type_specifier -> FLOAT .)
    COMMA           reduce using rule 112 (type_specifier -> FLOAT .)
    COLON           reduce using rule 112 (type_specifier -> FLOAT .)


state 24

    (113) type_specifier -> DOUBLE .

    TYPEDEF         reduce using rule 113 (type_specifier -> DOUBLE .)
    EXTERN          reduce using rule 113 (type_specifier -> DOUBLE .)
    STATIC          reduce using rule 113 (type_specifier -> DOUBLE .)
    AUTO            reduce using rule 113 (type_specifier -> DOUBLE .)
    REGISTER        reduce using rule 113 (type_specifier -> DOUBLE .)
    VOID            reduce using rule 113 (type_specifier -> DOUBLE .)
    CHAR            reduce using rule 113 (type_specifier -> DOUBLE .)
    SHORT           reduce using rule 113 (type_specifier -> DOUBLE .)
    INT             reduce using rule 113 (type_specifier -> DOUBLE .)
    LONG            reduce using rule 113 (type_specifier -> DOUBLE .)
    FLOAT           reduce using rule 113 (type_specifier -> DOUBLE .)
    DOUBLE          reduce using rule 113 (type_specifier -> DOUBLE .)
    SIGNED          reduce using rule 113 (type_specifier -> DOUBLE .)
    UNSIGNED        reduce using rule 113 (type_specifier -> DOUBLE .)
    BOOL            reduce using rule 113 (type_specifier -> DOUBLE .)
    CONST           reduce using rule 113 (type_specifier -> DOUBLE .)
    VOLATILE        reduce using rule 113 (type_specifier -> DOUBLE .)
    ENUM            reduce using rule 113 (type_specifier -> DOUBLE .)
    STRUCT          reduce using rule 113 (type_specifier -> DOUBLE .)
    UNION           reduce using rule 113 (type_specifier -> DOUBLE .)
    SEMI_COLON      reduce using rule 113 (type_specifier -> DOUBLE .)
    MULTIPLY        reduce using rule 113 (type_specifier -> DOUBLE .)
    IDENTIFIER      reduce using rule 113 (type_specifier -> DOUBLE .)
    L_PAREN         reduce using rule 113 (type_specifier -> DOUBLE .)
    L_SQBR          reduce using rule 113 (type_specifier -> DOUBLE .)
    R_PAREN         reduce using rule 113 (type_specifier -> DOUBLE .)
    COMMA           reduce using rule 113 (type_specifier -> DOUBLE .)
    COLON           reduce using rule 113 (type_specifier -> DOUBLE .)


state 25

    (114) type_specifier -> SIGNED .

    TYPEDEF         reduce using rule 114 (type_specifier -> SIGNED .)
    EXTERN          reduce using rule 114 (type_specifier -> SIGNED .)
    STATIC          reduce using rule 114 (type_specifier -> SIGNED .)
    AUTO            reduce using rule 114 (type_specifier -> SIGNED .)
    REGISTER        reduce using rule 114 (type_specifier -> SIGNED .)
    VOID            reduce using rule 114 (type_specifier -> SIGNED .)
    CHAR            reduce using rule 114 (type_specifier -> SIGNED .)
    SHORT           reduce using rule 114 (type_specifier -> SIGNED .)
    INT             reduce using rule 114 (type_specifier -> SIGNED .)
    LONG            reduce using rule 114 (type_specifier -> SIGNED .)
    FLOAT           reduce using rule 114 (type_specifier -> SIGNED .)
    DOUBLE          reduce using rule 114 (type_specifier -> SIGNED .)
    SIGNED          reduce using rule 114 (type_specifier -> SIGNED .)
    UNSIGNED        reduce using rule 114 (type_specifier -> SIGNED .)
    BOOL            reduce using rule 114 (type_specifier -> SIGNED .)
    CONST           reduce using rule 114 (type_specifier -> SIGNED .)
    VOLATILE        reduce using rule 114 (type_specifier -> SIGNED .)
    ENUM            reduce using rule 114 (type_specifier -> SIGNED .)
    STRUCT          reduce using rule 114 (type_specifier -> SIGNED .)
    UNION           reduce using rule 114 (type_specifier -> SIGNED .)
    SEMI_COLON      reduce using rule 114 (type_specifier -> SIGNED .)
    MULTIPLY        reduce using rule 114 (type_specifier -> SIGNED .)
    IDENTIFIER      reduce using rule 114 (type_specifier -> SIGNED .)
    L_PAREN         reduce using rule 114 (type_specifier -> SIGNED .)
    L_SQBR          reduce using rule 114 (type_specifier -> SIGNED .)
    R_PAREN         reduce using rule 114 (type_specifier -> SIGNED .)
    COMMA           reduce using rule 114 (type_specifier -> SIGNED .)
    COLON           reduce using rule 114 (type_specifier -> SIGNED .)


state 26

    (115) type_specifier -> UNSIGNED .

    TYPEDEF         reduce using rule 115 (type_specifier -> UNSIGNED .)
    EXTERN          reduce using rule 115 (type_specifier -> UNSIGNED .)
    STATIC          reduce using rule 115 (type_specifier -> UNSIGNED .)
    AUTO            reduce using rule 115 (type_specifier -> UNSIGNED .)
    REGISTER        reduce using rule 115 (type_specifier -> UNSIGNED .)
    VOID            reduce using rule 115 (type_specifier -> UNSIGNED .)
    CHAR            reduce using rule 115 (type_specifier -> UNSIGNED .)
    SHORT           reduce using rule 115 (type_specifier -> UNSIGNED .)
    INT             reduce using rule 115 (type_specifier -> UNSIGNED .)
    LONG            reduce using rule 115 (type_specifier -> UNSIGNED .)
    FLOAT           reduce using rule 115 (type_specifier -> UNSIGNED .)
    DOUBLE          reduce using rule 115 (type_specifier -> UNSIGNED .)
    SIGNED          reduce using rule 115 (type_specifier -> UNSIGNED .)
    UNSIGNED        reduce using rule 115 (type_specifier -> UNSIGNED .)
    BOOL            reduce using rule 115 (type_specifier -> UNSIGNED .)
    CONST           reduce using rule 115 (type_specifier -> UNSIGNED .)
    VOLATILE        reduce using rule 115 (type_specifier -> UNSIGNED .)
    ENUM            reduce using rule 115 (type_specifier -> UNSIGNED .)
    STRUCT          reduce using rule 115 (type_specifier -> UNSIGNED .)
    UNION           reduce using rule 115 (type_specifier -> UNSIGNED .)
    SEMI_COLON      reduce using rule 115 (type_specifier -> UNSIGNED .)
    MULTIPLY        reduce using rule 115 (type_specifier -> UNSIGNED .)
    IDENTIFIER      reduce using rule 115 (type_specifier -> UNSIGNED .)
    L_PAREN         reduce using rule 115 (type_specifier -> UNSIGNED .)
    L_SQBR          reduce using rule 115 (type_specifier -> UNSIGNED .)
    R_PAREN         reduce using rule 115 (type_specifier -> UNSIGNED .)
    COMMA           reduce using rule 115 (type_specifier -> UNSIGNED .)
    COLON           reduce using rule 115 (type_specifier -> UNSIGNED .)


state 27

    (116) type_specifier -> struct_or_union_specifier .

    TYPEDEF         reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    EXTERN          reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    STATIC          reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    AUTO            reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    REGISTER        reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    VOID            reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    CHAR            reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    SHORT           reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    INT             reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    LONG            reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    FLOAT           reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    DOUBLE          reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    SIGNED          reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    UNSIGNED        reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    BOOL            reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    CONST           reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    VOLATILE        reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    ENUM            reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    STRUCT          reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    UNION           reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    SEMI_COLON      reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    MULTIPLY        reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    IDENTIFIER      reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    L_PAREN         reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    L_SQBR          reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    R_PAREN         reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    COMMA           reduce using rule 116 (type_specifier -> struct_or_union_specifier .)
    COLON           reduce using rule 116 (type_specifier -> struct_or_union_specifier .)


state 28

    (117) type_specifier -> enum_specifier .

    TYPEDEF         reduce using rule 117 (type_specifier -> enum_specifier .)
    EXTERN          reduce using rule 117 (type_specifier -> enum_specifier .)
    STATIC          reduce using rule 117 (type_specifier -> enum_specifier .)
    AUTO            reduce using rule 117 (type_specifier -> enum_specifier .)
    REGISTER        reduce using rule 117 (type_specifier -> enum_specifier .)
    VOID            reduce using rule 117 (type_specifier -> enum_specifier .)
    CHAR            reduce using rule 117 (type_specifier -> enum_specifier .)
    SHORT           reduce using rule 117 (type_specifier -> enum_specifier .)
    INT             reduce using rule 117 (type_specifier -> enum_specifier .)
    LONG            reduce using rule 117 (type_specifier -> enum_specifier .)
    FLOAT           reduce using rule 117 (type_specifier -> enum_specifier .)
    DOUBLE          reduce using rule 117 (type_specifier -> enum_specifier .)
    SIGNED          reduce using rule 117 (type_specifier -> enum_specifier .)
    UNSIGNED        reduce using rule 117 (type_specifier -> enum_specifier .)
    BOOL            reduce using rule 117 (type_specifier -> enum_specifier .)
    CONST           reduce using rule 117 (type_specifier -> enum_specifier .)
    VOLATILE        reduce using rule 117 (type_specifier -> enum_specifier .)
    ENUM            reduce using rule 117 (type_specifier -> enum_specifier .)
    STRUCT          reduce using rule 117 (type_specifier -> enum_specifier .)
    UNION           reduce using rule 117 (type_specifier -> enum_specifier .)
    SEMI_COLON      reduce using rule 117 (type_specifier -> enum_specifier .)
    MULTIPLY        reduce using rule 117 (type_specifier -> enum_specifier .)
    IDENTIFIER      reduce using rule 117 (type_specifier -> enum_specifier .)
    L_PAREN         reduce using rule 117 (type_specifier -> enum_specifier .)
    L_SQBR          reduce using rule 117 (type_specifier -> enum_specifier .)
    R_PAREN         reduce using rule 117 (type_specifier -> enum_specifier .)
    COMMA           reduce using rule 117 (type_specifier -> enum_specifier .)
    COLON           reduce using rule 117 (type_specifier -> enum_specifier .)


state 29

    (118) type_specifier -> BOOL .

    TYPEDEF         reduce using rule 118 (type_specifier -> BOOL .)
    EXTERN          reduce using rule 118 (type_specifier -> BOOL .)
    STATIC          reduce using rule 118 (type_specifier -> BOOL .)
    AUTO            reduce using rule 118 (type_specifier -> BOOL .)
    REGISTER        reduce using rule 118 (type_specifier -> BOOL .)
    VOID            reduce using rule 118 (type_specifier -> BOOL .)
    CHAR            reduce using rule 118 (type_specifier -> BOOL .)
    SHORT           reduce using rule 118 (type_specifier -> BOOL .)
    INT             reduce using rule 118 (type_specifier -> BOOL .)
    LONG            reduce using rule 118 (type_specifier -> BOOL .)
    FLOAT           reduce using rule 118 (type_specifier -> BOOL .)
    DOUBLE          reduce using rule 118 (type_specifier -> BOOL .)
    SIGNED          reduce using rule 118 (type_specifier -> BOOL .)
    UNSIGNED        reduce using rule 118 (type_specifier -> BOOL .)
    BOOL            reduce using rule 118 (type_specifier -> BOOL .)
    CONST           reduce using rule 118 (type_specifier -> BOOL .)
    VOLATILE        reduce using rule 118 (type_specifier -> BOOL .)
    ENUM            reduce using rule 118 (type_specifier -> BOOL .)
    STRUCT          reduce using rule 118 (type_specifier -> BOOL .)
    UNION           reduce using rule 118 (type_specifier -> BOOL .)
    SEMI_COLON      reduce using rule 118 (type_specifier -> BOOL .)
    MULTIPLY        reduce using rule 118 (type_specifier -> BOOL .)
    IDENTIFIER      reduce using rule 118 (type_specifier -> BOOL .)
    L_PAREN         reduce using rule 118 (type_specifier -> BOOL .)
    L_SQBR          reduce using rule 118 (type_specifier -> BOOL .)
    R_PAREN         reduce using rule 118 (type_specifier -> BOOL .)
    COMMA           reduce using rule 118 (type_specifier -> BOOL .)
    COLON           reduce using rule 118 (type_specifier -> BOOL .)


state 30

    (143) type_qualifier -> CONST .

    TYPEDEF         reduce using rule 143 (type_qualifier -> CONST .)
    EXTERN          reduce using rule 143 (type_qualifier -> CONST .)
    STATIC          reduce using rule 143 (type_qualifier -> CONST .)
    AUTO            reduce using rule 143 (type_qualifier -> CONST .)
    REGISTER        reduce using rule 143 (type_qualifier -> CONST .)
    VOID            reduce using rule 143 (type_qualifier -> CONST .)
    CHAR            reduce using rule 143 (type_qualifier -> CONST .)
    SHORT           reduce using rule 143 (type_qualifier -> CONST .)
    INT             reduce using rule 143 (type_qualifier -> CONST .)
    LONG            reduce using rule 143 (type_qualifier -> CONST .)
    FLOAT           reduce using rule 143 (type_qualifier -> CONST .)
    DOUBLE          reduce using rule 143 (type_qualifier -> CONST .)
    SIGNED          reduce using rule 143 (type_qualifier -> CONST .)
    UNSIGNED        reduce using rule 143 (type_qualifier -> CONST .)
    BOOL            reduce using rule 143 (type_qualifier -> CONST .)
    CONST           reduce using rule 143 (type_qualifier -> CONST .)
    VOLATILE        reduce using rule 143 (type_qualifier -> CONST .)
    ENUM            reduce using rule 143 (type_qualifier -> CONST .)
    STRUCT          reduce using rule 143 (type_qualifier -> CONST .)
    UNION           reduce using rule 143 (type_qualifier -> CONST .)
    SEMI_COLON      reduce using rule 143 (type_qualifier -> CONST .)
    MULTIPLY        reduce using rule 143 (type_qualifier -> CONST .)
    IDENTIFIER      reduce using rule 143 (type_qualifier -> CONST .)
    L_PAREN         reduce using rule 143 (type_qualifier -> CONST .)
    L_SQBR          reduce using rule 143 (type_qualifier -> CONST .)
    R_PAREN         reduce using rule 143 (type_qualifier -> CONST .)
    COMMA           reduce using rule 143 (type_qualifier -> CONST .)
    COLON           reduce using rule 143 (type_qualifier -> CONST .)


state 31

    (144) type_qualifier -> VOLATILE .

    TYPEDEF         reduce using rule 144 (type_qualifier -> VOLATILE .)
    EXTERN          reduce using rule 144 (type_qualifier -> VOLATILE .)
    STATIC          reduce using rule 144 (type_qualifier -> VOLATILE .)
    AUTO            reduce using rule 144 (type_qualifier -> VOLATILE .)
    REGISTER        reduce using rule 144 (type_qualifier -> VOLATILE .)
    VOID            reduce using rule 144 (type_qualifier -> VOLATILE .)
    CHAR            reduce using rule 144 (type_qualifier -> VOLATILE .)
    SHORT           reduce using rule 144 (type_qualifier -> VOLATILE .)
    INT             reduce using rule 144 (type_qualifier -> VOLATILE .)
    LONG            reduce using rule 144 (type_qualifier -> VOLATILE .)
    FLOAT           reduce using rule 144 (type_qualifier -> VOLATILE .)
    DOUBLE          reduce using rule 144 (type_qualifier -> VOLATILE .)
    SIGNED          reduce using rule 144 (type_qualifier -> VOLATILE .)
    UNSIGNED        reduce using rule 144 (type_qualifier -> VOLATILE .)
    BOOL            reduce using rule 144 (type_qualifier -> VOLATILE .)
    CONST           reduce using rule 144 (type_qualifier -> VOLATILE .)
    VOLATILE        reduce using rule 144 (type_qualifier -> VOLATILE .)
    ENUM            reduce using rule 144 (type_qualifier -> VOLATILE .)
    STRUCT          reduce using rule 144 (type_qualifier -> VOLATILE .)
    UNION           reduce using rule 144 (type_qualifier -> VOLATILE .)
    SEMI_COLON      reduce using rule 144 (type_qualifier -> VOLATILE .)
    MULTIPLY        reduce using rule 144 (type_qualifier -> VOLATILE .)
    IDENTIFIER      reduce using rule 144 (type_qualifier -> VOLATILE .)
    L_PAREN         reduce using rule 144 (type_qualifier -> VOLATILE .)
    L_SQBR          reduce using rule 144 (type_qualifier -> VOLATILE .)
    R_PAREN         reduce using rule 144 (type_qualifier -> VOLATILE .)
    COMMA           reduce using rule 144 (type_qualifier -> VOLATILE .)
    COLON           reduce using rule 144 (type_qualifier -> VOLATILE .)


state 32

    (154) pointer -> MULTIPLY .
    (155) pointer -> MULTIPLY . type_qualifier_list
    (156) pointer -> MULTIPLY . pointer
    (157) pointer -> MULTIPLY . type_qualifier_list pointer
    (158) type_qualifier_list -> . type_qualifier
    (159) type_qualifier_list -> . type_qualifier_list type_qualifier
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 154 (pointer -> MULTIPLY .)
    L_PAREN         reduce using rule 154 (pointer -> MULTIPLY .)
    L_SQBR          reduce using rule 154 (pointer -> MULTIPLY .)
    R_PAREN         reduce using rule 154 (pointer -> MULTIPLY .)
    COMMA           reduce using rule 154 (pointer -> MULTIPLY .)
    MULTIPLY        shift and go to state 32
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31

    type_qualifier_list            shift and go to state 55
    pointer                        shift and go to state 56
    type_qualifier                 shift and go to state 57

state 33

    (147) direct_declarator -> IDENTIFIER .

    L_SQBR          reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    L_PAREN         reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    L_BRACES        reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    TYPEDEF         reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    EXTERN          reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    STATIC          reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    AUTO            reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    REGISTER        reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    VOID            reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    CHAR            reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    SHORT           reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    INT             reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    LONG            reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    FLOAT           reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    DOUBLE          reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    SIGNED          reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    UNSIGNED        reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    BOOL            reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    CONST           reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    VOLATILE        reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    ENUM            reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    STRUCT          reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    UNION           reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    R_PAREN         reduce using rule 147 (direct_declarator -> IDENTIFIER .)
    COLON           reduce using rule 147 (direct_declarator -> IDENTIFIER .)


state 34

    (148) direct_declarator -> L_PAREN . declarator R_PAREN
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN

    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34

    declarator                     shift and go to state 58
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 35

    (119) struct_or_union_specifier -> struct_or_union . IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> struct_or_union . L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> struct_or_union . IDENTIFIER

    IDENTIFIER      shift and go to state 59
    L_BRACES        shift and go to state 60


state 36

    (136) enum_specifier -> ENUM . L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> ENUM . IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> ENUM . IDENTIFIER

    L_BRACES        shift and go to state 61
    IDENTIFIER      shift and go to state 62


state 37

    (122) struct_or_union -> STRUCT .

    IDENTIFIER      reduce using rule 122 (struct_or_union -> STRUCT .)
    L_BRACES        reduce using rule 122 (struct_or_union -> STRUCT .)


state 38

    (123) struct_or_union -> UNION .

    IDENTIFIER      reduce using rule 123 (struct_or_union -> UNION .)
    L_BRACES        reduce using rule 123 (struct_or_union -> UNION .)


state 39

    (3) translation_unit -> translation_unit external_declaration .

    TYPEDEF         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    EXTERN          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STATIC          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    AUTO            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    REGISTER        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    VOID            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CHAR            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SHORT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    INT             reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    LONG            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    FLOAT           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    DOUBLE          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    SIGNED          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNSIGNED        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    BOOL            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    CONST           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    VOLATILE        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    MULTIPLY        reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    IDENTIFIER      reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    L_PAREN         reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    ENUM            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    STRUCT          reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    UNION           reduce using rule 3 (translation_unit -> translation_unit external_declaration .)
    $end            reduce using rule 3 (translation_unit -> translation_unit external_declaration .)


state 40

    (6) function_definition -> declaration_specifiers declarator . declaration_list compound_statement
    (7) function_definition -> declaration_specifiers declarator . compound_statement
    (100) init_declarator -> declarator .
    (101) init_declarator -> declarator . ASSIGNMENT initializer
    (199) declaration_list -> . declaration
    (200) declaration_list -> . declaration_list declaration
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    SEMI_COLON      reduce using rule 100 (init_declarator -> declarator .)
    COMMA           reduce using rule 100 (init_declarator -> declarator .)
    ASSIGNMENT      shift and go to state 65
    L_BRACES        shift and go to state 47
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    declaration_specifiers         shift and go to state 48
    declaration_list               shift and go to state 63
    compound_statement             shift and go to state 64
    declaration                    shift and go to state 46
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 41

    (90) declaration -> declaration_specifiers SEMI_COLON .

    TYPEDEF         reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    EXTERN          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    STATIC          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    AUTO            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    REGISTER        reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    VOID            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    CHAR            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    SHORT           reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    INT             reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    LONG            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    FLOAT           reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    DOUBLE          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    SIGNED          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    UNSIGNED        reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    BOOL            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    CONST           reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    VOLATILE        reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    MULTIPLY        reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    IDENTIFIER      reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    L_PAREN         reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    ENUM            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    STRUCT          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    UNION           reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    $end            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    L_BRACES        reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    R_BRACES        reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    CASE            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    DEFAULT         reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    SEMI_COLON      reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    IF              reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    SWITCH          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    WHILE           reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    DO              reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    FOR             reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    GOTO            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    CONTINUE        reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    BREAK           reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    RETURN          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    INCREMENT       reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    DECREMENT       reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    SIZEOF          reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    BITWISE_AND     reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    ADD             reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    SUBSTRACT       reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    NULL            reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    INT_CONSTANT    reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)
    STR_CONSTANT    reduce using rule 90 (declaration -> declaration_specifiers SEMI_COLON .)


state 42

    (91) declaration -> declaration_specifiers init_declarator_list . SEMI_COLON
    (99) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI_COLON      shift and go to state 66
    COMMA           shift and go to state 67


state 43

    (98) init_declarator_list -> init_declarator .

    SEMI_COLON      reduce using rule 98 (init_declarator_list -> init_declarator .)
    COMMA           reduce using rule 98 (init_declarator_list -> init_declarator .)


state 44

    (8) function_definition -> declarator declaration_list . compound_statement
    (200) declaration_list -> declaration_list . declaration
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    L_BRACES        shift and go to state 47
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    compound_statement             shift and go to state 68
    declaration                    shift and go to state 69
    declaration_specifiers         shift and go to state 48
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 45

    (9) function_definition -> declarator compound_statement .

    TYPEDEF         reduce using rule 9 (function_definition -> declarator compound_statement .)
    EXTERN          reduce using rule 9 (function_definition -> declarator compound_statement .)
    STATIC          reduce using rule 9 (function_definition -> declarator compound_statement .)
    AUTO            reduce using rule 9 (function_definition -> declarator compound_statement .)
    REGISTER        reduce using rule 9 (function_definition -> declarator compound_statement .)
    VOID            reduce using rule 9 (function_definition -> declarator compound_statement .)
    CHAR            reduce using rule 9 (function_definition -> declarator compound_statement .)
    SHORT           reduce using rule 9 (function_definition -> declarator compound_statement .)
    INT             reduce using rule 9 (function_definition -> declarator compound_statement .)
    LONG            reduce using rule 9 (function_definition -> declarator compound_statement .)
    FLOAT           reduce using rule 9 (function_definition -> declarator compound_statement .)
    DOUBLE          reduce using rule 9 (function_definition -> declarator compound_statement .)
    SIGNED          reduce using rule 9 (function_definition -> declarator compound_statement .)
    UNSIGNED        reduce using rule 9 (function_definition -> declarator compound_statement .)
    BOOL            reduce using rule 9 (function_definition -> declarator compound_statement .)
    CONST           reduce using rule 9 (function_definition -> declarator compound_statement .)
    VOLATILE        reduce using rule 9 (function_definition -> declarator compound_statement .)
    MULTIPLY        reduce using rule 9 (function_definition -> declarator compound_statement .)
    IDENTIFIER      reduce using rule 9 (function_definition -> declarator compound_statement .)
    L_PAREN         reduce using rule 9 (function_definition -> declarator compound_statement .)
    ENUM            reduce using rule 9 (function_definition -> declarator compound_statement .)
    STRUCT          reduce using rule 9 (function_definition -> declarator compound_statement .)
    UNION           reduce using rule 9 (function_definition -> declarator compound_statement .)
    $end            reduce using rule 9 (function_definition -> declarator compound_statement .)


state 46

    (199) declaration_list -> declaration .

    L_BRACES        reduce using rule 199 (declaration_list -> declaration .)
    TYPEDEF         reduce using rule 199 (declaration_list -> declaration .)
    EXTERN          reduce using rule 199 (declaration_list -> declaration .)
    STATIC          reduce using rule 199 (declaration_list -> declaration .)
    AUTO            reduce using rule 199 (declaration_list -> declaration .)
    REGISTER        reduce using rule 199 (declaration_list -> declaration .)
    VOID            reduce using rule 199 (declaration_list -> declaration .)
    CHAR            reduce using rule 199 (declaration_list -> declaration .)
    SHORT           reduce using rule 199 (declaration_list -> declaration .)
    INT             reduce using rule 199 (declaration_list -> declaration .)
    LONG            reduce using rule 199 (declaration_list -> declaration .)
    FLOAT           reduce using rule 199 (declaration_list -> declaration .)
    DOUBLE          reduce using rule 199 (declaration_list -> declaration .)
    SIGNED          reduce using rule 199 (declaration_list -> declaration .)
    UNSIGNED        reduce using rule 199 (declaration_list -> declaration .)
    BOOL            reduce using rule 199 (declaration_list -> declaration .)
    CONST           reduce using rule 199 (declaration_list -> declaration .)
    VOLATILE        reduce using rule 199 (declaration_list -> declaration .)
    ENUM            reduce using rule 199 (declaration_list -> declaration .)
    STRUCT          reduce using rule 199 (declaration_list -> declaration .)
    UNION           reduce using rule 199 (declaration_list -> declaration .)
    R_BRACES        reduce using rule 199 (declaration_list -> declaration .)
    IDENTIFIER      reduce using rule 199 (declaration_list -> declaration .)
    CASE            reduce using rule 199 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 199 (declaration_list -> declaration .)
    SEMI_COLON      reduce using rule 199 (declaration_list -> declaration .)
    IF              reduce using rule 199 (declaration_list -> declaration .)
    SWITCH          reduce using rule 199 (declaration_list -> declaration .)
    WHILE           reduce using rule 199 (declaration_list -> declaration .)
    DO              reduce using rule 199 (declaration_list -> declaration .)
    FOR             reduce using rule 199 (declaration_list -> declaration .)
    GOTO            reduce using rule 199 (declaration_list -> declaration .)
    CONTINUE        reduce using rule 199 (declaration_list -> declaration .)
    BREAK           reduce using rule 199 (declaration_list -> declaration .)
    RETURN          reduce using rule 199 (declaration_list -> declaration .)
    INCREMENT       reduce using rule 199 (declaration_list -> declaration .)
    DECREMENT       reduce using rule 199 (declaration_list -> declaration .)
    SIZEOF          reduce using rule 199 (declaration_list -> declaration .)
    BITWISE_AND     reduce using rule 199 (declaration_list -> declaration .)
    MULTIPLY        reduce using rule 199 (declaration_list -> declaration .)
    ADD             reduce using rule 199 (declaration_list -> declaration .)
    SUBSTRACT       reduce using rule 199 (declaration_list -> declaration .)
    BITWISE_ONE_COMPLEMENT reduce using rule 199 (declaration_list -> declaration .)
    LOGICAL_NOT     reduce using rule 199 (declaration_list -> declaration .)
    NULL            reduce using rule 199 (declaration_list -> declaration .)
    INT_CONSTANT    reduce using rule 199 (declaration_list -> declaration .)
    HEX_CONSTANT    reduce using rule 199 (declaration_list -> declaration .)
    OCTAL_CONSTANT  reduce using rule 199 (declaration_list -> declaration .)
    EXPONENT_CONSTANT reduce using rule 199 (declaration_list -> declaration .)
    REAL_CONSTANT   reduce using rule 199 (declaration_list -> declaration .)
    CHAR_CONSTANT   reduce using rule 199 (declaration_list -> declaration .)
    STR_CONSTANT    reduce using rule 199 (declaration_list -> declaration .)
    L_PAREN         reduce using rule 199 (declaration_list -> declaration .)


state 47

    (195) compound_statement -> L_BRACES . R_BRACES
    (196) compound_statement -> L_BRACES . statement_list R_BRACES
    (197) compound_statement -> L_BRACES . declaration_list R_BRACES
    (198) compound_statement -> L_BRACES . declaration_list statement_list R_BRACES
    (201) statement_list -> . statement
    (202) statement_list -> . statement_list statement
    (199) declaration_list -> . declaration
    (200) declaration_list -> . declaration_list declaration
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    R_BRACES        shift and go to state 70
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement_list                 shift and go to state 71
    declaration_list               shift and go to state 72
    statement                      shift and go to state 73
    declaration                    shift and go to state 46
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    declaration_specifiers         shift and go to state 48
    expression                     shift and go to state 84
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    assignment_expression          shift and go to state 95
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    struct_or_union                shift and go to state 35
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 48

    (90) declaration -> declaration_specifiers . SEMI_COLON
    (91) declaration -> declaration_specifiers . init_declarator_list SEMI_COLON
    (98) init_declarator_list -> . init_declarator
    (99) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (100) init_declarator -> . declarator
    (101) init_declarator -> . declarator ASSIGNMENT initializer
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN

    SEMI_COLON      shift and go to state 41
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34

    init_declarator_list           shift and go to state 42
    init_declarator                shift and go to state 43
    declarator                     shift and go to state 129
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 49

    (93) declaration_specifiers -> storage_class_specifier declaration_specifiers .

    SEMI_COLON      reduce using rule 93 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 93 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 93 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_PAREN         reduce using rule 93 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    L_SQBR          reduce using rule 93 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    R_PAREN         reduce using rule 93 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)
    COMMA           reduce using rule 93 (declaration_specifiers -> storage_class_specifier declaration_specifiers .)


state 50

    (95) declaration_specifiers -> type_specifier declaration_specifiers .

    SEMI_COLON      reduce using rule 95 (declaration_specifiers -> type_specifier declaration_specifiers .)
    MULTIPLY        reduce using rule 95 (declaration_specifiers -> type_specifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 95 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_PAREN         reduce using rule 95 (declaration_specifiers -> type_specifier declaration_specifiers .)
    L_SQBR          reduce using rule 95 (declaration_specifiers -> type_specifier declaration_specifiers .)
    R_PAREN         reduce using rule 95 (declaration_specifiers -> type_specifier declaration_specifiers .)
    COMMA           reduce using rule 95 (declaration_specifiers -> type_specifier declaration_specifiers .)


state 51

    (97) declaration_specifiers -> type_qualifier declaration_specifiers .

    SEMI_COLON      reduce using rule 97 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    MULTIPLY        reduce using rule 97 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    IDENTIFIER      reduce using rule 97 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_PAREN         reduce using rule 97 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    L_SQBR          reduce using rule 97 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    R_PAREN         reduce using rule 97 (declaration_specifiers -> type_qualifier declaration_specifiers .)
    COMMA           reduce using rule 97 (declaration_specifiers -> type_qualifier declaration_specifiers .)


state 52

    (145) declarator -> pointer direct_declarator .
    (149) direct_declarator -> direct_declarator . L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> direct_declarator . L_SQBR R_SQBR
    (151) direct_declarator -> direct_declarator . L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> direct_declarator . L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> direct_declarator . L_PAREN R_PAREN

    L_BRACES        reduce using rule 145 (declarator -> pointer direct_declarator .)
    TYPEDEF         reduce using rule 145 (declarator -> pointer direct_declarator .)
    EXTERN          reduce using rule 145 (declarator -> pointer direct_declarator .)
    STATIC          reduce using rule 145 (declarator -> pointer direct_declarator .)
    AUTO            reduce using rule 145 (declarator -> pointer direct_declarator .)
    REGISTER        reduce using rule 145 (declarator -> pointer direct_declarator .)
    VOID            reduce using rule 145 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 145 (declarator -> pointer direct_declarator .)
    SHORT           reduce using rule 145 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 145 (declarator -> pointer direct_declarator .)
    LONG            reduce using rule 145 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 145 (declarator -> pointer direct_declarator .)
    DOUBLE          reduce using rule 145 (declarator -> pointer direct_declarator .)
    SIGNED          reduce using rule 145 (declarator -> pointer direct_declarator .)
    UNSIGNED        reduce using rule 145 (declarator -> pointer direct_declarator .)
    BOOL            reduce using rule 145 (declarator -> pointer direct_declarator .)
    CONST           reduce using rule 145 (declarator -> pointer direct_declarator .)
    VOLATILE        reduce using rule 145 (declarator -> pointer direct_declarator .)
    ENUM            reduce using rule 145 (declarator -> pointer direct_declarator .)
    STRUCT          reduce using rule 145 (declarator -> pointer direct_declarator .)
    UNION           reduce using rule 145 (declarator -> pointer direct_declarator .)
    ASSIGNMENT      reduce using rule 145 (declarator -> pointer direct_declarator .)
    SEMI_COLON      reduce using rule 145 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 145 (declarator -> pointer direct_declarator .)
    R_PAREN         reduce using rule 145 (declarator -> pointer direct_declarator .)
    COLON           reduce using rule 145 (declarator -> pointer direct_declarator .)
    L_SQBR          shift and go to state 53
    L_PAREN         shift and go to state 54


state 53

    (149) direct_declarator -> direct_declarator L_SQBR . constant_expression R_SQBR
    (150) direct_declarator -> direct_declarator L_SQBR . R_SQBR
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    R_SQBR          shift and go to state 131
    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    constant_expression            shift and go to state 130
    conditional_expression         shift and go to state 132
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 54

    (151) direct_declarator -> direct_declarator L_PAREN . parameter_type_list R_PAREN
    (152) direct_declarator -> direct_declarator L_PAREN . identifier_list R_PAREN
    (153) direct_declarator -> direct_declarator L_PAREN . R_PAREN
    (160) parameter_type_list -> . parameter_declaration
    (161) parameter_type_list -> . parameter_type_list COMMA parameter_declaration
    (165) identifier_list -> . IDENTIFIER
    (166) identifier_list -> . identifier_list COMMA IDENTIFIER
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    R_PAREN         shift and go to state 137
    IDENTIFIER      shift and go to state 140
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    parameter_type_list            shift and go to state 136
    identifier_list                shift and go to state 138
    parameter_declaration          shift and go to state 139
    declaration_specifiers         shift and go to state 141
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 55

    (155) pointer -> MULTIPLY type_qualifier_list .
    (157) pointer -> MULTIPLY type_qualifier_list . pointer
    (159) type_qualifier_list -> type_qualifier_list . type_qualifier
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE

    IDENTIFIER      reduce using rule 155 (pointer -> MULTIPLY type_qualifier_list .)
    L_PAREN         reduce using rule 155 (pointer -> MULTIPLY type_qualifier_list .)
    L_SQBR          reduce using rule 155 (pointer -> MULTIPLY type_qualifier_list .)
    R_PAREN         reduce using rule 155 (pointer -> MULTIPLY type_qualifier_list .)
    COMMA           reduce using rule 155 (pointer -> MULTIPLY type_qualifier_list .)
    MULTIPLY        shift and go to state 32
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31

    pointer                        shift and go to state 142
    type_qualifier                 shift and go to state 143

state 56

    (156) pointer -> MULTIPLY pointer .

    IDENTIFIER      reduce using rule 156 (pointer -> MULTIPLY pointer .)
    L_PAREN         reduce using rule 156 (pointer -> MULTIPLY pointer .)
    L_SQBR          reduce using rule 156 (pointer -> MULTIPLY pointer .)
    R_PAREN         reduce using rule 156 (pointer -> MULTIPLY pointer .)
    COMMA           reduce using rule 156 (pointer -> MULTIPLY pointer .)


state 57

    (158) type_qualifier_list -> type_qualifier .

    MULTIPLY        reduce using rule 158 (type_qualifier_list -> type_qualifier .)
    CONST           reduce using rule 158 (type_qualifier_list -> type_qualifier .)
    VOLATILE        reduce using rule 158 (type_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 158 (type_qualifier_list -> type_qualifier .)
    L_PAREN         reduce using rule 158 (type_qualifier_list -> type_qualifier .)
    L_SQBR          reduce using rule 158 (type_qualifier_list -> type_qualifier .)
    R_PAREN         reduce using rule 158 (type_qualifier_list -> type_qualifier .)
    COMMA           reduce using rule 158 (type_qualifier_list -> type_qualifier .)


state 58

    (148) direct_declarator -> L_PAREN declarator . R_PAREN

    R_PAREN         shift and go to state 144


state 59

    (119) struct_or_union_specifier -> struct_or_union IDENTIFIER . L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> struct_or_union IDENTIFIER .

    L_BRACES        shift and go to state 145
    TYPEDEF         reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    EXTERN          reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STATIC          reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    AUTO            reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    REGISTER        reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOID            reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CHAR            reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SHORT           reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    INT             reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    LONG            reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    FLOAT           reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    DOUBLE          reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SIGNED          reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNSIGNED        reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    BOOL            reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    CONST           reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    VOLATILE        reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    ENUM            reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    STRUCT          reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    UNION           reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    SEMI_COLON      reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    MULTIPLY        reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    IDENTIFIER      reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_PAREN         reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    L_SQBR          reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    R_PAREN         reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COMMA           reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)
    COLON           reduce using rule 121 (struct_or_union_specifier -> struct_or_union IDENTIFIER .)


state 60

    (120) struct_or_union_specifier -> struct_or_union L_BRACES . struct_declaration_list R_BRACES
    (124) struct_declaration_list -> . struct_declaration
    (125) struct_declaration_list -> . struct_declaration_list struct_declaration
    (126) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI_COLON
    (127) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (128) specifier_qualifier_list -> . type_specifier
    (129) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (130) specifier_qualifier_list -> . type_qualifier
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    struct_or_union                shift and go to state 35
    struct_declaration_list        shift and go to state 146
    struct_declaration             shift and go to state 147
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 61

    (136) enum_specifier -> ENUM L_BRACES . enumerator_list R_BRACES
    (139) enumerator_list -> . enumerator
    (140) enumerator_list -> . enumerator_list COMMA enumerator
    (141) enumerator -> . IDENTIFIER
    (142) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 153

    enumerator_list                shift and go to state 151
    enumerator                     shift and go to state 152

state 62

    (137) enum_specifier -> ENUM IDENTIFIER . L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> ENUM IDENTIFIER .

    L_BRACES        shift and go to state 154
    TYPEDEF         reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    EXTERN          reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    STATIC          reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    AUTO            reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    REGISTER        reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    VOID            reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    CHAR            reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    SHORT           reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    INT             reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    LONG            reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    FLOAT           reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    DOUBLE          reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    SIGNED          reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    UNSIGNED        reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    BOOL            reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    CONST           reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    VOLATILE        reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    ENUM            reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    STRUCT          reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    UNION           reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    SEMI_COLON      reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    MULTIPLY        reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    IDENTIFIER      reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    L_PAREN         reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    L_SQBR          reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    R_PAREN         reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    COMMA           reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)
    COLON           reduce using rule 138 (enum_specifier -> ENUM IDENTIFIER .)


state 63

    (6) function_definition -> declaration_specifiers declarator declaration_list . compound_statement
    (200) declaration_list -> declaration_list . declaration
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    L_BRACES        shift and go to state 47
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    declaration_specifiers         shift and go to state 48
    compound_statement             shift and go to state 155
    declaration                    shift and go to state 69
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 64

    (7) function_definition -> declaration_specifiers declarator compound_statement .

    TYPEDEF         reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    EXTERN          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    STATIC          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    AUTO            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    REGISTER        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOID            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    CHAR            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    SHORT           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    INT             reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    LONG            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    FLOAT           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    DOUBLE          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    SIGNED          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNSIGNED        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    BOOL            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    CONST           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    VOLATILE        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    MULTIPLY        reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    IDENTIFIER      reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    L_PAREN         reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    ENUM            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    STRUCT          reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    UNION           reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)
    $end            reduce using rule 7 (function_definition -> declaration_specifiers declarator compound_statement .)


state 65

    (101) init_declarator -> declarator ASSIGNMENT . initializer
    (181) initializer -> . assignment_expression
    (182) initializer -> . L_BRACES initializer_list R_BRACES
    (183) initializer -> . L_BRACES initializer_list COMMA R_BRACES
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    L_BRACES        shift and go to state 158
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    initializer                    shift and go to state 156
    assignment_expression          shift and go to state 157
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 66

    (91) declaration -> declaration_specifiers init_declarator_list SEMI_COLON .

    TYPEDEF         reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    EXTERN          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    STATIC          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    AUTO            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    REGISTER        reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    VOID            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    CHAR            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    SHORT           reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    INT             reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    LONG            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    FLOAT           reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    DOUBLE          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    SIGNED          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    UNSIGNED        reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    BOOL            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    CONST           reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    VOLATILE        reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    MULTIPLY        reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    IDENTIFIER      reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    L_PAREN         reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    ENUM            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    STRUCT          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    UNION           reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    $end            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    L_BRACES        reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    R_BRACES        reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    CASE            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    DEFAULT         reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    SEMI_COLON      reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    IF              reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    SWITCH          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    WHILE           reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    DO              reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    FOR             reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    GOTO            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    CONTINUE        reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    BREAK           reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    RETURN          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    INCREMENT       reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    DECREMENT       reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    SIZEOF          reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    BITWISE_AND     reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    ADD             reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    SUBSTRACT       reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    NULL            reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    INT_CONSTANT    reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)
    STR_CONSTANT    reduce using rule 91 (declaration -> declaration_specifiers init_declarator_list SEMI_COLON .)


state 67

    (99) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (100) init_declarator -> . declarator
    (101) init_declarator -> . declarator ASSIGNMENT initializer
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN

    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34

    init_declarator                shift and go to state 159
    declarator                     shift and go to state 129
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 68

    (8) function_definition -> declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    STATIC          reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    AUTO            reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    VOID            reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    CHAR            reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    SHORT           reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    INT             reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    LONG            reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    BOOL            reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    CONST           reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    L_PAREN         reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    ENUM            reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    UNION           reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)
    $end            reduce using rule 8 (function_definition -> declarator declaration_list compound_statement .)


state 69

    (200) declaration_list -> declaration_list declaration .

    L_BRACES        reduce using rule 200 (declaration_list -> declaration_list declaration .)
    TYPEDEF         reduce using rule 200 (declaration_list -> declaration_list declaration .)
    EXTERN          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    STATIC          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    AUTO            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    REGISTER        reduce using rule 200 (declaration_list -> declaration_list declaration .)
    VOID            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    SHORT           reduce using rule 200 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 200 (declaration_list -> declaration_list declaration .)
    LONG            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 200 (declaration_list -> declaration_list declaration .)
    DOUBLE          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    SIGNED          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    UNSIGNED        reduce using rule 200 (declaration_list -> declaration_list declaration .)
    BOOL            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    CONST           reduce using rule 200 (declaration_list -> declaration_list declaration .)
    VOLATILE        reduce using rule 200 (declaration_list -> declaration_list declaration .)
    ENUM            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    STRUCT          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    UNION           reduce using rule 200 (declaration_list -> declaration_list declaration .)
    R_BRACES        reduce using rule 200 (declaration_list -> declaration_list declaration .)
    IDENTIFIER      reduce using rule 200 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 200 (declaration_list -> declaration_list declaration .)
    SEMI_COLON      reduce using rule 200 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 200 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 200 (declaration_list -> declaration_list declaration .)
    DO              reduce using rule 200 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 200 (declaration_list -> declaration_list declaration .)
    GOTO            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    CONTINUE        reduce using rule 200 (declaration_list -> declaration_list declaration .)
    BREAK           reduce using rule 200 (declaration_list -> declaration_list declaration .)
    RETURN          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    INCREMENT       reduce using rule 200 (declaration_list -> declaration_list declaration .)
    DECREMENT       reduce using rule 200 (declaration_list -> declaration_list declaration .)
    SIZEOF          reduce using rule 200 (declaration_list -> declaration_list declaration .)
    BITWISE_AND     reduce using rule 200 (declaration_list -> declaration_list declaration .)
    MULTIPLY        reduce using rule 200 (declaration_list -> declaration_list declaration .)
    ADD             reduce using rule 200 (declaration_list -> declaration_list declaration .)
    SUBSTRACT       reduce using rule 200 (declaration_list -> declaration_list declaration .)
    BITWISE_ONE_COMPLEMENT reduce using rule 200 (declaration_list -> declaration_list declaration .)
    LOGICAL_NOT     reduce using rule 200 (declaration_list -> declaration_list declaration .)
    NULL            reduce using rule 200 (declaration_list -> declaration_list declaration .)
    INT_CONSTANT    reduce using rule 200 (declaration_list -> declaration_list declaration .)
    HEX_CONSTANT    reduce using rule 200 (declaration_list -> declaration_list declaration .)
    OCTAL_CONSTANT  reduce using rule 200 (declaration_list -> declaration_list declaration .)
    EXPONENT_CONSTANT reduce using rule 200 (declaration_list -> declaration_list declaration .)
    REAL_CONSTANT   reduce using rule 200 (declaration_list -> declaration_list declaration .)
    CHAR_CONSTANT   reduce using rule 200 (declaration_list -> declaration_list declaration .)
    STR_CONSTANT    reduce using rule 200 (declaration_list -> declaration_list declaration .)
    L_PAREN         reduce using rule 200 (declaration_list -> declaration_list declaration .)


state 70

    (195) compound_statement -> L_BRACES R_BRACES .

    TYPEDEF         reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    EXTERN          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    STATIC          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    AUTO            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    REGISTER        reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    VOID            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    CHAR            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    SHORT           reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    INT             reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    LONG            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    FLOAT           reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    DOUBLE          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    SIGNED          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    UNSIGNED        reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    BOOL            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    CONST           reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    VOLATILE        reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    MULTIPLY        reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    IDENTIFIER      reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    L_PAREN         reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    ENUM            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    STRUCT          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    UNION           reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    $end            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    R_BRACES        reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    CASE            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    DEFAULT         reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    L_BRACES        reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    SEMI_COLON      reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    IF              reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    SWITCH          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    WHILE           reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    DO              reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    FOR             reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    GOTO            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    CONTINUE        reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    BREAK           reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    RETURN          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    INCREMENT       reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    DECREMENT       reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    SIZEOF          reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    BITWISE_AND     reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    ADD             reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    SUBSTRACT       reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    BITWISE_ONE_COMPLEMENT reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    LOGICAL_NOT     reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    NULL            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    INT_CONSTANT    reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    HEX_CONSTANT    reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    OCTAL_CONSTANT  reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    EXPONENT_CONSTANT reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    REAL_CONSTANT   reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    CHAR_CONSTANT   reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    STR_CONSTANT    reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)
    ELSE            reduce using rule 195 (compound_statement -> L_BRACES R_BRACES .)


state 71

    (196) compound_statement -> L_BRACES statement_list . R_BRACES
    (202) statement_list -> statement_list . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    R_BRACES        shift and go to state 160
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 161
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 72

    (197) compound_statement -> L_BRACES declaration_list . R_BRACES
    (198) compound_statement -> L_BRACES declaration_list . statement_list R_BRACES
    (200) declaration_list -> declaration_list . declaration
    (201) statement_list -> . statement
    (202) statement_list -> . statement_list statement
    (90) declaration -> . declaration_specifiers SEMI_COLON
    (91) declaration -> . declaration_specifiers init_declarator_list SEMI_COLON
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    R_BRACES        shift and go to state 162
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement_list                 shift and go to state 163
    declaration                    shift and go to state 69
    statement                      shift and go to state 73
    declaration_specifiers         shift and go to state 48
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    expression                     shift and go to state 84
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    assignment_expression          shift and go to state 95
    struct_or_union                shift and go to state 35
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 73

    (201) statement_list -> statement .

    R_BRACES        reduce using rule 201 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 201 (statement_list -> statement .)
    CASE            reduce using rule 201 (statement_list -> statement .)
    DEFAULT         reduce using rule 201 (statement_list -> statement .)
    L_BRACES        reduce using rule 201 (statement_list -> statement .)
    SEMI_COLON      reduce using rule 201 (statement_list -> statement .)
    IF              reduce using rule 201 (statement_list -> statement .)
    SWITCH          reduce using rule 201 (statement_list -> statement .)
    WHILE           reduce using rule 201 (statement_list -> statement .)
    DO              reduce using rule 201 (statement_list -> statement .)
    FOR             reduce using rule 201 (statement_list -> statement .)
    GOTO            reduce using rule 201 (statement_list -> statement .)
    CONTINUE        reduce using rule 201 (statement_list -> statement .)
    BREAK           reduce using rule 201 (statement_list -> statement .)
    RETURN          reduce using rule 201 (statement_list -> statement .)
    INCREMENT       reduce using rule 201 (statement_list -> statement .)
    DECREMENT       reduce using rule 201 (statement_list -> statement .)
    SIZEOF          reduce using rule 201 (statement_list -> statement .)
    BITWISE_AND     reduce using rule 201 (statement_list -> statement .)
    MULTIPLY        reduce using rule 201 (statement_list -> statement .)
    ADD             reduce using rule 201 (statement_list -> statement .)
    SUBSTRACT       reduce using rule 201 (statement_list -> statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 201 (statement_list -> statement .)
    LOGICAL_NOT     reduce using rule 201 (statement_list -> statement .)
    NULL            reduce using rule 201 (statement_list -> statement .)
    INT_CONSTANT    reduce using rule 201 (statement_list -> statement .)
    HEX_CONSTANT    reduce using rule 201 (statement_list -> statement .)
    OCTAL_CONSTANT  reduce using rule 201 (statement_list -> statement .)
    EXPONENT_CONSTANT reduce using rule 201 (statement_list -> statement .)
    REAL_CONSTANT   reduce using rule 201 (statement_list -> statement .)
    CHAR_CONSTANT   reduce using rule 201 (statement_list -> statement .)
    STR_CONSTANT    reduce using rule 201 (statement_list -> statement .)
    L_PAREN         reduce using rule 201 (statement_list -> statement .)


state 74

    (186) statement -> labeled_statement .

    R_BRACES        reduce using rule 186 (statement -> labeled_statement .)
    IDENTIFIER      reduce using rule 186 (statement -> labeled_statement .)
    CASE            reduce using rule 186 (statement -> labeled_statement .)
    DEFAULT         reduce using rule 186 (statement -> labeled_statement .)
    L_BRACES        reduce using rule 186 (statement -> labeled_statement .)
    SEMI_COLON      reduce using rule 186 (statement -> labeled_statement .)
    IF              reduce using rule 186 (statement -> labeled_statement .)
    SWITCH          reduce using rule 186 (statement -> labeled_statement .)
    WHILE           reduce using rule 186 (statement -> labeled_statement .)
    DO              reduce using rule 186 (statement -> labeled_statement .)
    FOR             reduce using rule 186 (statement -> labeled_statement .)
    GOTO            reduce using rule 186 (statement -> labeled_statement .)
    CONTINUE        reduce using rule 186 (statement -> labeled_statement .)
    BREAK           reduce using rule 186 (statement -> labeled_statement .)
    RETURN          reduce using rule 186 (statement -> labeled_statement .)
    INCREMENT       reduce using rule 186 (statement -> labeled_statement .)
    DECREMENT       reduce using rule 186 (statement -> labeled_statement .)
    SIZEOF          reduce using rule 186 (statement -> labeled_statement .)
    BITWISE_AND     reduce using rule 186 (statement -> labeled_statement .)
    MULTIPLY        reduce using rule 186 (statement -> labeled_statement .)
    ADD             reduce using rule 186 (statement -> labeled_statement .)
    SUBSTRACT       reduce using rule 186 (statement -> labeled_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 186 (statement -> labeled_statement .)
    LOGICAL_NOT     reduce using rule 186 (statement -> labeled_statement .)
    NULL            reduce using rule 186 (statement -> labeled_statement .)
    INT_CONSTANT    reduce using rule 186 (statement -> labeled_statement .)
    HEX_CONSTANT    reduce using rule 186 (statement -> labeled_statement .)
    OCTAL_CONSTANT  reduce using rule 186 (statement -> labeled_statement .)
    EXPONENT_CONSTANT reduce using rule 186 (statement -> labeled_statement .)
    REAL_CONSTANT   reduce using rule 186 (statement -> labeled_statement .)
    CHAR_CONSTANT   reduce using rule 186 (statement -> labeled_statement .)
    STR_CONSTANT    reduce using rule 186 (statement -> labeled_statement .)
    L_PAREN         reduce using rule 186 (statement -> labeled_statement .)
    ELSE            reduce using rule 186 (statement -> labeled_statement .)


state 75

    (187) statement -> compound_statement .

    R_BRACES        reduce using rule 187 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 187 (statement -> compound_statement .)
    CASE            reduce using rule 187 (statement -> compound_statement .)
    DEFAULT         reduce using rule 187 (statement -> compound_statement .)
    L_BRACES        reduce using rule 187 (statement -> compound_statement .)
    SEMI_COLON      reduce using rule 187 (statement -> compound_statement .)
    IF              reduce using rule 187 (statement -> compound_statement .)
    SWITCH          reduce using rule 187 (statement -> compound_statement .)
    WHILE           reduce using rule 187 (statement -> compound_statement .)
    DO              reduce using rule 187 (statement -> compound_statement .)
    FOR             reduce using rule 187 (statement -> compound_statement .)
    GOTO            reduce using rule 187 (statement -> compound_statement .)
    CONTINUE        reduce using rule 187 (statement -> compound_statement .)
    BREAK           reduce using rule 187 (statement -> compound_statement .)
    RETURN          reduce using rule 187 (statement -> compound_statement .)
    INCREMENT       reduce using rule 187 (statement -> compound_statement .)
    DECREMENT       reduce using rule 187 (statement -> compound_statement .)
    SIZEOF          reduce using rule 187 (statement -> compound_statement .)
    BITWISE_AND     reduce using rule 187 (statement -> compound_statement .)
    MULTIPLY        reduce using rule 187 (statement -> compound_statement .)
    ADD             reduce using rule 187 (statement -> compound_statement .)
    SUBSTRACT       reduce using rule 187 (statement -> compound_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 187 (statement -> compound_statement .)
    LOGICAL_NOT     reduce using rule 187 (statement -> compound_statement .)
    NULL            reduce using rule 187 (statement -> compound_statement .)
    INT_CONSTANT    reduce using rule 187 (statement -> compound_statement .)
    HEX_CONSTANT    reduce using rule 187 (statement -> compound_statement .)
    OCTAL_CONSTANT  reduce using rule 187 (statement -> compound_statement .)
    EXPONENT_CONSTANT reduce using rule 187 (statement -> compound_statement .)
    REAL_CONSTANT   reduce using rule 187 (statement -> compound_statement .)
    CHAR_CONSTANT   reduce using rule 187 (statement -> compound_statement .)
    STR_CONSTANT    reduce using rule 187 (statement -> compound_statement .)
    L_PAREN         reduce using rule 187 (statement -> compound_statement .)
    ELSE            reduce using rule 187 (statement -> compound_statement .)


state 76

    (188) statement -> expression_statement .

    R_BRACES        reduce using rule 188 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 188 (statement -> expression_statement .)
    CASE            reduce using rule 188 (statement -> expression_statement .)
    DEFAULT         reduce using rule 188 (statement -> expression_statement .)
    L_BRACES        reduce using rule 188 (statement -> expression_statement .)
    SEMI_COLON      reduce using rule 188 (statement -> expression_statement .)
    IF              reduce using rule 188 (statement -> expression_statement .)
    SWITCH          reduce using rule 188 (statement -> expression_statement .)
    WHILE           reduce using rule 188 (statement -> expression_statement .)
    DO              reduce using rule 188 (statement -> expression_statement .)
    FOR             reduce using rule 188 (statement -> expression_statement .)
    GOTO            reduce using rule 188 (statement -> expression_statement .)
    CONTINUE        reduce using rule 188 (statement -> expression_statement .)
    BREAK           reduce using rule 188 (statement -> expression_statement .)
    RETURN          reduce using rule 188 (statement -> expression_statement .)
    INCREMENT       reduce using rule 188 (statement -> expression_statement .)
    DECREMENT       reduce using rule 188 (statement -> expression_statement .)
    SIZEOF          reduce using rule 188 (statement -> expression_statement .)
    BITWISE_AND     reduce using rule 188 (statement -> expression_statement .)
    MULTIPLY        reduce using rule 188 (statement -> expression_statement .)
    ADD             reduce using rule 188 (statement -> expression_statement .)
    SUBSTRACT       reduce using rule 188 (statement -> expression_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 188 (statement -> expression_statement .)
    LOGICAL_NOT     reduce using rule 188 (statement -> expression_statement .)
    NULL            reduce using rule 188 (statement -> expression_statement .)
    INT_CONSTANT    reduce using rule 188 (statement -> expression_statement .)
    HEX_CONSTANT    reduce using rule 188 (statement -> expression_statement .)
    OCTAL_CONSTANT  reduce using rule 188 (statement -> expression_statement .)
    EXPONENT_CONSTANT reduce using rule 188 (statement -> expression_statement .)
    REAL_CONSTANT   reduce using rule 188 (statement -> expression_statement .)
    CHAR_CONSTANT   reduce using rule 188 (statement -> expression_statement .)
    STR_CONSTANT    reduce using rule 188 (statement -> expression_statement .)
    L_PAREN         reduce using rule 188 (statement -> expression_statement .)
    ELSE            reduce using rule 188 (statement -> expression_statement .)


state 77

    (189) statement -> selection_statement .

    R_BRACES        reduce using rule 189 (statement -> selection_statement .)
    IDENTIFIER      reduce using rule 189 (statement -> selection_statement .)
    CASE            reduce using rule 189 (statement -> selection_statement .)
    DEFAULT         reduce using rule 189 (statement -> selection_statement .)
    L_BRACES        reduce using rule 189 (statement -> selection_statement .)
    SEMI_COLON      reduce using rule 189 (statement -> selection_statement .)
    IF              reduce using rule 189 (statement -> selection_statement .)
    SWITCH          reduce using rule 189 (statement -> selection_statement .)
    WHILE           reduce using rule 189 (statement -> selection_statement .)
    DO              reduce using rule 189 (statement -> selection_statement .)
    FOR             reduce using rule 189 (statement -> selection_statement .)
    GOTO            reduce using rule 189 (statement -> selection_statement .)
    CONTINUE        reduce using rule 189 (statement -> selection_statement .)
    BREAK           reduce using rule 189 (statement -> selection_statement .)
    RETURN          reduce using rule 189 (statement -> selection_statement .)
    INCREMENT       reduce using rule 189 (statement -> selection_statement .)
    DECREMENT       reduce using rule 189 (statement -> selection_statement .)
    SIZEOF          reduce using rule 189 (statement -> selection_statement .)
    BITWISE_AND     reduce using rule 189 (statement -> selection_statement .)
    MULTIPLY        reduce using rule 189 (statement -> selection_statement .)
    ADD             reduce using rule 189 (statement -> selection_statement .)
    SUBSTRACT       reduce using rule 189 (statement -> selection_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 189 (statement -> selection_statement .)
    LOGICAL_NOT     reduce using rule 189 (statement -> selection_statement .)
    NULL            reduce using rule 189 (statement -> selection_statement .)
    INT_CONSTANT    reduce using rule 189 (statement -> selection_statement .)
    HEX_CONSTANT    reduce using rule 189 (statement -> selection_statement .)
    OCTAL_CONSTANT  reduce using rule 189 (statement -> selection_statement .)
    EXPONENT_CONSTANT reduce using rule 189 (statement -> selection_statement .)
    REAL_CONSTANT   reduce using rule 189 (statement -> selection_statement .)
    CHAR_CONSTANT   reduce using rule 189 (statement -> selection_statement .)
    STR_CONSTANT    reduce using rule 189 (statement -> selection_statement .)
    L_PAREN         reduce using rule 189 (statement -> selection_statement .)
    ELSE            reduce using rule 189 (statement -> selection_statement .)


state 78

    (190) statement -> iteration_statement .

    R_BRACES        reduce using rule 190 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 190 (statement -> iteration_statement .)
    CASE            reduce using rule 190 (statement -> iteration_statement .)
    DEFAULT         reduce using rule 190 (statement -> iteration_statement .)
    L_BRACES        reduce using rule 190 (statement -> iteration_statement .)
    SEMI_COLON      reduce using rule 190 (statement -> iteration_statement .)
    IF              reduce using rule 190 (statement -> iteration_statement .)
    SWITCH          reduce using rule 190 (statement -> iteration_statement .)
    WHILE           reduce using rule 190 (statement -> iteration_statement .)
    DO              reduce using rule 190 (statement -> iteration_statement .)
    FOR             reduce using rule 190 (statement -> iteration_statement .)
    GOTO            reduce using rule 190 (statement -> iteration_statement .)
    CONTINUE        reduce using rule 190 (statement -> iteration_statement .)
    BREAK           reduce using rule 190 (statement -> iteration_statement .)
    RETURN          reduce using rule 190 (statement -> iteration_statement .)
    INCREMENT       reduce using rule 190 (statement -> iteration_statement .)
    DECREMENT       reduce using rule 190 (statement -> iteration_statement .)
    SIZEOF          reduce using rule 190 (statement -> iteration_statement .)
    BITWISE_AND     reduce using rule 190 (statement -> iteration_statement .)
    MULTIPLY        reduce using rule 190 (statement -> iteration_statement .)
    ADD             reduce using rule 190 (statement -> iteration_statement .)
    SUBSTRACT       reduce using rule 190 (statement -> iteration_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 190 (statement -> iteration_statement .)
    LOGICAL_NOT     reduce using rule 190 (statement -> iteration_statement .)
    NULL            reduce using rule 190 (statement -> iteration_statement .)
    INT_CONSTANT    reduce using rule 190 (statement -> iteration_statement .)
    HEX_CONSTANT    reduce using rule 190 (statement -> iteration_statement .)
    OCTAL_CONSTANT  reduce using rule 190 (statement -> iteration_statement .)
    EXPONENT_CONSTANT reduce using rule 190 (statement -> iteration_statement .)
    REAL_CONSTANT   reduce using rule 190 (statement -> iteration_statement .)
    CHAR_CONSTANT   reduce using rule 190 (statement -> iteration_statement .)
    STR_CONSTANT    reduce using rule 190 (statement -> iteration_statement .)
    L_PAREN         reduce using rule 190 (statement -> iteration_statement .)
    ELSE            reduce using rule 190 (statement -> iteration_statement .)


state 79

    (191) statement -> jump_statement .

    R_BRACES        reduce using rule 191 (statement -> jump_statement .)
    IDENTIFIER      reduce using rule 191 (statement -> jump_statement .)
    CASE            reduce using rule 191 (statement -> jump_statement .)
    DEFAULT         reduce using rule 191 (statement -> jump_statement .)
    L_BRACES        reduce using rule 191 (statement -> jump_statement .)
    SEMI_COLON      reduce using rule 191 (statement -> jump_statement .)
    IF              reduce using rule 191 (statement -> jump_statement .)
    SWITCH          reduce using rule 191 (statement -> jump_statement .)
    WHILE           reduce using rule 191 (statement -> jump_statement .)
    DO              reduce using rule 191 (statement -> jump_statement .)
    FOR             reduce using rule 191 (statement -> jump_statement .)
    GOTO            reduce using rule 191 (statement -> jump_statement .)
    CONTINUE        reduce using rule 191 (statement -> jump_statement .)
    BREAK           reduce using rule 191 (statement -> jump_statement .)
    RETURN          reduce using rule 191 (statement -> jump_statement .)
    INCREMENT       reduce using rule 191 (statement -> jump_statement .)
    DECREMENT       reduce using rule 191 (statement -> jump_statement .)
    SIZEOF          reduce using rule 191 (statement -> jump_statement .)
    BITWISE_AND     reduce using rule 191 (statement -> jump_statement .)
    MULTIPLY        reduce using rule 191 (statement -> jump_statement .)
    ADD             reduce using rule 191 (statement -> jump_statement .)
    SUBSTRACT       reduce using rule 191 (statement -> jump_statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 191 (statement -> jump_statement .)
    LOGICAL_NOT     reduce using rule 191 (statement -> jump_statement .)
    NULL            reduce using rule 191 (statement -> jump_statement .)
    INT_CONSTANT    reduce using rule 191 (statement -> jump_statement .)
    HEX_CONSTANT    reduce using rule 191 (statement -> jump_statement .)
    OCTAL_CONSTANT  reduce using rule 191 (statement -> jump_statement .)
    EXPONENT_CONSTANT reduce using rule 191 (statement -> jump_statement .)
    REAL_CONSTANT   reduce using rule 191 (statement -> jump_statement .)
    CHAR_CONSTANT   reduce using rule 191 (statement -> jump_statement .)
    STR_CONSTANT    reduce using rule 191 (statement -> jump_statement .)
    L_PAREN         reduce using rule 191 (statement -> jump_statement .)
    ELSE            reduce using rule 191 (statement -> jump_statement .)


state 80

    (203) expression_statement -> SEMI_COLON .

    R_BRACES        reduce using rule 203 (expression_statement -> SEMI_COLON .)
    IDENTIFIER      reduce using rule 203 (expression_statement -> SEMI_COLON .)
    CASE            reduce using rule 203 (expression_statement -> SEMI_COLON .)
    DEFAULT         reduce using rule 203 (expression_statement -> SEMI_COLON .)
    L_BRACES        reduce using rule 203 (expression_statement -> SEMI_COLON .)
    SEMI_COLON      reduce using rule 203 (expression_statement -> SEMI_COLON .)
    IF              reduce using rule 203 (expression_statement -> SEMI_COLON .)
    SWITCH          reduce using rule 203 (expression_statement -> SEMI_COLON .)
    WHILE           reduce using rule 203 (expression_statement -> SEMI_COLON .)
    DO              reduce using rule 203 (expression_statement -> SEMI_COLON .)
    FOR             reduce using rule 203 (expression_statement -> SEMI_COLON .)
    GOTO            reduce using rule 203 (expression_statement -> SEMI_COLON .)
    CONTINUE        reduce using rule 203 (expression_statement -> SEMI_COLON .)
    BREAK           reduce using rule 203 (expression_statement -> SEMI_COLON .)
    RETURN          reduce using rule 203 (expression_statement -> SEMI_COLON .)
    INCREMENT       reduce using rule 203 (expression_statement -> SEMI_COLON .)
    DECREMENT       reduce using rule 203 (expression_statement -> SEMI_COLON .)
    SIZEOF          reduce using rule 203 (expression_statement -> SEMI_COLON .)
    BITWISE_AND     reduce using rule 203 (expression_statement -> SEMI_COLON .)
    MULTIPLY        reduce using rule 203 (expression_statement -> SEMI_COLON .)
    ADD             reduce using rule 203 (expression_statement -> SEMI_COLON .)
    SUBSTRACT       reduce using rule 203 (expression_statement -> SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 203 (expression_statement -> SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 203 (expression_statement -> SEMI_COLON .)
    NULL            reduce using rule 203 (expression_statement -> SEMI_COLON .)
    INT_CONSTANT    reduce using rule 203 (expression_statement -> SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 203 (expression_statement -> SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 203 (expression_statement -> SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 203 (expression_statement -> SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 203 (expression_statement -> SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 203 (expression_statement -> SEMI_COLON .)
    STR_CONSTANT    reduce using rule 203 (expression_statement -> SEMI_COLON .)
    L_PAREN         reduce using rule 203 (expression_statement -> SEMI_COLON .)
    ELSE            reduce using rule 203 (expression_statement -> SEMI_COLON .)
    R_PAREN         reduce using rule 203 (expression_statement -> SEMI_COLON .)


state 81

    (192) labeled_statement -> IDENTIFIER . COLON statement
    (10) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 164
    L_SQBR          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    L_PAREN         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MULTIPLY_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MODULUS_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGNMENT  reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SUBSTRACT_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_AND_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_OR_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ADD             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SUBSTRACT       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LESS            reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GREATER         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 10 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    QUES_MARK       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 10 (primary_expression -> IDENTIFIER .)


state 82

    (193) labeled_statement -> CASE . constant_expression COLON statement
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    constant_expression            shift and go to state 165
    conditional_expression         shift and go to state 132
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 83

    (194) labeled_statement -> DEFAULT . COLON statement

    COLON           shift and go to state 166


state 84

    (204) expression_statement -> expression . SEMI_COLON
    (88) expression -> expression . COMMA assignment_expression

    SEMI_COLON      shift and go to state 167
    COMMA           shift and go to state 168


state 85

    (205) selection_statement -> IF . L_PAREN expression R_PAREN statement
    (206) selection_statement -> IF . L_PAREN expression R_PAREN statement ELSE statement

    L_PAREN         shift and go to state 169


state 86

    (19) primary_expression -> L_PAREN . expression R_PAREN
    (43) cast_expression -> L_PAREN . type_specifier R_PAREN cast_expression
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    ENUM            shift and go to state 36
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 170
    type_specifier                 shift and go to state 171
    cast_expression                shift and go to state 103
    assignment_expression          shift and go to state 95
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    struct_or_union                shift and go to state 35
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 87

    (207) selection_statement -> SWITCH . L_PAREN expression R_PAREN statement

    L_PAREN         shift and go to state 172


state 88

    (208) iteration_statement -> WHILE . L_PAREN expression R_PAREN statement

    L_PAREN         shift and go to state 173


state 89

    (209) iteration_statement -> DO . statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 174
    expression                     shift and go to state 84
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 90

    (210) iteration_statement -> FOR . L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> FOR . L_PAREN expression_statement expression_statement expression R_PAREN statement

    L_PAREN         shift and go to state 175


state 91

    (212) jump_statement -> GOTO . IDENTIFIER SEMI_COLON

    IDENTIFIER      shift and go to state 176


state 92

    (213) jump_statement -> CONTINUE . SEMI_COLON

    SEMI_COLON      shift and go to state 177


state 93

    (214) jump_statement -> BREAK . SEMI_COLON

    SEMI_COLON      shift and go to state 178


state 94

    (215) jump_statement -> RETURN . SEMI_COLON
    (216) jump_statement -> RETURN . expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    SEMI_COLON      shift and go to state 179
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 180
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 95

    (87) expression -> assignment_expression .

    SEMI_COLON      reduce using rule 87 (expression -> assignment_expression .)
    COMMA           reduce using rule 87 (expression -> assignment_expression .)
    R_PAREN         reduce using rule 87 (expression -> assignment_expression .)
    COLON           reduce using rule 87 (expression -> assignment_expression .)
    R_SQBR          reduce using rule 87 (expression -> assignment_expression .)


state 96

    (74) assignment_expression -> conditional_expression .

    SEMI_COLON      reduce using rule 74 (assignment_expression -> conditional_expression .)
    COMMA           reduce using rule 74 (assignment_expression -> conditional_expression .)
    R_PAREN         reduce using rule 74 (assignment_expression -> conditional_expression .)
    R_BRACES        reduce using rule 74 (assignment_expression -> conditional_expression .)
    COLON           reduce using rule 74 (assignment_expression -> conditional_expression .)
    R_SQBR          reduce using rule 74 (assignment_expression -> conditional_expression .)


state 97

    (75) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (42) cast_expression -> unary_expression .
    (76) assignment_operator -> . ASSIGNMENT
    (77) assignment_operator -> . MULTIPLY_ASSIGNMENT
    (78) assignment_operator -> . DIVIDE_ASSIGNMENT
    (79) assignment_operator -> . MODULUS_ASSIGNMENT
    (80) assignment_operator -> . ADD_ASSIGNMENT
    (81) assignment_operator -> . SUBSTRACT_ASSIGNMENT
    (82) assignment_operator -> . LEFT_SHIFT_ASSIGNMENT
    (83) assignment_operator -> . RIGHT_SHIFT_ASSIGNMENT
    (84) assignment_operator -> . BITWISE_AND_ASSIGNMENT
    (85) assignment_operator -> . BITWISE_XOR_ASSIGNMENT
    (86) assignment_operator -> . BITWISE_OR_ASSIGNMENT

    MULTIPLY        reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 42 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 42 (cast_expression -> unary_expression .)
    ADD             reduce using rule 42 (cast_expression -> unary_expression .)
    SUBSTRACT       reduce using rule 42 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 42 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 42 (cast_expression -> unary_expression .)
    LESS            reduce using rule 42 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 42 (cast_expression -> unary_expression .)
    LESS_EQUALS     reduce using rule 42 (cast_expression -> unary_expression .)
    GREATER_EQUALS  reduce using rule 42 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 42 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 42 (cast_expression -> unary_expression .)
    LOGICAL_AND     reduce using rule 42 (cast_expression -> unary_expression .)
    QUES_MARK       reduce using rule 42 (cast_expression -> unary_expression .)
    LOGICAL_OR      reduce using rule 42 (cast_expression -> unary_expression .)
    SEMI_COLON      reduce using rule 42 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 42 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 42 (cast_expression -> unary_expression .)
    R_BRACES        reduce using rule 42 (cast_expression -> unary_expression .)
    COLON           reduce using rule 42 (cast_expression -> unary_expression .)
    R_SQBR          reduce using rule 42 (cast_expression -> unary_expression .)
    ASSIGNMENT      shift and go to state 182
    MULTIPLY_ASSIGNMENT shift and go to state 183
    DIVIDE_ASSIGNMENT shift and go to state 184
    MODULUS_ASSIGNMENT shift and go to state 185
    ADD_ASSIGNMENT  shift and go to state 186
    SUBSTRACT_ASSIGNMENT shift and go to state 187
    LEFT_SHIFT_ASSIGNMENT shift and go to state 188
    RIGHT_SHIFT_ASSIGNMENT shift and go to state 189
    BITWISE_AND_ASSIGNMENT shift and go to state 190
    BITWISE_XOR_ASSIGNMENT shift and go to state 191
    BITWISE_OR_ASSIGNMENT shift and go to state 192

    assignment_operator            shift and go to state 181

state 98

    (72) conditional_expression -> logical_or_expression .
    (73) conditional_expression -> logical_or_expression . QUES_MARK expression COLON conditional_expression
    (71) logical_or_expression -> logical_or_expression . LOGICAL_OR logical_and_expression

    SEMI_COLON      reduce using rule 72 (conditional_expression -> logical_or_expression .)
    COMMA           reduce using rule 72 (conditional_expression -> logical_or_expression .)
    R_SQBR          reduce using rule 72 (conditional_expression -> logical_or_expression .)
    COLON           reduce using rule 72 (conditional_expression -> logical_or_expression .)
    R_PAREN         reduce using rule 72 (conditional_expression -> logical_or_expression .)
    R_BRACES        reduce using rule 72 (conditional_expression -> logical_or_expression .)
    QUES_MARK       shift and go to state 193
    LOGICAL_OR      shift and go to state 194


state 99

    (30) unary_expression -> postfix_expression .
    (21) postfix_expression -> postfix_expression . L_SQBR expression R_SQBR
    (22) postfix_expression -> postfix_expression . L_PAREN R_PAREN
    (23) postfix_expression -> postfix_expression . L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (25) postfix_expression -> postfix_expression . ARROW IDENTIFIER
    (26) postfix_expression -> postfix_expression . INCREMENT
    (27) postfix_expression -> postfix_expression . DECREMENT

    ASSIGNMENT      reduce using rule 30 (unary_expression -> postfix_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    MODULUS_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    ADD_ASSIGNMENT  reduce using rule 30 (unary_expression -> postfix_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 30 (unary_expression -> postfix_expression .)
    MULTIPLY        reduce using rule 30 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 30 (unary_expression -> postfix_expression .)
    MODULUS         reduce using rule 30 (unary_expression -> postfix_expression .)
    ADD             reduce using rule 30 (unary_expression -> postfix_expression .)
    SUBSTRACT       reduce using rule 30 (unary_expression -> postfix_expression .)
    LEFT_SHIFT      reduce using rule 30 (unary_expression -> postfix_expression .)
    RIGHT_SHIFT     reduce using rule 30 (unary_expression -> postfix_expression .)
    LESS            reduce using rule 30 (unary_expression -> postfix_expression .)
    GREATER         reduce using rule 30 (unary_expression -> postfix_expression .)
    LESS_EQUALS     reduce using rule 30 (unary_expression -> postfix_expression .)
    GREATER_EQUALS  reduce using rule 30 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 30 (unary_expression -> postfix_expression .)
    NOT_EQUALS      reduce using rule 30 (unary_expression -> postfix_expression .)
    BITWISE_AND     reduce using rule 30 (unary_expression -> postfix_expression .)
    BITWISE_XOR     reduce using rule 30 (unary_expression -> postfix_expression .)
    BITWISE_OR      reduce using rule 30 (unary_expression -> postfix_expression .)
    LOGICAL_AND     reduce using rule 30 (unary_expression -> postfix_expression .)
    QUES_MARK       reduce using rule 30 (unary_expression -> postfix_expression .)
    LOGICAL_OR      reduce using rule 30 (unary_expression -> postfix_expression .)
    SEMI_COLON      reduce using rule 30 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 30 (unary_expression -> postfix_expression .)
    R_SQBR          reduce using rule 30 (unary_expression -> postfix_expression .)
    COLON           reduce using rule 30 (unary_expression -> postfix_expression .)
    R_PAREN         reduce using rule 30 (unary_expression -> postfix_expression .)
    R_BRACES        reduce using rule 30 (unary_expression -> postfix_expression .)
    L_SQBR          shift and go to state 195
    L_PAREN         shift and go to state 196
    DOT             shift and go to state 197
    ARROW           shift and go to state 198
    INCREMENT       shift and go to state 199
    DECREMENT       shift and go to state 200


state 100

    (31) unary_expression -> INCREMENT . unary_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 202

    unary_expression               shift and go to state 201
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 101

    (32) unary_expression -> DECREMENT . unary_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 202

    unary_expression               shift and go to state 203
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 102

    (33) unary_expression -> unary_operator . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 204
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    primary_expression             shift and go to state 106

state 103

    (44) multiplicative_expression -> cast_expression .

    MULTIPLY        reduce using rule 44 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 44 (multiplicative_expression -> cast_expression .)
    MODULUS         reduce using rule 44 (multiplicative_expression -> cast_expression .)
    ADD             reduce using rule 44 (multiplicative_expression -> cast_expression .)
    SUBSTRACT       reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LEFT_SHIFT      reduce using rule 44 (multiplicative_expression -> cast_expression .)
    RIGHT_SHIFT     reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LESS            reduce using rule 44 (multiplicative_expression -> cast_expression .)
    GREATER         reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LESS_EQUALS     reduce using rule 44 (multiplicative_expression -> cast_expression .)
    GREATER_EQUALS  reduce using rule 44 (multiplicative_expression -> cast_expression .)
    EQUALS          reduce using rule 44 (multiplicative_expression -> cast_expression .)
    NOT_EQUALS      reduce using rule 44 (multiplicative_expression -> cast_expression .)
    BITWISE_AND     reduce using rule 44 (multiplicative_expression -> cast_expression .)
    BITWISE_XOR     reduce using rule 44 (multiplicative_expression -> cast_expression .)
    BITWISE_OR      reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LOGICAL_AND     reduce using rule 44 (multiplicative_expression -> cast_expression .)
    QUES_MARK       reduce using rule 44 (multiplicative_expression -> cast_expression .)
    LOGICAL_OR      reduce using rule 44 (multiplicative_expression -> cast_expression .)
    SEMI_COLON      reduce using rule 44 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    R_SQBR          reduce using rule 44 (multiplicative_expression -> cast_expression .)
    COLON           reduce using rule 44 (multiplicative_expression -> cast_expression .)
    R_PAREN         reduce using rule 44 (multiplicative_expression -> cast_expression .)
    R_BRACES        reduce using rule 44 (multiplicative_expression -> cast_expression .)


state 104

    (34) unary_expression -> SIZEOF . unary_expression
    (35) unary_expression -> SIZEOF . L_PAREN type_name R_PAREN
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 206
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    unary_expression               shift and go to state 205
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 105

    (70) logical_or_expression -> logical_and_expression .
    (69) logical_and_expression -> logical_and_expression . LOGICAL_AND inclusive_or_expression

    QUES_MARK       reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    LOGICAL_OR      reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    SEMI_COLON      reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    R_SQBR          reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    COLON           reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    R_PAREN         reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    R_BRACES        reduce using rule 70 (logical_or_expression -> logical_and_expression .)
    LOGICAL_AND     shift and go to state 207


state 106

    (20) postfix_expression -> primary_expression .

    L_SQBR          reduce using rule 20 (postfix_expression -> primary_expression .)
    L_PAREN         reduce using rule 20 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 20 (postfix_expression -> primary_expression .)
    ARROW           reduce using rule 20 (postfix_expression -> primary_expression .)
    INCREMENT       reduce using rule 20 (postfix_expression -> primary_expression .)
    DECREMENT       reduce using rule 20 (postfix_expression -> primary_expression .)
    ASSIGNMENT      reduce using rule 20 (postfix_expression -> primary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    ADD_ASSIGNMENT  reduce using rule 20 (postfix_expression -> primary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 20 (postfix_expression -> primary_expression .)
    MULTIPLY        reduce using rule 20 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 20 (postfix_expression -> primary_expression .)
    MODULUS         reduce using rule 20 (postfix_expression -> primary_expression .)
    ADD             reduce using rule 20 (postfix_expression -> primary_expression .)
    SUBSTRACT       reduce using rule 20 (postfix_expression -> primary_expression .)
    LEFT_SHIFT      reduce using rule 20 (postfix_expression -> primary_expression .)
    RIGHT_SHIFT     reduce using rule 20 (postfix_expression -> primary_expression .)
    LESS            reduce using rule 20 (postfix_expression -> primary_expression .)
    GREATER         reduce using rule 20 (postfix_expression -> primary_expression .)
    LESS_EQUALS     reduce using rule 20 (postfix_expression -> primary_expression .)
    GREATER_EQUALS  reduce using rule 20 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 20 (postfix_expression -> primary_expression .)
    NOT_EQUALS      reduce using rule 20 (postfix_expression -> primary_expression .)
    BITWISE_AND     reduce using rule 20 (postfix_expression -> primary_expression .)
    BITWISE_XOR     reduce using rule 20 (postfix_expression -> primary_expression .)
    BITWISE_OR      reduce using rule 20 (postfix_expression -> primary_expression .)
    LOGICAL_AND     reduce using rule 20 (postfix_expression -> primary_expression .)
    QUES_MARK       reduce using rule 20 (postfix_expression -> primary_expression .)
    LOGICAL_OR      reduce using rule 20 (postfix_expression -> primary_expression .)
    SEMI_COLON      reduce using rule 20 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 20 (postfix_expression -> primary_expression .)
    R_SQBR          reduce using rule 20 (postfix_expression -> primary_expression .)
    COLON           reduce using rule 20 (postfix_expression -> primary_expression .)
    R_PAREN         reduce using rule 20 (postfix_expression -> primary_expression .)
    R_BRACES        reduce using rule 20 (postfix_expression -> primary_expression .)


state 107

    (36) unary_operator -> BITWISE_AND .

    L_PAREN         reduce using rule 36 (unary_operator -> BITWISE_AND .)
    INCREMENT       reduce using rule 36 (unary_operator -> BITWISE_AND .)
    DECREMENT       reduce using rule 36 (unary_operator -> BITWISE_AND .)
    SIZEOF          reduce using rule 36 (unary_operator -> BITWISE_AND .)
    BITWISE_AND     reduce using rule 36 (unary_operator -> BITWISE_AND .)
    MULTIPLY        reduce using rule 36 (unary_operator -> BITWISE_AND .)
    ADD             reduce using rule 36 (unary_operator -> BITWISE_AND .)
    SUBSTRACT       reduce using rule 36 (unary_operator -> BITWISE_AND .)
    BITWISE_ONE_COMPLEMENT reduce using rule 36 (unary_operator -> BITWISE_AND .)
    LOGICAL_NOT     reduce using rule 36 (unary_operator -> BITWISE_AND .)
    IDENTIFIER      reduce using rule 36 (unary_operator -> BITWISE_AND .)
    NULL            reduce using rule 36 (unary_operator -> BITWISE_AND .)
    INT_CONSTANT    reduce using rule 36 (unary_operator -> BITWISE_AND .)
    HEX_CONSTANT    reduce using rule 36 (unary_operator -> BITWISE_AND .)
    OCTAL_CONSTANT  reduce using rule 36 (unary_operator -> BITWISE_AND .)
    EXPONENT_CONSTANT reduce using rule 36 (unary_operator -> BITWISE_AND .)
    REAL_CONSTANT   reduce using rule 36 (unary_operator -> BITWISE_AND .)
    CHAR_CONSTANT   reduce using rule 36 (unary_operator -> BITWISE_AND .)
    STR_CONSTANT    reduce using rule 36 (unary_operator -> BITWISE_AND .)


state 108

    (37) unary_operator -> MULTIPLY .

    L_PAREN         reduce using rule 37 (unary_operator -> MULTIPLY .)
    INCREMENT       reduce using rule 37 (unary_operator -> MULTIPLY .)
    DECREMENT       reduce using rule 37 (unary_operator -> MULTIPLY .)
    SIZEOF          reduce using rule 37 (unary_operator -> MULTIPLY .)
    BITWISE_AND     reduce using rule 37 (unary_operator -> MULTIPLY .)
    MULTIPLY        reduce using rule 37 (unary_operator -> MULTIPLY .)
    ADD             reduce using rule 37 (unary_operator -> MULTIPLY .)
    SUBSTRACT       reduce using rule 37 (unary_operator -> MULTIPLY .)
    BITWISE_ONE_COMPLEMENT reduce using rule 37 (unary_operator -> MULTIPLY .)
    LOGICAL_NOT     reduce using rule 37 (unary_operator -> MULTIPLY .)
    IDENTIFIER      reduce using rule 37 (unary_operator -> MULTIPLY .)
    NULL            reduce using rule 37 (unary_operator -> MULTIPLY .)
    INT_CONSTANT    reduce using rule 37 (unary_operator -> MULTIPLY .)
    HEX_CONSTANT    reduce using rule 37 (unary_operator -> MULTIPLY .)
    OCTAL_CONSTANT  reduce using rule 37 (unary_operator -> MULTIPLY .)
    EXPONENT_CONSTANT reduce using rule 37 (unary_operator -> MULTIPLY .)
    REAL_CONSTANT   reduce using rule 37 (unary_operator -> MULTIPLY .)
    CHAR_CONSTANT   reduce using rule 37 (unary_operator -> MULTIPLY .)
    STR_CONSTANT    reduce using rule 37 (unary_operator -> MULTIPLY .)


state 109

    (38) unary_operator -> ADD .

    L_PAREN         reduce using rule 38 (unary_operator -> ADD .)
    INCREMENT       reduce using rule 38 (unary_operator -> ADD .)
    DECREMENT       reduce using rule 38 (unary_operator -> ADD .)
    SIZEOF          reduce using rule 38 (unary_operator -> ADD .)
    BITWISE_AND     reduce using rule 38 (unary_operator -> ADD .)
    MULTIPLY        reduce using rule 38 (unary_operator -> ADD .)
    ADD             reduce using rule 38 (unary_operator -> ADD .)
    SUBSTRACT       reduce using rule 38 (unary_operator -> ADD .)
    BITWISE_ONE_COMPLEMENT reduce using rule 38 (unary_operator -> ADD .)
    LOGICAL_NOT     reduce using rule 38 (unary_operator -> ADD .)
    IDENTIFIER      reduce using rule 38 (unary_operator -> ADD .)
    NULL            reduce using rule 38 (unary_operator -> ADD .)
    INT_CONSTANT    reduce using rule 38 (unary_operator -> ADD .)
    HEX_CONSTANT    reduce using rule 38 (unary_operator -> ADD .)
    OCTAL_CONSTANT  reduce using rule 38 (unary_operator -> ADD .)
    EXPONENT_CONSTANT reduce using rule 38 (unary_operator -> ADD .)
    REAL_CONSTANT   reduce using rule 38 (unary_operator -> ADD .)
    CHAR_CONSTANT   reduce using rule 38 (unary_operator -> ADD .)
    STR_CONSTANT    reduce using rule 38 (unary_operator -> ADD .)


state 110

    (39) unary_operator -> SUBSTRACT .

    L_PAREN         reduce using rule 39 (unary_operator -> SUBSTRACT .)
    INCREMENT       reduce using rule 39 (unary_operator -> SUBSTRACT .)
    DECREMENT       reduce using rule 39 (unary_operator -> SUBSTRACT .)
    SIZEOF          reduce using rule 39 (unary_operator -> SUBSTRACT .)
    BITWISE_AND     reduce using rule 39 (unary_operator -> SUBSTRACT .)
    MULTIPLY        reduce using rule 39 (unary_operator -> SUBSTRACT .)
    ADD             reduce using rule 39 (unary_operator -> SUBSTRACT .)
    SUBSTRACT       reduce using rule 39 (unary_operator -> SUBSTRACT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 39 (unary_operator -> SUBSTRACT .)
    LOGICAL_NOT     reduce using rule 39 (unary_operator -> SUBSTRACT .)
    IDENTIFIER      reduce using rule 39 (unary_operator -> SUBSTRACT .)
    NULL            reduce using rule 39 (unary_operator -> SUBSTRACT .)
    INT_CONSTANT    reduce using rule 39 (unary_operator -> SUBSTRACT .)
    HEX_CONSTANT    reduce using rule 39 (unary_operator -> SUBSTRACT .)
    OCTAL_CONSTANT  reduce using rule 39 (unary_operator -> SUBSTRACT .)
    EXPONENT_CONSTANT reduce using rule 39 (unary_operator -> SUBSTRACT .)
    REAL_CONSTANT   reduce using rule 39 (unary_operator -> SUBSTRACT .)
    CHAR_CONSTANT   reduce using rule 39 (unary_operator -> SUBSTRACT .)
    STR_CONSTANT    reduce using rule 39 (unary_operator -> SUBSTRACT .)


state 111

    (40) unary_operator -> BITWISE_ONE_COMPLEMENT .

    L_PAREN         reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    INCREMENT       reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    DECREMENT       reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    SIZEOF          reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    BITWISE_AND     reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    MULTIPLY        reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    ADD             reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    SUBSTRACT       reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    LOGICAL_NOT     reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    IDENTIFIER      reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    NULL            reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    INT_CONSTANT    reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    HEX_CONSTANT    reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    OCTAL_CONSTANT  reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    EXPONENT_CONSTANT reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    REAL_CONSTANT   reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    CHAR_CONSTANT   reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)
    STR_CONSTANT    reduce using rule 40 (unary_operator -> BITWISE_ONE_COMPLEMENT .)


state 112

    (41) unary_operator -> LOGICAL_NOT .

    L_PAREN         reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    INCREMENT       reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    DECREMENT       reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    SIZEOF          reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    BITWISE_AND     reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    MULTIPLY        reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    ADD             reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    SUBSTRACT       reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    LOGICAL_NOT     reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    IDENTIFIER      reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    NULL            reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    INT_CONSTANT    reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    HEX_CONSTANT    reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    OCTAL_CONSTANT  reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    EXPONENT_CONSTANT reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    REAL_CONSTANT   reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    CHAR_CONSTANT   reduce using rule 41 (unary_operator -> LOGICAL_NOT .)
    STR_CONSTANT    reduce using rule 41 (unary_operator -> LOGICAL_NOT .)


state 113

    (68) logical_and_expression -> inclusive_or_expression .
    (67) inclusive_or_expression -> inclusive_or_expression . BITWISE_OR exclusive_or_expression

    LOGICAL_AND     reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    QUES_MARK       reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    LOGICAL_OR      reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    SEMI_COLON      reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    R_SQBR          reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    COLON           reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    R_PAREN         reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    R_BRACES        reduce using rule 68 (logical_and_expression -> inclusive_or_expression .)
    BITWISE_OR      shift and go to state 208


state 114

    (11) primary_expression -> NULL .

    L_SQBR          reduce using rule 11 (primary_expression -> NULL .)
    L_PAREN         reduce using rule 11 (primary_expression -> NULL .)
    DOT             reduce using rule 11 (primary_expression -> NULL .)
    ARROW           reduce using rule 11 (primary_expression -> NULL .)
    INCREMENT       reduce using rule 11 (primary_expression -> NULL .)
    DECREMENT       reduce using rule 11 (primary_expression -> NULL .)
    ASSIGNMENT      reduce using rule 11 (primary_expression -> NULL .)
    MULTIPLY_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    DIVIDE_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    MODULUS_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    ADD_ASSIGNMENT  reduce using rule 11 (primary_expression -> NULL .)
    SUBSTRACT_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    BITWISE_AND_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    BITWISE_OR_ASSIGNMENT reduce using rule 11 (primary_expression -> NULL .)
    MULTIPLY        reduce using rule 11 (primary_expression -> NULL .)
    DIVIDE          reduce using rule 11 (primary_expression -> NULL .)
    MODULUS         reduce using rule 11 (primary_expression -> NULL .)
    ADD             reduce using rule 11 (primary_expression -> NULL .)
    SUBSTRACT       reduce using rule 11 (primary_expression -> NULL .)
    LEFT_SHIFT      reduce using rule 11 (primary_expression -> NULL .)
    RIGHT_SHIFT     reduce using rule 11 (primary_expression -> NULL .)
    LESS            reduce using rule 11 (primary_expression -> NULL .)
    GREATER         reduce using rule 11 (primary_expression -> NULL .)
    LESS_EQUALS     reduce using rule 11 (primary_expression -> NULL .)
    GREATER_EQUALS  reduce using rule 11 (primary_expression -> NULL .)
    EQUALS          reduce using rule 11 (primary_expression -> NULL .)
    NOT_EQUALS      reduce using rule 11 (primary_expression -> NULL .)
    BITWISE_AND     reduce using rule 11 (primary_expression -> NULL .)
    BITWISE_XOR     reduce using rule 11 (primary_expression -> NULL .)
    BITWISE_OR      reduce using rule 11 (primary_expression -> NULL .)
    LOGICAL_AND     reduce using rule 11 (primary_expression -> NULL .)
    QUES_MARK       reduce using rule 11 (primary_expression -> NULL .)
    LOGICAL_OR      reduce using rule 11 (primary_expression -> NULL .)
    SEMI_COLON      reduce using rule 11 (primary_expression -> NULL .)
    COMMA           reduce using rule 11 (primary_expression -> NULL .)
    R_SQBR          reduce using rule 11 (primary_expression -> NULL .)
    COLON           reduce using rule 11 (primary_expression -> NULL .)
    R_PAREN         reduce using rule 11 (primary_expression -> NULL .)
    R_BRACES        reduce using rule 11 (primary_expression -> NULL .)


state 115

    (12) primary_expression -> INT_CONSTANT .

    L_SQBR          reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    L_PAREN         reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    DOT             reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    ARROW           reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    INCREMENT       reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    DECREMENT       reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    ASSIGNMENT      reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    MULTIPLY        reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    DIVIDE          reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    MODULUS         reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    ADD             reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    SUBSTRACT       reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    LEFT_SHIFT      reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    LESS            reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    GREATER         reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    LESS_EQUALS     reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    GREATER_EQUALS  reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    EQUALS          reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    NOT_EQUALS      reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    BITWISE_AND     reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    BITWISE_XOR     reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    BITWISE_OR      reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    LOGICAL_AND     reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    QUES_MARK       reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    LOGICAL_OR      reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    SEMI_COLON      reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    COMMA           reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    R_SQBR          reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    COLON           reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    R_PAREN         reduce using rule 12 (primary_expression -> INT_CONSTANT .)
    R_BRACES        reduce using rule 12 (primary_expression -> INT_CONSTANT .)


state 116

    (13) primary_expression -> HEX_CONSTANT .

    L_SQBR          reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    L_PAREN         reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    DOT             reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    ARROW           reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    INCREMENT       reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    DECREMENT       reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    ASSIGNMENT      reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    MULTIPLY        reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    DIVIDE          reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    MODULUS         reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    ADD             reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    SUBSTRACT       reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    LEFT_SHIFT      reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    LESS            reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    GREATER         reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    LESS_EQUALS     reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    GREATER_EQUALS  reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    EQUALS          reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    NOT_EQUALS      reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    BITWISE_AND     reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    BITWISE_XOR     reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    BITWISE_OR      reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    LOGICAL_AND     reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    QUES_MARK       reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    LOGICAL_OR      reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    SEMI_COLON      reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    COMMA           reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    R_SQBR          reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    COLON           reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    R_PAREN         reduce using rule 13 (primary_expression -> HEX_CONSTANT .)
    R_BRACES        reduce using rule 13 (primary_expression -> HEX_CONSTANT .)


state 117

    (14) primary_expression -> OCTAL_CONSTANT .

    L_SQBR          reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    L_PAREN         reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    DOT             reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    ARROW           reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    INCREMENT       reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    DECREMENT       reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    ASSIGNMENT      reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    MULTIPLY        reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    DIVIDE          reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    MODULUS         reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    ADD             reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    SUBSTRACT       reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    LEFT_SHIFT      reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    LESS            reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    GREATER         reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    LESS_EQUALS     reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    GREATER_EQUALS  reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    EQUALS          reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    NOT_EQUALS      reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_AND     reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_XOR     reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    BITWISE_OR      reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    LOGICAL_AND     reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    QUES_MARK       reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    LOGICAL_OR      reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    SEMI_COLON      reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    COMMA           reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    R_SQBR          reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    COLON           reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    R_PAREN         reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)
    R_BRACES        reduce using rule 14 (primary_expression -> OCTAL_CONSTANT .)


state 118

    (15) primary_expression -> EXPONENT_CONSTANT .

    L_SQBR          reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    L_PAREN         reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    DOT             reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    ARROW           reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    INCREMENT       reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    DECREMENT       reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    ASSIGNMENT      reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    MULTIPLY        reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    DIVIDE          reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    MODULUS         reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    ADD             reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    SUBSTRACT       reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    LEFT_SHIFT      reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    LESS            reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    GREATER         reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    LESS_EQUALS     reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    GREATER_EQUALS  reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    EQUALS          reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    NOT_EQUALS      reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_AND     reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_XOR     reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    BITWISE_OR      reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    LOGICAL_AND     reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    QUES_MARK       reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    LOGICAL_OR      reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    SEMI_COLON      reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    COMMA           reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    R_SQBR          reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    COLON           reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    R_PAREN         reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)
    R_BRACES        reduce using rule 15 (primary_expression -> EXPONENT_CONSTANT .)


state 119

    (16) primary_expression -> REAL_CONSTANT .

    L_SQBR          reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    L_PAREN         reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    DOT             reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    ARROW           reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    INCREMENT       reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    DECREMENT       reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    ASSIGNMENT      reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    MULTIPLY        reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    DIVIDE          reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    MODULUS         reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    ADD             reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    SUBSTRACT       reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    LEFT_SHIFT      reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    LESS            reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    GREATER         reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    LESS_EQUALS     reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    GREATER_EQUALS  reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    EQUALS          reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    NOT_EQUALS      reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    BITWISE_AND     reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    BITWISE_XOR     reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    BITWISE_OR      reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    LOGICAL_AND     reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    QUES_MARK       reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    LOGICAL_OR      reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    SEMI_COLON      reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    COMMA           reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    R_SQBR          reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    COLON           reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    R_PAREN         reduce using rule 16 (primary_expression -> REAL_CONSTANT .)
    R_BRACES        reduce using rule 16 (primary_expression -> REAL_CONSTANT .)


state 120

    (17) primary_expression -> CHAR_CONSTANT .

    L_SQBR          reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    L_PAREN         reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    DOT             reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    ARROW           reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    INCREMENT       reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    DECREMENT       reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    ASSIGNMENT      reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    MULTIPLY        reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    DIVIDE          reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    MODULUS         reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    ADD             reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    SUBSTRACT       reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    LEFT_SHIFT      reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    LESS            reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    GREATER         reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    LESS_EQUALS     reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    GREATER_EQUALS  reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    EQUALS          reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    NOT_EQUALS      reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_AND     reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_XOR     reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    BITWISE_OR      reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    LOGICAL_AND     reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    QUES_MARK       reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    LOGICAL_OR      reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    SEMI_COLON      reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    COMMA           reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    R_SQBR          reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    COLON           reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    R_PAREN         reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)
    R_BRACES        reduce using rule 17 (primary_expression -> CHAR_CONSTANT .)


state 121

    (18) primary_expression -> STR_CONSTANT .

    L_SQBR          reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    L_PAREN         reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    DOT             reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    ARROW           reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    INCREMENT       reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    DECREMENT       reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    ASSIGNMENT      reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    MULTIPLY_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    DIVIDE_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    MODULUS_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    ADD_ASSIGNMENT  reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    MULTIPLY        reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    DIVIDE          reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    MODULUS         reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    ADD             reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    SUBSTRACT       reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    LEFT_SHIFT      reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    RIGHT_SHIFT     reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    LESS            reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    GREATER         reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    LESS_EQUALS     reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    GREATER_EQUALS  reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    EQUALS          reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    NOT_EQUALS      reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    BITWISE_AND     reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    BITWISE_XOR     reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    BITWISE_OR      reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    LOGICAL_AND     reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    QUES_MARK       reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    LOGICAL_OR      reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    SEMI_COLON      reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    COMMA           reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    R_SQBR          reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    COLON           reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    R_PAREN         reduce using rule 18 (primary_expression -> STR_CONSTANT .)
    R_BRACES        reduce using rule 18 (primary_expression -> STR_CONSTANT .)


state 122

    (66) inclusive_or_expression -> exclusive_or_expression .
    (65) exclusive_or_expression -> exclusive_or_expression . BITWISE_XOR and_expression

    BITWISE_OR      reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    LOGICAL_AND     reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    QUES_MARK       reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    LOGICAL_OR      reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    SEMI_COLON      reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    R_SQBR          reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    COLON           reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    R_PAREN         reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    R_BRACES        reduce using rule 66 (inclusive_or_expression -> exclusive_or_expression .)
    BITWISE_XOR     shift and go to state 209


state 123

    (64) exclusive_or_expression -> and_expression .
    (63) and_expression -> and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 64 (exclusive_or_expression -> and_expression .)
    BITWISE_OR      reduce using rule 64 (exclusive_or_expression -> and_expression .)
    LOGICAL_AND     reduce using rule 64 (exclusive_or_expression -> and_expression .)
    QUES_MARK       reduce using rule 64 (exclusive_or_expression -> and_expression .)
    LOGICAL_OR      reduce using rule 64 (exclusive_or_expression -> and_expression .)
    SEMI_COLON      reduce using rule 64 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 64 (exclusive_or_expression -> and_expression .)
    R_SQBR          reduce using rule 64 (exclusive_or_expression -> and_expression .)
    COLON           reduce using rule 64 (exclusive_or_expression -> and_expression .)
    R_PAREN         reduce using rule 64 (exclusive_or_expression -> and_expression .)
    R_BRACES        reduce using rule 64 (exclusive_or_expression -> and_expression .)
    BITWISE_AND     shift and go to state 210


state 124

    (62) and_expression -> equality_expression .
    (60) equality_expression -> equality_expression . EQUALS relational_expression
    (61) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    BITWISE_AND     reduce using rule 62 (and_expression -> equality_expression .)
    BITWISE_XOR     reduce using rule 62 (and_expression -> equality_expression .)
    BITWISE_OR      reduce using rule 62 (and_expression -> equality_expression .)
    LOGICAL_AND     reduce using rule 62 (and_expression -> equality_expression .)
    QUES_MARK       reduce using rule 62 (and_expression -> equality_expression .)
    LOGICAL_OR      reduce using rule 62 (and_expression -> equality_expression .)
    SEMI_COLON      reduce using rule 62 (and_expression -> equality_expression .)
    COMMA           reduce using rule 62 (and_expression -> equality_expression .)
    R_SQBR          reduce using rule 62 (and_expression -> equality_expression .)
    COLON           reduce using rule 62 (and_expression -> equality_expression .)
    R_PAREN         reduce using rule 62 (and_expression -> equality_expression .)
    R_BRACES        reduce using rule 62 (and_expression -> equality_expression .)
    EQUALS          shift and go to state 211
    NOT_EQUALS      shift and go to state 212


state 125

    (59) equality_expression -> relational_expression .
    (55) relational_expression -> relational_expression . LESS shift_expression
    (56) relational_expression -> relational_expression . GREATER shift_expression
    (57) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (58) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

    EQUALS          reduce using rule 59 (equality_expression -> relational_expression .)
    NOT_EQUALS      reduce using rule 59 (equality_expression -> relational_expression .)
    BITWISE_AND     reduce using rule 59 (equality_expression -> relational_expression .)
    BITWISE_XOR     reduce using rule 59 (equality_expression -> relational_expression .)
    BITWISE_OR      reduce using rule 59 (equality_expression -> relational_expression .)
    LOGICAL_AND     reduce using rule 59 (equality_expression -> relational_expression .)
    QUES_MARK       reduce using rule 59 (equality_expression -> relational_expression .)
    LOGICAL_OR      reduce using rule 59 (equality_expression -> relational_expression .)
    SEMI_COLON      reduce using rule 59 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 59 (equality_expression -> relational_expression .)
    R_SQBR          reduce using rule 59 (equality_expression -> relational_expression .)
    COLON           reduce using rule 59 (equality_expression -> relational_expression .)
    R_PAREN         reduce using rule 59 (equality_expression -> relational_expression .)
    R_BRACES        reduce using rule 59 (equality_expression -> relational_expression .)
    LESS            shift and go to state 213
    GREATER         shift and go to state 214
    LESS_EQUALS     shift and go to state 215
    GREATER_EQUALS  shift and go to state 216


state 126

    (54) relational_expression -> shift_expression .
    (52) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (53) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 54 (relational_expression -> shift_expression .)
    GREATER         reduce using rule 54 (relational_expression -> shift_expression .)
    LESS_EQUALS     reduce using rule 54 (relational_expression -> shift_expression .)
    GREATER_EQUALS  reduce using rule 54 (relational_expression -> shift_expression .)
    EQUALS          reduce using rule 54 (relational_expression -> shift_expression .)
    NOT_EQUALS      reduce using rule 54 (relational_expression -> shift_expression .)
    BITWISE_AND     reduce using rule 54 (relational_expression -> shift_expression .)
    BITWISE_XOR     reduce using rule 54 (relational_expression -> shift_expression .)
    BITWISE_OR      reduce using rule 54 (relational_expression -> shift_expression .)
    LOGICAL_AND     reduce using rule 54 (relational_expression -> shift_expression .)
    QUES_MARK       reduce using rule 54 (relational_expression -> shift_expression .)
    LOGICAL_OR      reduce using rule 54 (relational_expression -> shift_expression .)
    SEMI_COLON      reduce using rule 54 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 54 (relational_expression -> shift_expression .)
    R_SQBR          reduce using rule 54 (relational_expression -> shift_expression .)
    COLON           reduce using rule 54 (relational_expression -> shift_expression .)
    R_PAREN         reduce using rule 54 (relational_expression -> shift_expression .)
    R_BRACES        reduce using rule 54 (relational_expression -> shift_expression .)
    LEFT_SHIFT      shift and go to state 217
    RIGHT_SHIFT     shift and go to state 218


state 127

    (51) shift_expression -> additive_expression .
    (49) additive_expression -> additive_expression . ADD multiplicative_expression
    (50) additive_expression -> additive_expression . SUBSTRACT multiplicative_expression

    LEFT_SHIFT      reduce using rule 51 (shift_expression -> additive_expression .)
    RIGHT_SHIFT     reduce using rule 51 (shift_expression -> additive_expression .)
    LESS            reduce using rule 51 (shift_expression -> additive_expression .)
    GREATER         reduce using rule 51 (shift_expression -> additive_expression .)
    LESS_EQUALS     reduce using rule 51 (shift_expression -> additive_expression .)
    GREATER_EQUALS  reduce using rule 51 (shift_expression -> additive_expression .)
    EQUALS          reduce using rule 51 (shift_expression -> additive_expression .)
    NOT_EQUALS      reduce using rule 51 (shift_expression -> additive_expression .)
    BITWISE_AND     reduce using rule 51 (shift_expression -> additive_expression .)
    BITWISE_XOR     reduce using rule 51 (shift_expression -> additive_expression .)
    BITWISE_OR      reduce using rule 51 (shift_expression -> additive_expression .)
    LOGICAL_AND     reduce using rule 51 (shift_expression -> additive_expression .)
    QUES_MARK       reduce using rule 51 (shift_expression -> additive_expression .)
    LOGICAL_OR      reduce using rule 51 (shift_expression -> additive_expression .)
    SEMI_COLON      reduce using rule 51 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 51 (shift_expression -> additive_expression .)
    R_SQBR          reduce using rule 51 (shift_expression -> additive_expression .)
    COLON           reduce using rule 51 (shift_expression -> additive_expression .)
    R_PAREN         reduce using rule 51 (shift_expression -> additive_expression .)
    R_BRACES        reduce using rule 51 (shift_expression -> additive_expression .)
    ADD             shift and go to state 219
    SUBSTRACT       shift and go to state 220


state 128

    (48) additive_expression -> multiplicative_expression .
    (45) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (46) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (47) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    ADD             reduce using rule 48 (additive_expression -> multiplicative_expression .)
    SUBSTRACT       reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LESS            reduce using rule 48 (additive_expression -> multiplicative_expression .)
    GREATER         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LESS_EQUALS     reduce using rule 48 (additive_expression -> multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 48 (additive_expression -> multiplicative_expression .)
    EQUALS          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    NOT_EQUALS      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    BITWISE_AND     reduce using rule 48 (additive_expression -> multiplicative_expression .)
    BITWISE_XOR     reduce using rule 48 (additive_expression -> multiplicative_expression .)
    BITWISE_OR      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LOGICAL_AND     reduce using rule 48 (additive_expression -> multiplicative_expression .)
    QUES_MARK       reduce using rule 48 (additive_expression -> multiplicative_expression .)
    LOGICAL_OR      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    SEMI_COLON      reduce using rule 48 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    R_SQBR          reduce using rule 48 (additive_expression -> multiplicative_expression .)
    COLON           reduce using rule 48 (additive_expression -> multiplicative_expression .)
    R_PAREN         reduce using rule 48 (additive_expression -> multiplicative_expression .)
    R_BRACES        reduce using rule 48 (additive_expression -> multiplicative_expression .)
    MULTIPLY        shift and go to state 221
    DIVIDE          shift and go to state 222
    MODULUS         shift and go to state 223


state 129

    (100) init_declarator -> declarator .
    (101) init_declarator -> declarator . ASSIGNMENT initializer

    SEMI_COLON      reduce using rule 100 (init_declarator -> declarator .)
    COMMA           reduce using rule 100 (init_declarator -> declarator .)
    ASSIGNMENT      shift and go to state 65


state 130

    (149) direct_declarator -> direct_declarator L_SQBR constant_expression . R_SQBR

    R_SQBR          shift and go to state 224


state 131

    (150) direct_declarator -> direct_declarator L_SQBR R_SQBR .

    L_SQBR          reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    L_PAREN         reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    L_BRACES        reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    TYPEDEF         reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    EXTERN          reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    STATIC          reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    AUTO            reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    REGISTER        reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    VOID            reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    CHAR            reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    SHORT           reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    INT             reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    LONG            reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    FLOAT           reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    DOUBLE          reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    SIGNED          reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    UNSIGNED        reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    BOOL            reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    CONST           reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    VOLATILE        reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    ENUM            reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    STRUCT          reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    UNION           reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    ASSIGNMENT      reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    SEMI_COLON      reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    COMMA           reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    R_PAREN         reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)
    COLON           reduce using rule 150 (direct_declarator -> direct_declarator L_SQBR R_SQBR .)


state 132

    (89) constant_expression -> conditional_expression .

    R_SQBR          reduce using rule 89 (constant_expression -> conditional_expression .)
    COLON           reduce using rule 89 (constant_expression -> conditional_expression .)
    SEMI_COLON      reduce using rule 89 (constant_expression -> conditional_expression .)
    COMMA           reduce using rule 89 (constant_expression -> conditional_expression .)
    R_BRACES        reduce using rule 89 (constant_expression -> conditional_expression .)


state 133

    (42) cast_expression -> unary_expression .

    MULTIPLY        reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 42 (cast_expression -> unary_expression .)
    MODULUS         reduce using rule 42 (cast_expression -> unary_expression .)
    ADD             reduce using rule 42 (cast_expression -> unary_expression .)
    SUBSTRACT       reduce using rule 42 (cast_expression -> unary_expression .)
    LEFT_SHIFT      reduce using rule 42 (cast_expression -> unary_expression .)
    RIGHT_SHIFT     reduce using rule 42 (cast_expression -> unary_expression .)
    LESS            reduce using rule 42 (cast_expression -> unary_expression .)
    GREATER         reduce using rule 42 (cast_expression -> unary_expression .)
    LESS_EQUALS     reduce using rule 42 (cast_expression -> unary_expression .)
    GREATER_EQUALS  reduce using rule 42 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 42 (cast_expression -> unary_expression .)
    NOT_EQUALS      reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_AND     reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_XOR     reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_OR      reduce using rule 42 (cast_expression -> unary_expression .)
    LOGICAL_AND     reduce using rule 42 (cast_expression -> unary_expression .)
    QUES_MARK       reduce using rule 42 (cast_expression -> unary_expression .)
    LOGICAL_OR      reduce using rule 42 (cast_expression -> unary_expression .)
    R_SQBR          reduce using rule 42 (cast_expression -> unary_expression .)
    COLON           reduce using rule 42 (cast_expression -> unary_expression .)
    ASSIGNMENT      reduce using rule 42 (cast_expression -> unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 42 (cast_expression -> unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 42 (cast_expression -> unary_expression .)
    SEMI_COLON      reduce using rule 42 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 42 (cast_expression -> unary_expression .)
    R_PAREN         reduce using rule 42 (cast_expression -> unary_expression .)
    R_BRACES        reduce using rule 42 (cast_expression -> unary_expression .)


state 134

    (43) cast_expression -> L_PAREN . type_specifier R_PAREN cast_expression
    (19) primary_expression -> L_PAREN . expression R_PAREN
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    type_specifier                 shift and go to state 171
    cast_expression                shift and go to state 103
    expression                     shift and go to state 170
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    assignment_expression          shift and go to state 95
    struct_or_union                shift and go to state 35
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 135

    (10) primary_expression -> IDENTIFIER .

    L_SQBR          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    L_PAREN         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ARROW           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    INCREMENT       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DECREMENT       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MULTIPLY        reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MODULUS         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ADD             reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SUBSTRACT       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LESS            reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GREATER         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LESS_EQUALS     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 10 (primary_expression -> IDENTIFIER .)
    EQUALS          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    NOT_EQUALS      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_AND     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_OR      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LOGICAL_AND     reduce using rule 10 (primary_expression -> IDENTIFIER .)
    QUES_MARK       reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LOGICAL_OR      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    R_SQBR          reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ASSIGNMENT      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MULTIPLY_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    MODULUS_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    ADD_ASSIGNMENT  reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SUBSTRACT_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_AND_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    BITWISE_OR_ASSIGNMENT reduce using rule 10 (primary_expression -> IDENTIFIER .)
    SEMI_COLON      reduce using rule 10 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    COLON           reduce using rule 10 (primary_expression -> IDENTIFIER .)
    R_PAREN         reduce using rule 10 (primary_expression -> IDENTIFIER .)
    R_BRACES        reduce using rule 10 (primary_expression -> IDENTIFIER .)


state 136

    (151) direct_declarator -> direct_declarator L_PAREN parameter_type_list . R_PAREN
    (161) parameter_type_list -> parameter_type_list . COMMA parameter_declaration

    R_PAREN         shift and go to state 225
    COMMA           shift and go to state 226


state 137

    (153) direct_declarator -> direct_declarator L_PAREN R_PAREN .

    L_SQBR          reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    L_BRACES        reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    TYPEDEF         reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    EXTERN          reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    STATIC          reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    AUTO            reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    REGISTER        reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    VOID            reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    CHAR            reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    SHORT           reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    INT             reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    LONG            reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    FLOAT           reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    DOUBLE          reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    SIGNED          reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    UNSIGNED        reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    BOOL            reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    CONST           reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    VOLATILE        reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    ENUM            reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    STRUCT          reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    UNION           reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    ASSIGNMENT      reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    SEMI_COLON      reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    COMMA           reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)
    COLON           reduce using rule 153 (direct_declarator -> direct_declarator L_PAREN R_PAREN .)


state 138

    (152) direct_declarator -> direct_declarator L_PAREN identifier_list . R_PAREN
    (166) identifier_list -> identifier_list . COMMA IDENTIFIER

    R_PAREN         shift and go to state 227
    COMMA           shift and go to state 228


state 139

    (160) parameter_type_list -> parameter_declaration .

    R_PAREN         reduce using rule 160 (parameter_type_list -> parameter_declaration .)
    COMMA           reduce using rule 160 (parameter_type_list -> parameter_declaration .)


state 140

    (165) identifier_list -> IDENTIFIER .

    R_PAREN         reduce using rule 165 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 165 (identifier_list -> IDENTIFIER .)


state 141

    (162) parameter_declaration -> declaration_specifiers . declarator
    (163) parameter_declaration -> declaration_specifiers . abstract_declarator
    (164) parameter_declaration -> declaration_specifiers .
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN
    (172) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (173) direct_abstract_declarator -> . L_SQBR R_SQBR
    (174) direct_abstract_declarator -> . L_SQBR constant_expression R_SQBR
    (175) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR R_SQBR
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR constant_expression R_SQBR
    (177) direct_abstract_declarator -> . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 164 (parameter_declaration -> declaration_specifiers .)
    COMMA           reduce using rule 164 (parameter_declaration -> declaration_specifiers .)
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 233
    L_SQBR          shift and go to state 234

    declarator                     shift and go to state 229
    abstract_declarator            shift and go to state 230
    pointer                        shift and go to state 231
    direct_declarator              shift and go to state 12
    direct_abstract_declarator     shift and go to state 232

state 142

    (157) pointer -> MULTIPLY type_qualifier_list pointer .

    IDENTIFIER      reduce using rule 157 (pointer -> MULTIPLY type_qualifier_list pointer .)
    L_PAREN         reduce using rule 157 (pointer -> MULTIPLY type_qualifier_list pointer .)
    L_SQBR          reduce using rule 157 (pointer -> MULTIPLY type_qualifier_list pointer .)
    R_PAREN         reduce using rule 157 (pointer -> MULTIPLY type_qualifier_list pointer .)
    COMMA           reduce using rule 157 (pointer -> MULTIPLY type_qualifier_list pointer .)


state 143

    (159) type_qualifier_list -> type_qualifier_list type_qualifier .

    MULTIPLY        reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    CONST           reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    VOLATILE        reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    IDENTIFIER      reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_PAREN         reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    L_SQBR          reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    R_PAREN         reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)
    COMMA           reduce using rule 159 (type_qualifier_list -> type_qualifier_list type_qualifier .)


state 144

    (148) direct_declarator -> L_PAREN declarator R_PAREN .

    L_SQBR          reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    L_PAREN         reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    L_BRACES        reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    TYPEDEF         reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    EXTERN          reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    STATIC          reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    AUTO            reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    REGISTER        reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    VOID            reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    CHAR            reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    SHORT           reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    INT             reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    LONG            reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    FLOAT           reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    DOUBLE          reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    SIGNED          reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    UNSIGNED        reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    BOOL            reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    CONST           reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    VOLATILE        reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    ENUM            reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    STRUCT          reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    UNION           reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    ASSIGNMENT      reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    SEMI_COLON      reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    COMMA           reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    R_PAREN         reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)
    COLON           reduce using rule 148 (direct_declarator -> L_PAREN declarator R_PAREN .)


state 145

    (119) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES . struct_declaration_list R_BRACES
    (124) struct_declaration_list -> . struct_declaration
    (125) struct_declaration_list -> . struct_declaration_list struct_declaration
    (126) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI_COLON
    (127) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (128) specifier_qualifier_list -> . type_specifier
    (129) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (130) specifier_qualifier_list -> . type_qualifier
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    struct_or_union                shift and go to state 35
    struct_declaration_list        shift and go to state 235
    struct_declaration             shift and go to state 147
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 146

    (120) struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list . R_BRACES
    (125) struct_declaration_list -> struct_declaration_list . struct_declaration
    (126) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI_COLON
    (127) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (128) specifier_qualifier_list -> . type_specifier
    (129) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (130) specifier_qualifier_list -> . type_qualifier
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    R_BRACES        shift and go to state 236
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    struct_or_union                shift and go to state 35
    struct_declaration             shift and go to state 237
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 147

    (124) struct_declaration_list -> struct_declaration .

    R_BRACES        reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    VOID            reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    CHAR            reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    SHORT           reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    INT             reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    LONG            reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    FLOAT           reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    DOUBLE          reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    SIGNED          reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    UNSIGNED        reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    BOOL            reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    CONST           reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    VOLATILE        reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    ENUM            reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    STRUCT          reduce using rule 124 (struct_declaration_list -> struct_declaration .)
    UNION           reduce using rule 124 (struct_declaration_list -> struct_declaration .)


state 148

    (126) struct_declaration -> specifier_qualifier_list . struct_declarator_list SEMI_COLON
    (131) struct_declarator_list -> . struct_declarator
    (132) struct_declarator_list -> . struct_declarator_list COMMA struct_declarator
    (133) struct_declarator -> . declarator
    (134) struct_declarator -> . COLON constant_expression
    (135) struct_declarator -> . declarator COLON constant_expression
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN

    COLON           shift and go to state 241
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34

    struct_declarator_list         shift and go to state 238
    struct_declarator              shift and go to state 239
    declarator                     shift and go to state 240
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 149

    (127) specifier_qualifier_list -> type_specifier . specifier_qualifier_list
    (128) specifier_qualifier_list -> type_specifier .
    (127) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (128) specifier_qualifier_list -> . type_specifier
    (129) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (130) specifier_qualifier_list -> . type_qualifier
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    COLON           reduce using rule 128 (specifier_qualifier_list -> type_specifier .)
    MULTIPLY        reduce using rule 128 (specifier_qualifier_list -> type_specifier .)
    IDENTIFIER      reduce using rule 128 (specifier_qualifier_list -> type_specifier .)
    L_PAREN         reduce using rule 128 (specifier_qualifier_list -> type_specifier .)
    L_SQBR          reduce using rule 128 (specifier_qualifier_list -> type_specifier .)
    R_PAREN         reduce using rule 128 (specifier_qualifier_list -> type_specifier .)
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    type_specifier                 shift and go to state 149
    specifier_qualifier_list       shift and go to state 242
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 150

    (129) specifier_qualifier_list -> type_qualifier . specifier_qualifier_list
    (130) specifier_qualifier_list -> type_qualifier .
    (127) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (128) specifier_qualifier_list -> . type_specifier
    (129) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (130) specifier_qualifier_list -> . type_qualifier
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    COLON           reduce using rule 130 (specifier_qualifier_list -> type_qualifier .)
    MULTIPLY        reduce using rule 130 (specifier_qualifier_list -> type_qualifier .)
    IDENTIFIER      reduce using rule 130 (specifier_qualifier_list -> type_qualifier .)
    L_PAREN         reduce using rule 130 (specifier_qualifier_list -> type_qualifier .)
    L_SQBR          reduce using rule 130 (specifier_qualifier_list -> type_qualifier .)
    R_PAREN         reduce using rule 130 (specifier_qualifier_list -> type_qualifier .)
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    type_qualifier                 shift and go to state 150
    specifier_qualifier_list       shift and go to state 243
    type_specifier                 shift and go to state 149
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 151

    (136) enum_specifier -> ENUM L_BRACES enumerator_list . R_BRACES
    (140) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACES        shift and go to state 244
    COMMA           shift and go to state 245


state 152

    (139) enumerator_list -> enumerator .

    R_BRACES        reduce using rule 139 (enumerator_list -> enumerator .)
    COMMA           reduce using rule 139 (enumerator_list -> enumerator .)


state 153

    (141) enumerator -> IDENTIFIER .
    (142) enumerator -> IDENTIFIER . ASSIGNMENT constant_expression

    R_BRACES        reduce using rule 141 (enumerator -> IDENTIFIER .)
    COMMA           reduce using rule 141 (enumerator -> IDENTIFIER .)
    ASSIGNMENT      shift and go to state 246


state 154

    (137) enum_specifier -> ENUM IDENTIFIER L_BRACES . enumerator_list R_BRACES
    (139) enumerator_list -> . enumerator
    (140) enumerator_list -> . enumerator_list COMMA enumerator
    (141) enumerator -> . IDENTIFIER
    (142) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 153

    enumerator_list                shift and go to state 247
    enumerator                     shift and go to state 152

state 155

    (6) function_definition -> declaration_specifiers declarator declaration_list compound_statement .

    TYPEDEF         reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    EXTERN          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STATIC          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    AUTO            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    REGISTER        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOID            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CHAR            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SHORT           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    INT             reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    LONG            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    FLOAT           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    DOUBLE          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    SIGNED          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNSIGNED        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    BOOL            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    CONST           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    VOLATILE        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    MULTIPLY        reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    IDENTIFIER      reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    L_PAREN         reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    ENUM            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    STRUCT          reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    UNION           reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)
    $end            reduce using rule 6 (function_definition -> declaration_specifiers declarator declaration_list compound_statement .)


state 156

    (101) init_declarator -> declarator ASSIGNMENT initializer .

    SEMI_COLON      reduce using rule 101 (init_declarator -> declarator ASSIGNMENT initializer .)
    COMMA           reduce using rule 101 (init_declarator -> declarator ASSIGNMENT initializer .)


state 157

    (181) initializer -> assignment_expression .

    SEMI_COLON      reduce using rule 181 (initializer -> assignment_expression .)
    COMMA           reduce using rule 181 (initializer -> assignment_expression .)
    R_BRACES        reduce using rule 181 (initializer -> assignment_expression .)


state 158

    (182) initializer -> L_BRACES . initializer_list R_BRACES
    (183) initializer -> L_BRACES . initializer_list COMMA R_BRACES
    (184) initializer_list -> . initializer
    (185) initializer_list -> . initializer_list COMMA initializer
    (181) initializer -> . assignment_expression
    (182) initializer -> . L_BRACES initializer_list R_BRACES
    (183) initializer -> . L_BRACES initializer_list COMMA R_BRACES
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    L_BRACES        shift and go to state 158
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    initializer_list               shift and go to state 248
    initializer                    shift and go to state 249
    assignment_expression          shift and go to state 157
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 159

    (99) init_declarator_list -> init_declarator_list COMMA init_declarator .

    SEMI_COLON      reduce using rule 99 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    COMMA           reduce using rule 99 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 160

    (196) compound_statement -> L_BRACES statement_list R_BRACES .

    TYPEDEF         reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    EXTERN          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    STATIC          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    AUTO            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    REGISTER        reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    VOID            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    CHAR            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    SHORT           reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    INT             reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    LONG            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    FLOAT           reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    DOUBLE          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    SIGNED          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    UNSIGNED        reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    BOOL            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    CONST           reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    VOLATILE        reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    MULTIPLY        reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    IDENTIFIER      reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    L_PAREN         reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    ENUM            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    STRUCT          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    UNION           reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    $end            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    R_BRACES        reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    CASE            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    DEFAULT         reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    L_BRACES        reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    SEMI_COLON      reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    IF              reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    SWITCH          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    WHILE           reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    DO              reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    FOR             reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    GOTO            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    CONTINUE        reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    BREAK           reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    RETURN          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    INCREMENT       reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    DECREMENT       reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    SIZEOF          reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    BITWISE_AND     reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    ADD             reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    SUBSTRACT       reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    BITWISE_ONE_COMPLEMENT reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    LOGICAL_NOT     reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    NULL            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    INT_CONSTANT    reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    HEX_CONSTANT    reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    OCTAL_CONSTANT  reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    EXPONENT_CONSTANT reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    REAL_CONSTANT   reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    CHAR_CONSTANT   reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    STR_CONSTANT    reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)
    ELSE            reduce using rule 196 (compound_statement -> L_BRACES statement_list R_BRACES .)


state 161

    (202) statement_list -> statement_list statement .

    R_BRACES        reduce using rule 202 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 202 (statement_list -> statement_list statement .)
    CASE            reduce using rule 202 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 202 (statement_list -> statement_list statement .)
    L_BRACES        reduce using rule 202 (statement_list -> statement_list statement .)
    SEMI_COLON      reduce using rule 202 (statement_list -> statement_list statement .)
    IF              reduce using rule 202 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 202 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 202 (statement_list -> statement_list statement .)
    DO              reduce using rule 202 (statement_list -> statement_list statement .)
    FOR             reduce using rule 202 (statement_list -> statement_list statement .)
    GOTO            reduce using rule 202 (statement_list -> statement_list statement .)
    CONTINUE        reduce using rule 202 (statement_list -> statement_list statement .)
    BREAK           reduce using rule 202 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 202 (statement_list -> statement_list statement .)
    INCREMENT       reduce using rule 202 (statement_list -> statement_list statement .)
    DECREMENT       reduce using rule 202 (statement_list -> statement_list statement .)
    SIZEOF          reduce using rule 202 (statement_list -> statement_list statement .)
    BITWISE_AND     reduce using rule 202 (statement_list -> statement_list statement .)
    MULTIPLY        reduce using rule 202 (statement_list -> statement_list statement .)
    ADD             reduce using rule 202 (statement_list -> statement_list statement .)
    SUBSTRACT       reduce using rule 202 (statement_list -> statement_list statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 202 (statement_list -> statement_list statement .)
    LOGICAL_NOT     reduce using rule 202 (statement_list -> statement_list statement .)
    NULL            reduce using rule 202 (statement_list -> statement_list statement .)
    INT_CONSTANT    reduce using rule 202 (statement_list -> statement_list statement .)
    HEX_CONSTANT    reduce using rule 202 (statement_list -> statement_list statement .)
    OCTAL_CONSTANT  reduce using rule 202 (statement_list -> statement_list statement .)
    EXPONENT_CONSTANT reduce using rule 202 (statement_list -> statement_list statement .)
    REAL_CONSTANT   reduce using rule 202 (statement_list -> statement_list statement .)
    CHAR_CONSTANT   reduce using rule 202 (statement_list -> statement_list statement .)
    STR_CONSTANT    reduce using rule 202 (statement_list -> statement_list statement .)
    L_PAREN         reduce using rule 202 (statement_list -> statement_list statement .)


state 162

    (197) compound_statement -> L_BRACES declaration_list R_BRACES .

    TYPEDEF         reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    EXTERN          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    STATIC          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    AUTO            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    REGISTER        reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    VOID            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    CHAR            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    SHORT           reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    INT             reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    LONG            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    FLOAT           reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    DOUBLE          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    SIGNED          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    UNSIGNED        reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    BOOL            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    CONST           reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    VOLATILE        reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    MULTIPLY        reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    IDENTIFIER      reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    L_PAREN         reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    ENUM            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    STRUCT          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    UNION           reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    $end            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    R_BRACES        reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    CASE            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    DEFAULT         reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    L_BRACES        reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    SEMI_COLON      reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    IF              reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    SWITCH          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    WHILE           reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    DO              reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    FOR             reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    GOTO            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    CONTINUE        reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    BREAK           reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    RETURN          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    INCREMENT       reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    DECREMENT       reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    SIZEOF          reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    BITWISE_AND     reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    ADD             reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    SUBSTRACT       reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    BITWISE_ONE_COMPLEMENT reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    LOGICAL_NOT     reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    NULL            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    INT_CONSTANT    reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    HEX_CONSTANT    reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    OCTAL_CONSTANT  reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    EXPONENT_CONSTANT reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    REAL_CONSTANT   reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    CHAR_CONSTANT   reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    STR_CONSTANT    reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)
    ELSE            reduce using rule 197 (compound_statement -> L_BRACES declaration_list R_BRACES .)


state 163

    (198) compound_statement -> L_BRACES declaration_list statement_list . R_BRACES
    (202) statement_list -> statement_list . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    R_BRACES        shift and go to state 250
    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 161
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 164

    (192) labeled_statement -> IDENTIFIER COLON . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 251
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 165

    (193) labeled_statement -> CASE constant_expression . COLON statement

    COLON           shift and go to state 252


state 166

    (194) labeled_statement -> DEFAULT COLON . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 253
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 167

    (204) expression_statement -> expression SEMI_COLON .

    R_BRACES        reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    IDENTIFIER      reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    CASE            reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    DEFAULT         reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    L_BRACES        reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    SEMI_COLON      reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    IF              reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    SWITCH          reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    WHILE           reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    DO              reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    FOR             reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    GOTO            reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    CONTINUE        reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    BREAK           reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    RETURN          reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    INCREMENT       reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    DECREMENT       reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    SIZEOF          reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    BITWISE_AND     reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    MULTIPLY        reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    ADD             reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    SUBSTRACT       reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    NULL            reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    INT_CONSTANT    reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    STR_CONSTANT    reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    L_PAREN         reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    ELSE            reduce using rule 204 (expression_statement -> expression SEMI_COLON .)
    R_PAREN         reduce using rule 204 (expression_statement -> expression SEMI_COLON .)


state 168

    (88) expression -> expression COMMA . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    assignment_expression          shift and go to state 254
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 169

    (205) selection_statement -> IF L_PAREN . expression R_PAREN statement
    (206) selection_statement -> IF L_PAREN . expression R_PAREN statement ELSE statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 255
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 170

    (19) primary_expression -> L_PAREN expression . R_PAREN
    (88) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 256
    COMMA           shift and go to state 168


state 171

    (43) cast_expression -> L_PAREN type_specifier . R_PAREN cast_expression

    R_PAREN         shift and go to state 257


state 172

    (207) selection_statement -> SWITCH L_PAREN . expression R_PAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 258
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 173

    (208) iteration_statement -> WHILE L_PAREN . expression R_PAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 259
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 174

    (209) iteration_statement -> DO statement . WHILE L_PAREN expression R_PAREN SEMI_COLON

    WHILE           shift and go to state 260


state 175

    (210) iteration_statement -> FOR L_PAREN . expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> FOR L_PAREN . expression_statement expression_statement expression R_PAREN statement
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    SEMI_COLON      shift and go to state 80
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression_statement           shift and go to state 261
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 176

    (212) jump_statement -> GOTO IDENTIFIER . SEMI_COLON

    SEMI_COLON      shift and go to state 262


state 177

    (213) jump_statement -> CONTINUE SEMI_COLON .

    R_BRACES        reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    IDENTIFIER      reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    CASE            reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    DEFAULT         reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    L_BRACES        reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    SEMI_COLON      reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    IF              reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    SWITCH          reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    WHILE           reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    DO              reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    FOR             reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    GOTO            reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    CONTINUE        reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    BREAK           reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    RETURN          reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    INCREMENT       reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    DECREMENT       reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    SIZEOF          reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    BITWISE_AND     reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    MULTIPLY        reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    ADD             reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    SUBSTRACT       reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    NULL            reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    INT_CONSTANT    reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    STR_CONSTANT    reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    L_PAREN         reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)
    ELSE            reduce using rule 213 (jump_statement -> CONTINUE SEMI_COLON .)


state 178

    (214) jump_statement -> BREAK SEMI_COLON .

    R_BRACES        reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    IDENTIFIER      reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    CASE            reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    DEFAULT         reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    L_BRACES        reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    SEMI_COLON      reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    IF              reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    SWITCH          reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    WHILE           reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    DO              reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    FOR             reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    GOTO            reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    CONTINUE        reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    BREAK           reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    RETURN          reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    INCREMENT       reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    DECREMENT       reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    SIZEOF          reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    BITWISE_AND     reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    MULTIPLY        reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    ADD             reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    SUBSTRACT       reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    NULL            reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    INT_CONSTANT    reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    STR_CONSTANT    reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    L_PAREN         reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)
    ELSE            reduce using rule 214 (jump_statement -> BREAK SEMI_COLON .)


state 179

    (215) jump_statement -> RETURN SEMI_COLON .

    R_BRACES        reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    IDENTIFIER      reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    CASE            reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    DEFAULT         reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    L_BRACES        reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    SEMI_COLON      reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    IF              reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    SWITCH          reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    WHILE           reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    DO              reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    FOR             reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    GOTO            reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    CONTINUE        reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    BREAK           reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    RETURN          reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    INCREMENT       reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    DECREMENT       reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    SIZEOF          reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    BITWISE_AND     reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    MULTIPLY        reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    ADD             reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    SUBSTRACT       reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    NULL            reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    INT_CONSTANT    reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    STR_CONSTANT    reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    L_PAREN         reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)
    ELSE            reduce using rule 215 (jump_statement -> RETURN SEMI_COLON .)


state 180

    (216) jump_statement -> RETURN expression . SEMI_COLON
    (88) expression -> expression . COMMA assignment_expression

    SEMI_COLON      shift and go to state 263
    COMMA           shift and go to state 168


state 181

    (75) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    unary_expression               shift and go to state 97
    assignment_expression          shift and go to state 264
    conditional_expression         shift and go to state 96
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 182

    (76) assignment_operator -> ASSIGNMENT .

    INCREMENT       reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    DECREMENT       reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    SIZEOF          reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    BITWISE_AND     reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    MULTIPLY        reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    ADD             reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    SUBSTRACT       reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    IDENTIFIER      reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    NULL            reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 76 (assignment_operator -> ASSIGNMENT .)
    L_PAREN         reduce using rule 76 (assignment_operator -> ASSIGNMENT .)


state 183

    (77) assignment_operator -> MULTIPLY_ASSIGNMENT .

    INCREMENT       reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    DECREMENT       reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    SIZEOF          reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    MULTIPLY        reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    ADD             reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    NULL            reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)
    L_PAREN         reduce using rule 77 (assignment_operator -> MULTIPLY_ASSIGNMENT .)


state 184

    (78) assignment_operator -> DIVIDE_ASSIGNMENT .

    INCREMENT       reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    DECREMENT       reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    SIZEOF          reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    MULTIPLY        reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    ADD             reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    NULL            reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)
    L_PAREN         reduce using rule 78 (assignment_operator -> DIVIDE_ASSIGNMENT .)


state 185

    (79) assignment_operator -> MODULUS_ASSIGNMENT .

    INCREMENT       reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    DECREMENT       reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    SIZEOF          reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    MULTIPLY        reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    ADD             reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    NULL            reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)
    L_PAREN         reduce using rule 79 (assignment_operator -> MODULUS_ASSIGNMENT .)


state 186

    (80) assignment_operator -> ADD_ASSIGNMENT .

    INCREMENT       reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    DECREMENT       reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    SIZEOF          reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    MULTIPLY        reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    ADD             reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    NULL            reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)
    L_PAREN         reduce using rule 80 (assignment_operator -> ADD_ASSIGNMENT .)


state 187

    (81) assignment_operator -> SUBSTRACT_ASSIGNMENT .

    INCREMENT       reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    DECREMENT       reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    SIZEOF          reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    MULTIPLY        reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    ADD             reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    NULL            reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)
    L_PAREN         reduce using rule 81 (assignment_operator -> SUBSTRACT_ASSIGNMENT .)


state 188

    (82) assignment_operator -> LEFT_SHIFT_ASSIGNMENT .

    INCREMENT       reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    DECREMENT       reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    SIZEOF          reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    MULTIPLY        reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    ADD             reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    NULL            reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)
    L_PAREN         reduce using rule 82 (assignment_operator -> LEFT_SHIFT_ASSIGNMENT .)


state 189

    (83) assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .

    INCREMENT       reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    DECREMENT       reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    SIZEOF          reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    MULTIPLY        reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    ADD             reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    NULL            reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)
    L_PAREN         reduce using rule 83 (assignment_operator -> RIGHT_SHIFT_ASSIGNMENT .)


state 190

    (84) assignment_operator -> BITWISE_AND_ASSIGNMENT .

    INCREMENT       reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    DECREMENT       reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    SIZEOF          reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    MULTIPLY        reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    ADD             reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    NULL            reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)
    L_PAREN         reduce using rule 84 (assignment_operator -> BITWISE_AND_ASSIGNMENT .)


state 191

    (85) assignment_operator -> BITWISE_XOR_ASSIGNMENT .

    INCREMENT       reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    DECREMENT       reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    SIZEOF          reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    MULTIPLY        reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    ADD             reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    NULL            reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)
    L_PAREN         reduce using rule 85 (assignment_operator -> BITWISE_XOR_ASSIGNMENT .)


state 192

    (86) assignment_operator -> BITWISE_OR_ASSIGNMENT .

    INCREMENT       reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    DECREMENT       reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    SIZEOF          reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    BITWISE_AND     reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    MULTIPLY        reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    ADD             reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    SUBSTRACT       reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    BITWISE_ONE_COMPLEMENT reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    LOGICAL_NOT     reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    IDENTIFIER      reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    NULL            reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    INT_CONSTANT    reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    HEX_CONSTANT    reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    OCTAL_CONSTANT  reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    EXPONENT_CONSTANT reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    REAL_CONSTANT   reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    CHAR_CONSTANT   reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    STR_CONSTANT    reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)
    L_PAREN         reduce using rule 86 (assignment_operator -> BITWISE_OR_ASSIGNMENT .)


state 193

    (73) conditional_expression -> logical_or_expression QUES_MARK . expression COLON conditional_expression
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    logical_or_expression          shift and go to state 98
    expression                     shift and go to state 265
    conditional_expression         shift and go to state 96
    assignment_expression          shift and go to state 95
    unary_expression               shift and go to state 97
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 194

    (71) logical_or_expression -> logical_or_expression LOGICAL_OR . logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    logical_and_expression         shift and go to state 266
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 195

    (21) postfix_expression -> postfix_expression L_SQBR . expression R_SQBR
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    postfix_expression             shift and go to state 99
    expression                     shift and go to state 267
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 196

    (22) postfix_expression -> postfix_expression L_PAREN . R_PAREN
    (23) postfix_expression -> postfix_expression L_PAREN . argument_expression_list R_PAREN
    (28) argument_expression_list -> . assignment_expression
    (29) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    R_PAREN         shift and go to state 268
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    postfix_expression             shift and go to state 99
    argument_expression_list       shift and go to state 269
    assignment_expression          shift and go to state 270
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 197

    (24) postfix_expression -> postfix_expression DOT . IDENTIFIER

    IDENTIFIER      shift and go to state 271


state 198

    (25) postfix_expression -> postfix_expression ARROW . IDENTIFIER

    IDENTIFIER      shift and go to state 272


state 199

    (26) postfix_expression -> postfix_expression INCREMENT .

    L_SQBR          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    L_PAREN         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DOT             reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ARROW           reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    INCREMENT       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DECREMENT       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ASSIGNMENT      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLY_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MODULUS_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ADD_ASSIGNMENT  reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MULTIPLY        reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    DIVIDE          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    MODULUS         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    ADD             reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    SUBSTRACT       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LEFT_SHIFT      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    RIGHT_SHIFT     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LESS            reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LESS_EQUALS     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    GREATER_EQUALS  reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    EQUALS          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    NOT_EQUALS      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_AND     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_XOR     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    BITWISE_OR      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LOGICAL_AND     reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    QUES_MARK       reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    LOGICAL_OR      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    SEMI_COLON      reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    COMMA           reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    R_SQBR          reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    COLON           reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    R_PAREN         reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)
    R_BRACES        reduce using rule 26 (postfix_expression -> postfix_expression INCREMENT .)


state 200

    (27) postfix_expression -> postfix_expression DECREMENT .

    L_SQBR          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    L_PAREN         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DOT             reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ARROW           reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    INCREMENT       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DECREMENT       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ASSIGNMENT      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLY_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MODULUS_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ADD_ASSIGNMENT  reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    SUBSTRACT_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_AND_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_OR_ASSIGNMENT reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MULTIPLY        reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    DIVIDE          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    MODULUS         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    ADD             reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    SUBSTRACT       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LEFT_SHIFT      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    RIGHT_SHIFT     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LESS            reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LESS_EQUALS     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    GREATER_EQUALS  reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    EQUALS          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    NOT_EQUALS      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_AND     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_XOR     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    BITWISE_OR      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LOGICAL_AND     reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    QUES_MARK       reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    LOGICAL_OR      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    SEMI_COLON      reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    COMMA           reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    R_SQBR          reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    COLON           reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    R_PAREN         reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)
    R_BRACES        reduce using rule 27 (postfix_expression -> postfix_expression DECREMENT .)


state 201

    (31) unary_expression -> INCREMENT unary_expression .

    ASSIGNMENT      reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    MULTIPLY        reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    DIVIDE          reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    MODULUS         reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    ADD             reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    SUBSTRACT       reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    LEFT_SHIFT      reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    RIGHT_SHIFT     reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    LESS            reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    GREATER         reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    LESS_EQUALS     reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    GREATER_EQUALS  reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    EQUALS          reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    NOT_EQUALS      reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_AND     reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    BITWISE_OR      reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    LOGICAL_AND     reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    QUES_MARK       reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    LOGICAL_OR      reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    SEMI_COLON      reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    COMMA           reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    R_SQBR          reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    COLON           reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    R_PAREN         reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)
    R_BRACES        reduce using rule 31 (unary_expression -> INCREMENT unary_expression .)


state 202

    (19) primary_expression -> L_PAREN . expression R_PAREN
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 170
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 203

    (32) unary_expression -> DECREMENT unary_expression .

    ASSIGNMENT      reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    MULTIPLY        reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    DIVIDE          reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    MODULUS         reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    ADD             reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    SUBSTRACT       reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    LEFT_SHIFT      reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    RIGHT_SHIFT     reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    LESS            reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    GREATER         reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    LESS_EQUALS     reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    GREATER_EQUALS  reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    EQUALS          reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    NOT_EQUALS      reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_AND     reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_XOR     reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    BITWISE_OR      reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    LOGICAL_AND     reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    QUES_MARK       reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    LOGICAL_OR      reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    SEMI_COLON      reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    COMMA           reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    R_SQBR          reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    COLON           reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    R_PAREN         reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)
    R_BRACES        reduce using rule 32 (unary_expression -> DECREMENT unary_expression .)


state 204

    (33) unary_expression -> unary_operator cast_expression .

    ASSIGNMENT      reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    MODULUS_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    ADD_ASSIGNMENT  reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    MULTIPLY        reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    MODULUS         reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    ADD             reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    SUBSTRACT       reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    LEFT_SHIFT      reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    RIGHT_SHIFT     reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    LESS            reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    GREATER         reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    LESS_EQUALS     reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    GREATER_EQUALS  reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    NOT_EQUALS      reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    BITWISE_AND     reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    BITWISE_XOR     reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    BITWISE_OR      reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    LOGICAL_AND     reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    QUES_MARK       reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    LOGICAL_OR      reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    SEMI_COLON      reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    R_SQBR          reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    COLON           reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    R_PAREN         reduce using rule 33 (unary_expression -> unary_operator cast_expression .)
    R_BRACES        reduce using rule 33 (unary_expression -> unary_operator cast_expression .)


state 205

    (34) unary_expression -> SIZEOF unary_expression .

    ASSIGNMENT      reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    MODULUS_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    ADD_ASSIGNMENT  reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    MULTIPLY        reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    DIVIDE          reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    MODULUS         reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    ADD             reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    SUBSTRACT       reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    LEFT_SHIFT      reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    RIGHT_SHIFT     reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    LESS            reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    GREATER         reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    LESS_EQUALS     reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    GREATER_EQUALS  reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    EQUALS          reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    NOT_EQUALS      reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_AND     reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_XOR     reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    BITWISE_OR      reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    LOGICAL_AND     reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    QUES_MARK       reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    LOGICAL_OR      reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    SEMI_COLON      reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    COMMA           reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    R_SQBR          reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    COLON           reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    R_PAREN         reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)
    R_BRACES        reduce using rule 34 (unary_expression -> SIZEOF unary_expression .)


state 206

    (35) unary_expression -> SIZEOF L_PAREN . type_name R_PAREN
    (19) primary_expression -> L_PAREN . expression R_PAREN
    (167) type_name -> . specifier_qualifier_list
    (168) type_name -> . specifier_qualifier_list abstract_declarator
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (127) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (128) specifier_qualifier_list -> . type_specifier
    (129) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (130) specifier_qualifier_list -> . type_qualifier
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    ENUM            shift and go to state 36
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    type_name                      shift and go to state 273
    expression                     shift and go to state 170
    specifier_qualifier_list       shift and go to state 274
    assignment_expression          shift and go to state 95
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    struct_or_union                shift and go to state 35
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 207

    (69) logical_and_expression -> logical_and_expression LOGICAL_AND . inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    inclusive_or_expression        shift and go to state 275
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 208

    (67) inclusive_or_expression -> inclusive_or_expression BITWISE_OR . exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    exclusive_or_expression        shift and go to state 276
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 209

    (65) exclusive_or_expression -> exclusive_or_expression BITWISE_XOR . and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    and_expression                 shift and go to state 277
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 210

    (63) and_expression -> and_expression BITWISE_AND . equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    equality_expression            shift and go to state 278
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 211

    (60) equality_expression -> equality_expression EQUALS . relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    relational_expression          shift and go to state 279
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 212

    (61) equality_expression -> equality_expression NOT_EQUALS . relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    relational_expression          shift and go to state 280
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 213

    (55) relational_expression -> relational_expression LESS . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    shift_expression               shift and go to state 281
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 214

    (56) relational_expression -> relational_expression GREATER . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    shift_expression               shift and go to state 282
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 215

    (57) relational_expression -> relational_expression LESS_EQUALS . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    shift_expression               shift and go to state 283
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 216

    (58) relational_expression -> relational_expression GREATER_EQUALS . shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    shift_expression               shift and go to state 284
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 217

    (52) shift_expression -> shift_expression LEFT_SHIFT . additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    additive_expression            shift and go to state 285
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 218

    (53) shift_expression -> shift_expression RIGHT_SHIFT . additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    additive_expression            shift and go to state 286
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 219

    (49) additive_expression -> additive_expression ADD . multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    multiplicative_expression      shift and go to state 287
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 220

    (50) additive_expression -> additive_expression SUBSTRACT . multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    multiplicative_expression      shift and go to state 288
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 221

    (45) multiplicative_expression -> multiplicative_expression MULTIPLY . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    cast_expression                shift and go to state 289
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 222

    (46) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    cast_expression                shift and go to state 290
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 223

    (47) multiplicative_expression -> multiplicative_expression MODULUS . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    cast_expression                shift and go to state 291
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 224

    (149) direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .

    L_SQBR          reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    L_PAREN         reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    L_BRACES        reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    TYPEDEF         reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    EXTERN          reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    STATIC          reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    AUTO            reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    REGISTER        reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    VOID            reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    CHAR            reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    SHORT           reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    INT             reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    LONG            reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    FLOAT           reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    DOUBLE          reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    SIGNED          reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    UNSIGNED        reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    BOOL            reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    CONST           reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    VOLATILE        reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    ENUM            reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    STRUCT          reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    UNION           reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    ASSIGNMENT      reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    SEMI_COLON      reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    COMMA           reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    R_PAREN         reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)
    COLON           reduce using rule 149 (direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR .)


state 225

    (151) direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .

    L_SQBR          reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    L_PAREN         reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    L_BRACES        reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    TYPEDEF         reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    EXTERN          reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    STATIC          reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    AUTO            reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    REGISTER        reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    VOID            reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    CHAR            reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    SHORT           reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    INT             reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    LONG            reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    FLOAT           reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    DOUBLE          reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    SIGNED          reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    UNSIGNED        reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    BOOL            reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    CONST           reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    VOLATILE        reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    ENUM            reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    STRUCT          reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    UNION           reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    ASSIGNMENT      reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    SEMI_COLON      reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)
    COLON           reduce using rule 151 (direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN .)


state 226

    (161) parameter_type_list -> parameter_type_list COMMA . parameter_declaration
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    parameter_declaration          shift and go to state 292
    declaration_specifiers         shift and go to state 141
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 227

    (152) direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .

    L_SQBR          reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    L_PAREN         reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    L_BRACES        reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    TYPEDEF         reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    EXTERN          reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    STATIC          reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    AUTO            reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    REGISTER        reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    VOID            reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    CHAR            reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    SHORT           reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    INT             reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    LONG            reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    FLOAT           reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    DOUBLE          reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    SIGNED          reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    UNSIGNED        reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    BOOL            reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    CONST           reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    VOLATILE        reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    ENUM            reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    STRUCT          reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    UNION           reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    ASSIGNMENT      reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    SEMI_COLON      reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    COMMA           reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    R_PAREN         reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)
    COLON           reduce using rule 152 (direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN .)


state 228

    (166) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 293


state 229

    (162) parameter_declaration -> declaration_specifiers declarator .

    R_PAREN         reduce using rule 162 (parameter_declaration -> declaration_specifiers declarator .)
    COMMA           reduce using rule 162 (parameter_declaration -> declaration_specifiers declarator .)


state 230

    (163) parameter_declaration -> declaration_specifiers abstract_declarator .

    R_PAREN         reduce using rule 163 (parameter_declaration -> declaration_specifiers abstract_declarator .)
    COMMA           reduce using rule 163 (parameter_declaration -> declaration_specifiers abstract_declarator .)


state 231

    (145) declarator -> pointer . direct_declarator
    (169) abstract_declarator -> pointer .
    (171) abstract_declarator -> pointer . direct_abstract_declarator
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN
    (172) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (173) direct_abstract_declarator -> . L_SQBR R_SQBR
    (174) direct_abstract_declarator -> . L_SQBR constant_expression R_SQBR
    (175) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR R_SQBR
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR constant_expression R_SQBR
    (177) direct_abstract_declarator -> . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 169 (abstract_declarator -> pointer .)
    COMMA           reduce using rule 169 (abstract_declarator -> pointer .)
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 233
    L_SQBR          shift and go to state 234

    direct_declarator              shift and go to state 52
    direct_abstract_declarator     shift and go to state 294

state 232

    (170) abstract_declarator -> direct_abstract_declarator .
    (175) direct_abstract_declarator -> direct_abstract_declarator . L_SQBR R_SQBR
    (176) direct_abstract_declarator -> direct_abstract_declarator . L_SQBR constant_expression R_SQBR
    (179) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN R_PAREN
    (180) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 170 (abstract_declarator -> direct_abstract_declarator .)
    COMMA           reduce using rule 170 (abstract_declarator -> direct_abstract_declarator .)
    L_SQBR          shift and go to state 295
    L_PAREN         shift and go to state 296


state 233

    (148) direct_declarator -> L_PAREN . declarator R_PAREN
    (172) direct_abstract_declarator -> L_PAREN . abstract_declarator R_PAREN
    (177) direct_abstract_declarator -> L_PAREN . R_PAREN
    (178) direct_abstract_declarator -> L_PAREN . parameter_type_list R_PAREN
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (160) parameter_type_list -> . parameter_declaration
    (161) parameter_type_list -> . parameter_type_list COMMA parameter_declaration
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN
    (172) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (173) direct_abstract_declarator -> . L_SQBR R_SQBR
    (174) direct_abstract_declarator -> . L_SQBR constant_expression R_SQBR
    (175) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR R_SQBR
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR constant_expression R_SQBR
    (177) direct_abstract_declarator -> . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    R_PAREN         shift and go to state 297
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 233
    L_SQBR          shift and go to state 234
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    declarator                     shift and go to state 58
    abstract_declarator            shift and go to state 298
    parameter_type_list            shift and go to state 299
    pointer                        shift and go to state 231
    direct_declarator              shift and go to state 12
    direct_abstract_declarator     shift and go to state 232
    parameter_declaration          shift and go to state 139
    declaration_specifiers         shift and go to state 141
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 234

    (173) direct_abstract_declarator -> L_SQBR . R_SQBR
    (174) direct_abstract_declarator -> L_SQBR . constant_expression R_SQBR
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    R_SQBR          shift and go to state 300
    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    constant_expression            shift and go to state 301
    conditional_expression         shift and go to state 132
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 235

    (119) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list . R_BRACES
    (125) struct_declaration_list -> struct_declaration_list . struct_declaration
    (126) struct_declaration -> . specifier_qualifier_list struct_declarator_list SEMI_COLON
    (127) specifier_qualifier_list -> . type_specifier specifier_qualifier_list
    (128) specifier_qualifier_list -> . type_specifier
    (129) specifier_qualifier_list -> . type_qualifier specifier_qualifier_list
    (130) specifier_qualifier_list -> . type_qualifier
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    R_BRACES        shift and go to state 302
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    struct_or_union                shift and go to state 35
    struct_declaration             shift and go to state 237
    specifier_qualifier_list       shift and go to state 148
    type_specifier                 shift and go to state 149
    type_qualifier                 shift and go to state 150
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28

state 236

    (120) struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .

    TYPEDEF         reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    EXTERN          reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    STATIC          reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    AUTO            reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    REGISTER        reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    VOID            reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    CHAR            reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    SHORT           reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    INT             reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    LONG            reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    FLOAT           reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    DOUBLE          reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    SIGNED          reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    UNSIGNED        reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    BOOL            reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    CONST           reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    VOLATILE        reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    ENUM            reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    STRUCT          reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    UNION           reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    SEMI_COLON      reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    MULTIPLY        reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    IDENTIFIER      reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    L_PAREN         reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    L_SQBR          reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    R_PAREN         reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    COMMA           reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)
    COLON           reduce using rule 120 (struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES .)


state 237

    (125) struct_declaration_list -> struct_declaration_list struct_declaration .

    R_BRACES        reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOID            reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CHAR            reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SHORT           reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    INT             reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    LONG            reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    FLOAT           reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    DOUBLE          reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    SIGNED          reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNSIGNED        reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    BOOL            reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    CONST           reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    VOLATILE        reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    ENUM            reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    STRUCT          reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)
    UNION           reduce using rule 125 (struct_declaration_list -> struct_declaration_list struct_declaration .)


state 238

    (126) struct_declaration -> specifier_qualifier_list struct_declarator_list . SEMI_COLON
    (132) struct_declarator_list -> struct_declarator_list . COMMA struct_declarator

    SEMI_COLON      shift and go to state 303
    COMMA           shift and go to state 304


state 239

    (131) struct_declarator_list -> struct_declarator .

    SEMI_COLON      reduce using rule 131 (struct_declarator_list -> struct_declarator .)
    COMMA           reduce using rule 131 (struct_declarator_list -> struct_declarator .)


state 240

    (133) struct_declarator -> declarator .
    (135) struct_declarator -> declarator . COLON constant_expression

    SEMI_COLON      reduce using rule 133 (struct_declarator -> declarator .)
    COMMA           reduce using rule 133 (struct_declarator -> declarator .)
    COLON           shift and go to state 305


state 241

    (134) struct_declarator -> COLON . constant_expression
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    constant_expression            shift and go to state 306
    conditional_expression         shift and go to state 132
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 242

    (127) specifier_qualifier_list -> type_specifier specifier_qualifier_list .

    COLON           reduce using rule 127 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    MULTIPLY        reduce using rule 127 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 127 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_PAREN         reduce using rule 127 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    L_SQBR          reduce using rule 127 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)
    R_PAREN         reduce using rule 127 (specifier_qualifier_list -> type_specifier specifier_qualifier_list .)


state 243

    (129) specifier_qualifier_list -> type_qualifier specifier_qualifier_list .

    COLON           reduce using rule 129 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    MULTIPLY        reduce using rule 129 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    IDENTIFIER      reduce using rule 129 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_PAREN         reduce using rule 129 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    L_SQBR          reduce using rule 129 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)
    R_PAREN         reduce using rule 129 (specifier_qualifier_list -> type_qualifier specifier_qualifier_list .)


state 244

    (136) enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .

    TYPEDEF         reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    EXTERN          reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    STATIC          reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    AUTO            reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    REGISTER        reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    VOID            reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    CHAR            reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    SHORT           reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    INT             reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    LONG            reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    FLOAT           reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    DOUBLE          reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    SIGNED          reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    UNSIGNED        reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    BOOL            reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    CONST           reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    VOLATILE        reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    ENUM            reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    STRUCT          reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    UNION           reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    SEMI_COLON      reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    MULTIPLY        reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    IDENTIFIER      reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    L_PAREN         reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    L_SQBR          reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    R_PAREN         reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    COMMA           reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)
    COLON           reduce using rule 136 (enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES .)


state 245

    (140) enumerator_list -> enumerator_list COMMA . enumerator
    (141) enumerator -> . IDENTIFIER
    (142) enumerator -> . IDENTIFIER ASSIGNMENT constant_expression

    IDENTIFIER      shift and go to state 153

    enumerator                     shift and go to state 307

state 246

    (142) enumerator -> IDENTIFIER ASSIGNMENT . constant_expression
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    constant_expression            shift and go to state 308
    conditional_expression         shift and go to state 132
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 247

    (137) enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list . R_BRACES
    (140) enumerator_list -> enumerator_list . COMMA enumerator

    R_BRACES        shift and go to state 309
    COMMA           shift and go to state 245


state 248

    (182) initializer -> L_BRACES initializer_list . R_BRACES
    (183) initializer -> L_BRACES initializer_list . COMMA R_BRACES
    (185) initializer_list -> initializer_list . COMMA initializer

    R_BRACES        shift and go to state 310
    COMMA           shift and go to state 311


state 249

    (184) initializer_list -> initializer .

    R_BRACES        reduce using rule 184 (initializer_list -> initializer .)
    COMMA           reduce using rule 184 (initializer_list -> initializer .)


state 250

    (198) compound_statement -> L_BRACES declaration_list statement_list R_BRACES .

    TYPEDEF         reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    EXTERN          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    STATIC          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    AUTO            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    REGISTER        reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    VOID            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    CHAR            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    SHORT           reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    INT             reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    LONG            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    FLOAT           reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    DOUBLE          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    SIGNED          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    UNSIGNED        reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    BOOL            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    CONST           reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    VOLATILE        reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    MULTIPLY        reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    IDENTIFIER      reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    L_PAREN         reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    ENUM            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    STRUCT          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    UNION           reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    $end            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    R_BRACES        reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    CASE            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    DEFAULT         reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    L_BRACES        reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    SEMI_COLON      reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    IF              reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    SWITCH          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    WHILE           reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    DO              reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    FOR             reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    GOTO            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    CONTINUE        reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    BREAK           reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    RETURN          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    INCREMENT       reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    DECREMENT       reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    SIZEOF          reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    BITWISE_AND     reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    ADD             reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    SUBSTRACT       reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    BITWISE_ONE_COMPLEMENT reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    LOGICAL_NOT     reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    NULL            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    INT_CONSTANT    reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    HEX_CONSTANT    reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    OCTAL_CONSTANT  reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    EXPONENT_CONSTANT reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    REAL_CONSTANT   reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    CHAR_CONSTANT   reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    STR_CONSTANT    reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)
    ELSE            reduce using rule 198 (compound_statement -> L_BRACES declaration_list statement_list R_BRACES .)


state 251

    (192) labeled_statement -> IDENTIFIER COLON statement .

    R_BRACES        reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    IDENTIFIER      reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    CASE            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    DEFAULT         reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    L_BRACES        reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    SEMI_COLON      reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    IF              reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    SWITCH          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    WHILE           reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    DO              reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    FOR             reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    GOTO            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    CONTINUE        reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    BREAK           reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    RETURN          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    INCREMENT       reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    DECREMENT       reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    SIZEOF          reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    BITWISE_AND     reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    MULTIPLY        reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    ADD             reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    SUBSTRACT       reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    LOGICAL_NOT     reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    NULL            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    INT_CONSTANT    reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    HEX_CONSTANT    reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    OCTAL_CONSTANT  reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    EXPONENT_CONSTANT reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    REAL_CONSTANT   reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    CHAR_CONSTANT   reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    STR_CONSTANT    reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    L_PAREN         reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)
    ELSE            reduce using rule 192 (labeled_statement -> IDENTIFIER COLON statement .)


state 252

    (193) labeled_statement -> CASE constant_expression COLON . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    statement                      shift and go to state 312
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 253

    (194) labeled_statement -> DEFAULT COLON statement .

    R_BRACES        reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    IDENTIFIER      reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    CASE            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    DEFAULT         reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    L_BRACES        reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    SEMI_COLON      reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    IF              reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    SWITCH          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    WHILE           reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    DO              reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    FOR             reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    GOTO            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    CONTINUE        reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    BREAK           reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    RETURN          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    INCREMENT       reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    DECREMENT       reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    SIZEOF          reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    BITWISE_AND     reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    MULTIPLY        reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    ADD             reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    SUBSTRACT       reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    LOGICAL_NOT     reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    NULL            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    INT_CONSTANT    reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    HEX_CONSTANT    reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    OCTAL_CONSTANT  reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    EXPONENT_CONSTANT reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    REAL_CONSTANT   reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    CHAR_CONSTANT   reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    STR_CONSTANT    reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    L_PAREN         reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)
    ELSE            reduce using rule 194 (labeled_statement -> DEFAULT COLON statement .)


state 254

    (88) expression -> expression COMMA assignment_expression .

    SEMI_COLON      reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    COMMA           reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    R_PAREN         reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    COLON           reduce using rule 88 (expression -> expression COMMA assignment_expression .)
    R_SQBR          reduce using rule 88 (expression -> expression COMMA assignment_expression .)


state 255

    (205) selection_statement -> IF L_PAREN expression . R_PAREN statement
    (206) selection_statement -> IF L_PAREN expression . R_PAREN statement ELSE statement
    (88) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 313
    COMMA           shift and go to state 168


state 256

    (19) primary_expression -> L_PAREN expression R_PAREN .

    L_SQBR          reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    L_PAREN         reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    DOT             reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    ARROW           reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    INCREMENT       reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    DECREMENT       reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    ASSIGNMENT      reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    MULTIPLY        reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    DIVIDE          reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    MODULUS         reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    ADD             reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    SUBSTRACT       reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    LEFT_SHIFT      reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    RIGHT_SHIFT     reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    LESS            reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    GREATER         reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    LESS_EQUALS     reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    GREATER_EQUALS  reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    EQUALS          reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    NOT_EQUALS      reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_AND     reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_XOR     reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    BITWISE_OR      reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    LOGICAL_AND     reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    QUES_MARK       reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    LOGICAL_OR      reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    SEMI_COLON      reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    COMMA           reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    R_SQBR          reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    COLON           reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    R_PAREN         reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)
    R_BRACES        reduce using rule 19 (primary_expression -> L_PAREN expression R_PAREN .)


state 257

    (43) cast_expression -> L_PAREN type_specifier R_PAREN . cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    cast_expression                shift and go to state 314
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 258

    (207) selection_statement -> SWITCH L_PAREN expression . R_PAREN statement
    (88) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 315
    COMMA           shift and go to state 168


state 259

    (208) iteration_statement -> WHILE L_PAREN expression . R_PAREN statement
    (88) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 316
    COMMA           shift and go to state 168


state 260

    (209) iteration_statement -> DO statement WHILE . L_PAREN expression R_PAREN SEMI_COLON

    L_PAREN         shift and go to state 317


state 261

    (210) iteration_statement -> FOR L_PAREN expression_statement . expression_statement R_PAREN statement
    (211) iteration_statement -> FOR L_PAREN expression_statement . expression_statement expression R_PAREN statement
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    SEMI_COLON      shift and go to state 80
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression_statement           shift and go to state 318
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 262

    (212) jump_statement -> GOTO IDENTIFIER SEMI_COLON .

    R_BRACES        reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    IDENTIFIER      reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    CASE            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    DEFAULT         reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    L_BRACES        reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    SEMI_COLON      reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    IF              reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    SWITCH          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    WHILE           reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    DO              reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    FOR             reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    GOTO            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    CONTINUE        reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    BREAK           reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    RETURN          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    INCREMENT       reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    DECREMENT       reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    SIZEOF          reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    BITWISE_AND     reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    MULTIPLY        reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    ADD             reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    SUBSTRACT       reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    NULL            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    INT_CONSTANT    reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    STR_CONSTANT    reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    L_PAREN         reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)
    ELSE            reduce using rule 212 (jump_statement -> GOTO IDENTIFIER SEMI_COLON .)


state 263

    (216) jump_statement -> RETURN expression SEMI_COLON .

    R_BRACES        reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    IDENTIFIER      reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    CASE            reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    DEFAULT         reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    L_BRACES        reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    SEMI_COLON      reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    IF              reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    SWITCH          reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    WHILE           reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    DO              reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    FOR             reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    GOTO            reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    CONTINUE        reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    BREAK           reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    RETURN          reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    INCREMENT       reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    DECREMENT       reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    SIZEOF          reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    BITWISE_AND     reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    MULTIPLY        reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    ADD             reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    SUBSTRACT       reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    NULL            reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    INT_CONSTANT    reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    STR_CONSTANT    reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    L_PAREN         reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)
    ELSE            reduce using rule 216 (jump_statement -> RETURN expression SEMI_COLON .)


state 264

    (75) assignment_expression -> unary_expression assignment_operator assignment_expression .

    SEMI_COLON      reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_PAREN         reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_BRACES        reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COLON           reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    R_SQBR          reduce using rule 75 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 265

    (73) conditional_expression -> logical_or_expression QUES_MARK expression . COLON conditional_expression
    (88) expression -> expression . COMMA assignment_expression

    COLON           shift and go to state 319
    COMMA           shift and go to state 168


state 266

    (71) logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .
    (69) logical_and_expression -> logical_and_expression . LOGICAL_AND inclusive_or_expression

    QUES_MARK       reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LOGICAL_OR      reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    SEMI_COLON      reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    COMMA           reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    R_SQBR          reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    COLON           reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    R_PAREN         reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    R_BRACES        reduce using rule 71 (logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression .)
    LOGICAL_AND     shift and go to state 207


state 267

    (21) postfix_expression -> postfix_expression L_SQBR expression . R_SQBR
    (88) expression -> expression . COMMA assignment_expression

    R_SQBR          shift and go to state 320
    COMMA           shift and go to state 168


state 268

    (22) postfix_expression -> postfix_expression L_PAREN R_PAREN .

    L_SQBR          reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DOT             reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ARROW           reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    INCREMENT       reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DECREMENT       reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ASSIGNMENT      reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MULTIPLY        reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    DIVIDE          reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    MODULUS         reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    ADD             reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    SUBSTRACT       reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LEFT_SHIFT      reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    RIGHT_SHIFT     reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LESS            reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    GREATER         reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LESS_EQUALS     reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    GREATER_EQUALS  reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    EQUALS          reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    NOT_EQUALS      reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_AND     reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_XOR     reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    BITWISE_OR      reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LOGICAL_AND     reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    QUES_MARK       reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    LOGICAL_OR      reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    SEMI_COLON      reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    COMMA           reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    R_SQBR          reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    COLON           reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)
    R_BRACES        reduce using rule 22 (postfix_expression -> postfix_expression L_PAREN R_PAREN .)


state 269

    (23) postfix_expression -> postfix_expression L_PAREN argument_expression_list . R_PAREN
    (29) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    R_PAREN         shift and go to state 321
    COMMA           shift and go to state 322


state 270

    (28) argument_expression_list -> assignment_expression .

    R_PAREN         reduce using rule 28 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 28 (argument_expression_list -> assignment_expression .)


state 271

    (24) postfix_expression -> postfix_expression DOT IDENTIFIER .

    L_SQBR          reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    L_PAREN         reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ARROW           reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INCREMENT       reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DECREMENT       reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASSIGNMENT      reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD_ASSIGNMENT  reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUBSTRACT_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_AND_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_OR_ASSIGNMENT reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MULTIPLY        reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULUS         reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ADD             reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SUBSTRACT       reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS            reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER         reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LESS_EQUALS     reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQUALS          reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT_EQUALS      reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_AND     reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_XOR     reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BITWISE_OR      reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_AND     reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    QUES_MARK       reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LOGICAL_OR      reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMI_COLON      reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_SQBR          reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COLON           reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_PAREN         reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    R_BRACES        reduce using rule 24 (postfix_expression -> postfix_expression DOT IDENTIFIER .)


state 272

    (25) postfix_expression -> postfix_expression ARROW IDENTIFIER .

    L_SQBR          reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    L_PAREN         reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DOT             reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ARROW           reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    INCREMENT       reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DECREMENT       reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ASSIGNMENT      reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MULTIPLY_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ADD_ASSIGNMENT  reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SUBSTRACT_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_AND_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_OR_ASSIGNMENT reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MULTIPLY        reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    DIVIDE          reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    MODULUS         reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    ADD             reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SUBSTRACT       reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LEFT_SHIFT      reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    RIGHT_SHIFT     reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS            reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER         reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LESS_EQUALS     reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    GREATER_EQUALS  reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    EQUALS          reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    NOT_EQUALS      reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_AND     reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_XOR     reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    BITWISE_OR      reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LOGICAL_AND     reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    QUES_MARK       reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    LOGICAL_OR      reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    SEMI_COLON      reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COMMA           reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    R_SQBR          reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    COLON           reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    R_PAREN         reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)
    R_BRACES        reduce using rule 25 (postfix_expression -> postfix_expression ARROW IDENTIFIER .)


state 273

    (35) unary_expression -> SIZEOF L_PAREN type_name . R_PAREN

    R_PAREN         shift and go to state 323


state 274

    (167) type_name -> specifier_qualifier_list .
    (168) type_name -> specifier_qualifier_list . abstract_declarator
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (172) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (173) direct_abstract_declarator -> . L_SQBR R_SQBR
    (174) direct_abstract_declarator -> . L_SQBR constant_expression R_SQBR
    (175) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR R_SQBR
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR constant_expression R_SQBR
    (177) direct_abstract_declarator -> . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 167 (type_name -> specifier_qualifier_list .)
    MULTIPLY        shift and go to state 32
    L_PAREN         shift and go to state 326
    L_SQBR          shift and go to state 234

    abstract_declarator            shift and go to state 324
    pointer                        shift and go to state 325
    direct_abstract_declarator     shift and go to state 232

state 275

    (69) logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .
    (67) inclusive_or_expression -> inclusive_or_expression . BITWISE_OR exclusive_or_expression

    LOGICAL_AND     reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    QUES_MARK       reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    LOGICAL_OR      reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    SEMI_COLON      reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    COMMA           reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    R_SQBR          reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    COLON           reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    R_PAREN         reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    R_BRACES        reduce using rule 69 (logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression .)
    BITWISE_OR      shift and go to state 208


state 276

    (67) inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .
    (65) exclusive_or_expression -> exclusive_or_expression . BITWISE_XOR and_expression

    BITWISE_OR      reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    LOGICAL_AND     reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    QUES_MARK       reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    LOGICAL_OR      reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    SEMI_COLON      reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    COMMA           reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    R_SQBR          reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    COLON           reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    R_PAREN         reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    R_BRACES        reduce using rule 67 (inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression .)
    BITWISE_XOR     shift and go to state 209


state 277

    (65) exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .
    (63) and_expression -> and_expression . BITWISE_AND equality_expression

    BITWISE_XOR     reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    BITWISE_OR      reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    LOGICAL_AND     reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    QUES_MARK       reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    LOGICAL_OR      reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    SEMI_COLON      reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    COMMA           reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    R_SQBR          reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    COLON           reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    R_PAREN         reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    R_BRACES        reduce using rule 65 (exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression .)
    BITWISE_AND     shift and go to state 210


state 278

    (63) and_expression -> and_expression BITWISE_AND equality_expression .
    (60) equality_expression -> equality_expression . EQUALS relational_expression
    (61) equality_expression -> equality_expression . NOT_EQUALS relational_expression

    BITWISE_AND     reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    BITWISE_XOR     reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    BITWISE_OR      reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    LOGICAL_AND     reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    QUES_MARK       reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    LOGICAL_OR      reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    SEMI_COLON      reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    COMMA           reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    R_SQBR          reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    COLON           reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    R_PAREN         reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    R_BRACES        reduce using rule 63 (and_expression -> and_expression BITWISE_AND equality_expression .)
    EQUALS          shift and go to state 211
    NOT_EQUALS      shift and go to state 212


state 279

    (60) equality_expression -> equality_expression EQUALS relational_expression .
    (55) relational_expression -> relational_expression . LESS shift_expression
    (56) relational_expression -> relational_expression . GREATER shift_expression
    (57) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (58) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

    EQUALS          reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_AND     reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_XOR     reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    BITWISE_OR      reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    LOGICAL_AND     reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    QUES_MARK       reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    LOGICAL_OR      reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    SEMI_COLON      reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    COMMA           reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    R_SQBR          reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    COLON           reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    R_PAREN         reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    R_BRACES        reduce using rule 60 (equality_expression -> equality_expression EQUALS relational_expression .)
    LESS            shift and go to state 213
    GREATER         shift and go to state 214
    LESS_EQUALS     shift and go to state 215
    GREATER_EQUALS  shift and go to state 216


state 280

    (61) equality_expression -> equality_expression NOT_EQUALS relational_expression .
    (55) relational_expression -> relational_expression . LESS shift_expression
    (56) relational_expression -> relational_expression . GREATER shift_expression
    (57) relational_expression -> relational_expression . LESS_EQUALS shift_expression
    (58) relational_expression -> relational_expression . GREATER_EQUALS shift_expression

    EQUALS          reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    NOT_EQUALS      reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_AND     reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_XOR     reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    BITWISE_OR      reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LOGICAL_AND     reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    QUES_MARK       reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LOGICAL_OR      reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    SEMI_COLON      reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COMMA           reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    R_SQBR          reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    COLON           reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    R_PAREN         reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    R_BRACES        reduce using rule 61 (equality_expression -> equality_expression NOT_EQUALS relational_expression .)
    LESS            shift and go to state 213
    GREATER         shift and go to state 214
    LESS_EQUALS     shift and go to state 215
    GREATER_EQUALS  shift and go to state 216


state 281

    (55) relational_expression -> relational_expression LESS shift_expression .
    (52) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (53) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER         reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    LESS_EQUALS     reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    GREATER_EQUALS  reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    EQUALS          reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    NOT_EQUALS      reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_AND     reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_XOR     reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    BITWISE_OR      reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    LOGICAL_AND     reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    QUES_MARK       reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    LOGICAL_OR      reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    SEMI_COLON      reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    COMMA           reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    R_SQBR          reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    COLON           reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    R_PAREN         reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    R_BRACES        reduce using rule 55 (relational_expression -> relational_expression LESS shift_expression .)
    LEFT_SHIFT      shift and go to state 217
    RIGHT_SHIFT     shift and go to state 218


state 282

    (56) relational_expression -> relational_expression GREATER shift_expression .
    (52) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (53) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER         reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    LESS_EQUALS     reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    GREATER_EQUALS  reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    EQUALS          reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    NOT_EQUALS      reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_AND     reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_XOR     reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    BITWISE_OR      reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    LOGICAL_AND     reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    QUES_MARK       reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    LOGICAL_OR      reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    SEMI_COLON      reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    COMMA           reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    R_SQBR          reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    COLON           reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    R_PAREN         reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    R_BRACES        reduce using rule 56 (relational_expression -> relational_expression GREATER shift_expression .)
    LEFT_SHIFT      shift and go to state 217
    RIGHT_SHIFT     shift and go to state 218


state 283

    (57) relational_expression -> relational_expression LESS_EQUALS shift_expression .
    (52) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (53) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    GREATER         reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LESS_EQUALS     reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    GREATER_EQUALS  reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    EQUALS          reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_AND     reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_XOR     reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    BITWISE_OR      reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LOGICAL_AND     reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    QUES_MARK       reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LOGICAL_OR      reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    SEMI_COLON      reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    COMMA           reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    R_SQBR          reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    COLON           reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    R_PAREN         reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    R_BRACES        reduce using rule 57 (relational_expression -> relational_expression LESS_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 217
    RIGHT_SHIFT     shift and go to state 218


state 284

    (58) relational_expression -> relational_expression GREATER_EQUALS shift_expression .
    (52) shift_expression -> shift_expression . LEFT_SHIFT additive_expression
    (53) shift_expression -> shift_expression . RIGHT_SHIFT additive_expression

    LESS            reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    GREATER         reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LESS_EQUALS     reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    GREATER_EQUALS  reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    EQUALS          reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    NOT_EQUALS      reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_AND     reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_XOR     reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    BITWISE_OR      reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LOGICAL_AND     reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    QUES_MARK       reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LOGICAL_OR      reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    SEMI_COLON      reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    COMMA           reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    R_SQBR          reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    COLON           reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    R_PAREN         reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    R_BRACES        reduce using rule 58 (relational_expression -> relational_expression GREATER_EQUALS shift_expression .)
    LEFT_SHIFT      shift and go to state 217
    RIGHT_SHIFT     shift and go to state 218


state 285

    (52) shift_expression -> shift_expression LEFT_SHIFT additive_expression .
    (49) additive_expression -> additive_expression . ADD multiplicative_expression
    (50) additive_expression -> additive_expression . SUBSTRACT multiplicative_expression

    LEFT_SHIFT      reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS            reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER         reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LESS_EQUALS     reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    GREATER_EQUALS  reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    EQUALS          reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    BITWISE_AND     reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    BITWISE_XOR     reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    BITWISE_OR      reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LOGICAL_AND     reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    QUES_MARK       reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    LOGICAL_OR      reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    SEMI_COLON      reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COMMA           reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    R_SQBR          reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    COLON           reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    R_PAREN         reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    R_BRACES        reduce using rule 52 (shift_expression -> shift_expression LEFT_SHIFT additive_expression .)
    ADD             shift and go to state 219
    SUBSTRACT       shift and go to state 220


state 286

    (53) shift_expression -> shift_expression RIGHT_SHIFT additive_expression .
    (49) additive_expression -> additive_expression . ADD multiplicative_expression
    (50) additive_expression -> additive_expression . SUBSTRACT multiplicative_expression

    LEFT_SHIFT      reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    RIGHT_SHIFT     reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS            reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER         reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LESS_EQUALS     reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    GREATER_EQUALS  reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    EQUALS          reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    NOT_EQUALS      reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    BITWISE_AND     reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    BITWISE_XOR     reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    BITWISE_OR      reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LOGICAL_AND     reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    QUES_MARK       reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    LOGICAL_OR      reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    SEMI_COLON      reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COMMA           reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    R_SQBR          reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    COLON           reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    R_PAREN         reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    R_BRACES        reduce using rule 53 (shift_expression -> shift_expression RIGHT_SHIFT additive_expression .)
    ADD             shift and go to state 219
    SUBSTRACT       shift and go to state 220


state 287

    (49) additive_expression -> additive_expression ADD multiplicative_expression .
    (45) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (46) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (47) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    ADD             reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SUBSTRACT       reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LESS            reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GREATER         reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LESS_EQUALS     reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    EQUALS          reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    NOT_EQUALS      reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITWISE_AND     reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITWISE_XOR     reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    BITWISE_OR      reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LOGICAL_AND     reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    QUES_MARK       reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    LOGICAL_OR      reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    SEMI_COLON      reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COMMA           reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    R_SQBR          reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    COLON           reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    R_PAREN         reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    R_BRACES        reduce using rule 49 (additive_expression -> additive_expression ADD multiplicative_expression .)
    MULTIPLY        shift and go to state 221
    DIVIDE          shift and go to state 222
    MODULUS         shift and go to state 223


state 288

    (50) additive_expression -> additive_expression SUBSTRACT multiplicative_expression .
    (45) multiplicative_expression -> multiplicative_expression . MULTIPLY cast_expression
    (46) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression
    (47) multiplicative_expression -> multiplicative_expression . MODULUS cast_expression

    ADD             reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    SUBSTRACT       reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LEFT_SHIFT      reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    RIGHT_SHIFT     reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LESS            reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    GREATER         reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LESS_EQUALS     reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    GREATER_EQUALS  reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    EQUALS          reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    NOT_EQUALS      reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    BITWISE_AND     reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    BITWISE_XOR     reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    BITWISE_OR      reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LOGICAL_AND     reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    QUES_MARK       reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    LOGICAL_OR      reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    SEMI_COLON      reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    COMMA           reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    R_SQBR          reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    COLON           reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    R_PAREN         reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    R_BRACES        reduce using rule 50 (additive_expression -> additive_expression SUBSTRACT multiplicative_expression .)
    MULTIPLY        shift and go to state 221
    DIVIDE          shift and go to state 222
    MODULUS         shift and go to state 223


state 289

    (45) multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .

    MULTIPLY        reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    DIVIDE          reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    MODULUS         reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    ADD             reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SUBSTRACT       reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LEFT_SHIFT      reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    RIGHT_SHIFT     reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESS            reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATER         reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LESS_EQUALS     reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    GREATER_EQUALS  reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    EQUALS          reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    NOT_EQUALS      reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_AND     reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_XOR     reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    BITWISE_OR      reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOGICAL_AND     reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    QUES_MARK       reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    LOGICAL_OR      reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    SEMI_COLON      reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COMMA           reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    R_SQBR          reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    COLON           reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    R_PAREN         reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)
    R_BRACES        reduce using rule 45 (multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression .)


state 290

    (46) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    MULTIPLY        reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MODULUS         reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    ADD             reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SUBSTRACT       reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LEFT_SHIFT      reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RIGHT_SHIFT     reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS            reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER         reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LESS_EQUALS     reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GREATER_EQUALS  reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQUALS          reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NOT_EQUALS      reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_AND     reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_XOR     reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    BITWISE_OR      reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOGICAL_AND     reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    QUES_MARK       reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LOGICAL_OR      reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMI_COLON      reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_SQBR          reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COLON           reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_PAREN         reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    R_BRACES        reduce using rule 46 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 291

    (47) multiplicative_expression -> multiplicative_expression MODULUS cast_expression .

    MULTIPLY        reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    DIVIDE          reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    MODULUS         reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    ADD             reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    SUBSTRACT       reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LEFT_SHIFT      reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    RIGHT_SHIFT     reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS            reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER         reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LESS_EQUALS     reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    GREATER_EQUALS  reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    EQUALS          reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    NOT_EQUALS      reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    BITWISE_AND     reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    BITWISE_XOR     reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    BITWISE_OR      reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LOGICAL_AND     reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    QUES_MARK       reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    LOGICAL_OR      reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    SEMI_COLON      reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COMMA           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    R_SQBR          reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    COLON           reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    R_PAREN         reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)
    R_BRACES        reduce using rule 47 (multiplicative_expression -> multiplicative_expression MODULUS cast_expression .)


state 292

    (161) parameter_type_list -> parameter_type_list COMMA parameter_declaration .

    R_PAREN         reduce using rule 161 (parameter_type_list -> parameter_type_list COMMA parameter_declaration .)
    COMMA           reduce using rule 161 (parameter_type_list -> parameter_type_list COMMA parameter_declaration .)


state 293

    (166) identifier_list -> identifier_list COMMA IDENTIFIER .

    R_PAREN         reduce using rule 166 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 166 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 294

    (171) abstract_declarator -> pointer direct_abstract_declarator .
    (175) direct_abstract_declarator -> direct_abstract_declarator . L_SQBR R_SQBR
    (176) direct_abstract_declarator -> direct_abstract_declarator . L_SQBR constant_expression R_SQBR
    (179) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN R_PAREN
    (180) direct_abstract_declarator -> direct_abstract_declarator . L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 171 (abstract_declarator -> pointer direct_abstract_declarator .)
    COMMA           reduce using rule 171 (abstract_declarator -> pointer direct_abstract_declarator .)
    L_SQBR          shift and go to state 295
    L_PAREN         shift and go to state 296


state 295

    (175) direct_abstract_declarator -> direct_abstract_declarator L_SQBR . R_SQBR
    (176) direct_abstract_declarator -> direct_abstract_declarator L_SQBR . constant_expression R_SQBR
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    R_SQBR          shift and go to state 327
    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    constant_expression            shift and go to state 328
    conditional_expression         shift and go to state 132
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 296

    (179) direct_abstract_declarator -> direct_abstract_declarator L_PAREN . R_PAREN
    (180) direct_abstract_declarator -> direct_abstract_declarator L_PAREN . parameter_type_list R_PAREN
    (160) parameter_type_list -> . parameter_declaration
    (161) parameter_type_list -> . parameter_type_list COMMA parameter_declaration
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    R_PAREN         shift and go to state 329
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    parameter_type_list            shift and go to state 330
    parameter_declaration          shift and go to state 139
    declaration_specifiers         shift and go to state 141
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 297

    (177) direct_abstract_declarator -> L_PAREN R_PAREN .

    L_SQBR          reduce using rule 177 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 177 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 177 (direct_abstract_declarator -> L_PAREN R_PAREN .)
    COMMA           reduce using rule 177 (direct_abstract_declarator -> L_PAREN R_PAREN .)


state 298

    (172) direct_abstract_declarator -> L_PAREN abstract_declarator . R_PAREN

    R_PAREN         shift and go to state 331


state 299

    (178) direct_abstract_declarator -> L_PAREN parameter_type_list . R_PAREN
    (161) parameter_type_list -> parameter_type_list . COMMA parameter_declaration

    R_PAREN         shift and go to state 332
    COMMA           shift and go to state 226


state 300

    (173) direct_abstract_declarator -> L_SQBR R_SQBR .

    L_SQBR          reduce using rule 173 (direct_abstract_declarator -> L_SQBR R_SQBR .)
    L_PAREN         reduce using rule 173 (direct_abstract_declarator -> L_SQBR R_SQBR .)
    R_PAREN         reduce using rule 173 (direct_abstract_declarator -> L_SQBR R_SQBR .)
    COMMA           reduce using rule 173 (direct_abstract_declarator -> L_SQBR R_SQBR .)


state 301

    (174) direct_abstract_declarator -> L_SQBR constant_expression . R_SQBR

    R_SQBR          shift and go to state 333


state 302

    (119) struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .

    TYPEDEF         reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    EXTERN          reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    STATIC          reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    AUTO            reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    REGISTER        reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    VOID            reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    CHAR            reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    SHORT           reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    INT             reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    LONG            reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    FLOAT           reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    DOUBLE          reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    SIGNED          reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    UNSIGNED        reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    BOOL            reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    CONST           reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    VOLATILE        reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    ENUM            reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    STRUCT          reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    UNION           reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    SEMI_COLON      reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    MULTIPLY        reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    IDENTIFIER      reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    L_PAREN         reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    L_SQBR          reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    R_PAREN         reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    COMMA           reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)
    COLON           reduce using rule 119 (struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES .)


state 303

    (126) struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .

    R_BRACES        reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    VOID            reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    CHAR            reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    SHORT           reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    INT             reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    LONG            reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    FLOAT           reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    DOUBLE          reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    SIGNED          reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    UNSIGNED        reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    BOOL            reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    CONST           reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    VOLATILE        reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    ENUM            reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    STRUCT          reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)
    UNION           reduce using rule 126 (struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON .)


state 304

    (132) struct_declarator_list -> struct_declarator_list COMMA . struct_declarator
    (133) struct_declarator -> . declarator
    (134) struct_declarator -> . COLON constant_expression
    (135) struct_declarator -> . declarator COLON constant_expression
    (145) declarator -> . pointer direct_declarator
    (146) declarator -> . direct_declarator
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (147) direct_declarator -> . IDENTIFIER
    (148) direct_declarator -> . L_PAREN declarator R_PAREN
    (149) direct_declarator -> . direct_declarator L_SQBR constant_expression R_SQBR
    (150) direct_declarator -> . direct_declarator L_SQBR R_SQBR
    (151) direct_declarator -> . direct_declarator L_PAREN parameter_type_list R_PAREN
    (152) direct_declarator -> . direct_declarator L_PAREN identifier_list R_PAREN
    (153) direct_declarator -> . direct_declarator L_PAREN R_PAREN

    COLON           shift and go to state 241
    MULTIPLY        shift and go to state 32
    IDENTIFIER      shift and go to state 33
    L_PAREN         shift and go to state 34

    struct_declarator              shift and go to state 334
    declarator                     shift and go to state 240
    pointer                        shift and go to state 11
    direct_declarator              shift and go to state 12

state 305

    (135) struct_declarator -> declarator COLON . constant_expression
    (89) constant_expression -> . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    constant_expression            shift and go to state 335
    conditional_expression         shift and go to state 132
    logical_or_expression          shift and go to state 98
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 306

    (134) struct_declarator -> COLON constant_expression .

    SEMI_COLON      reduce using rule 134 (struct_declarator -> COLON constant_expression .)
    COMMA           reduce using rule 134 (struct_declarator -> COLON constant_expression .)


state 307

    (140) enumerator_list -> enumerator_list COMMA enumerator .

    R_BRACES        reduce using rule 140 (enumerator_list -> enumerator_list COMMA enumerator .)
    COMMA           reduce using rule 140 (enumerator_list -> enumerator_list COMMA enumerator .)


state 308

    (142) enumerator -> IDENTIFIER ASSIGNMENT constant_expression .

    R_BRACES        reduce using rule 142 (enumerator -> IDENTIFIER ASSIGNMENT constant_expression .)
    COMMA           reduce using rule 142 (enumerator -> IDENTIFIER ASSIGNMENT constant_expression .)


state 309

    (137) enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .

    TYPEDEF         reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    EXTERN          reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    STATIC          reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    AUTO            reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    REGISTER        reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    VOID            reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    CHAR            reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    SHORT           reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    INT             reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    LONG            reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    FLOAT           reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    DOUBLE          reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    SIGNED          reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    UNSIGNED        reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    BOOL            reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    CONST           reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    VOLATILE        reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    ENUM            reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    STRUCT          reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    UNION           reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    SEMI_COLON      reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    MULTIPLY        reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    IDENTIFIER      reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    L_PAREN         reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    L_SQBR          reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    R_PAREN         reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    COMMA           reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)
    COLON           reduce using rule 137 (enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES .)


state 310

    (182) initializer -> L_BRACES initializer_list R_BRACES .

    SEMI_COLON      reduce using rule 182 (initializer -> L_BRACES initializer_list R_BRACES .)
    COMMA           reduce using rule 182 (initializer -> L_BRACES initializer_list R_BRACES .)
    R_BRACES        reduce using rule 182 (initializer -> L_BRACES initializer_list R_BRACES .)


state 311

    (183) initializer -> L_BRACES initializer_list COMMA . R_BRACES
    (185) initializer_list -> initializer_list COMMA . initializer
    (181) initializer -> . assignment_expression
    (182) initializer -> . L_BRACES initializer_list R_BRACES
    (183) initializer -> . L_BRACES initializer_list COMMA R_BRACES
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    R_BRACES        shift and go to state 336
    L_BRACES        shift and go to state 158
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    initializer                    shift and go to state 337
    assignment_expression          shift and go to state 157
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 312

    (193) labeled_statement -> CASE constant_expression COLON statement .

    R_BRACES        reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    IDENTIFIER      reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    CASE            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    DEFAULT         reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    L_BRACES        reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    SEMI_COLON      reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    IF              reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    SWITCH          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    WHILE           reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    DO              reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    FOR             reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    GOTO            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    CONTINUE        reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    BREAK           reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    RETURN          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    INCREMENT       reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    DECREMENT       reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    SIZEOF          reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    BITWISE_AND     reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    MULTIPLY        reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    ADD             reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    SUBSTRACT       reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    LOGICAL_NOT     reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    NULL            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    INT_CONSTANT    reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    HEX_CONSTANT    reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    OCTAL_CONSTANT  reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    EXPONENT_CONSTANT reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    REAL_CONSTANT   reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    CHAR_CONSTANT   reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    STR_CONSTANT    reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    L_PAREN         reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)
    ELSE            reduce using rule 193 (labeled_statement -> CASE constant_expression COLON statement .)


state 313

    (205) selection_statement -> IF L_PAREN expression R_PAREN . statement
    (206) selection_statement -> IF L_PAREN expression R_PAREN . statement ELSE statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 84
    statement                      shift and go to state 338
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 314

    (43) cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .

    MULTIPLY        reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    DIVIDE          reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    MODULUS         reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    ADD             reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    SUBSTRACT       reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    LEFT_SHIFT      reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    RIGHT_SHIFT     reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    LESS            reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    GREATER         reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    LESS_EQUALS     reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    GREATER_EQUALS  reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    EQUALS          reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    NOT_EQUALS      reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    BITWISE_AND     reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    BITWISE_XOR     reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    BITWISE_OR      reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    LOGICAL_AND     reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    QUES_MARK       reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    LOGICAL_OR      reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    SEMI_COLON      reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    COMMA           reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    R_SQBR          reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    COLON           reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    R_PAREN         reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    ASSIGNMENT      reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    MULTIPLY_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    DIVIDE_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    MODULUS_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    ADD_ASSIGNMENT  reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    SUBSTRACT_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    BITWISE_AND_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    BITWISE_OR_ASSIGNMENT reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)
    R_BRACES        reduce using rule 43 (cast_expression -> L_PAREN type_specifier R_PAREN cast_expression .)


state 315

    (207) selection_statement -> SWITCH L_PAREN expression R_PAREN . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 84
    statement                      shift and go to state 339
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 316

    (208) iteration_statement -> WHILE L_PAREN expression R_PAREN . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 84
    statement                      shift and go to state 340
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 317

    (209) iteration_statement -> DO statement WHILE L_PAREN . expression R_PAREN SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 341
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 318

    (210) iteration_statement -> FOR L_PAREN expression_statement expression_statement . R_PAREN statement
    (211) iteration_statement -> FOR L_PAREN expression_statement expression_statement . expression R_PAREN statement
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    R_PAREN         shift and go to state 342
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 343
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 319

    (73) conditional_expression -> logical_or_expression QUES_MARK expression COLON . conditional_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN

    L_PAREN         shift and go to state 134
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121

    logical_or_expression          shift and go to state 98
    conditional_expression         shift and go to state 344
    logical_and_expression         shift and go to state 105
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128
    cast_expression                shift and go to state 103
    unary_expression               shift and go to state 133
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    primary_expression             shift and go to state 106

state 320

    (21) postfix_expression -> postfix_expression L_SQBR expression R_SQBR .

    L_SQBR          reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    L_PAREN         reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DOT             reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ARROW           reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    INCREMENT       reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DECREMENT       reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ASSIGNMENT      reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MULTIPLY_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DIVIDE_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MODULUS_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ADD_ASSIGNMENT  reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    SUBSTRACT_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_AND_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_OR_ASSIGNMENT reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MULTIPLY        reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    DIVIDE          reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    MODULUS         reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    ADD             reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    SUBSTRACT       reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LEFT_SHIFT      reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    RIGHT_SHIFT     reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LESS            reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    GREATER         reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LESS_EQUALS     reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    GREATER_EQUALS  reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    EQUALS          reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    NOT_EQUALS      reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_AND     reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_XOR     reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    BITWISE_OR      reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LOGICAL_AND     reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    QUES_MARK       reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    LOGICAL_OR      reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    SEMI_COLON      reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    COMMA           reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    R_SQBR          reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    COLON           reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    R_PAREN         reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)
    R_BRACES        reduce using rule 21 (postfix_expression -> postfix_expression L_SQBR expression R_SQBR .)


state 321

    (23) postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .

    L_SQBR          reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    L_PAREN         reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DOT             reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ARROW           reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    INCREMENT       reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DECREMENT       reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ASSIGNMENT      reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MULTIPLY        reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    DIVIDE          reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    MODULUS         reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    ADD             reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    SUBSTRACT       reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LEFT_SHIFT      reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    RIGHT_SHIFT     reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LESS            reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    GREATER         reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LESS_EQUALS     reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    GREATER_EQUALS  reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    EQUALS          reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    NOT_EQUALS      reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_AND     reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_XOR     reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    BITWISE_OR      reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LOGICAL_AND     reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    QUES_MARK       reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    LOGICAL_OR      reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    SEMI_COLON      reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    COMMA           reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    R_SQBR          reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    COLON           reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    R_PAREN         reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)
    R_BRACES        reduce using rule 23 (postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN .)


state 322

    (29) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    IDENTIFIER      shift and go to state 135
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    assignment_expression          shift and go to state 345
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 323

    (35) unary_expression -> SIZEOF L_PAREN type_name R_PAREN .

    ASSIGNMENT      reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MULTIPLY_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    DIVIDE_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MODULUS_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    ADD_ASSIGNMENT  reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SUBSTRACT_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_SHIFT_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_SHIFT_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_AND_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_XOR_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_OR_ASSIGNMENT reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MULTIPLY        reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    DIVIDE          reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    MODULUS         reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    ADD             reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SUBSTRACT       reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LEFT_SHIFT      reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    RIGHT_SHIFT     reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LESS            reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GREATER         reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LESS_EQUALS     reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    GREATER_EQUALS  reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    EQUALS          reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    NOT_EQUALS      reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_AND     reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_XOR     reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    BITWISE_OR      reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LOGICAL_AND     reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    QUES_MARK       reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    LOGICAL_OR      reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    SEMI_COLON      reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COMMA           reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_SQBR          reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    COLON           reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_PAREN         reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)
    R_BRACES        reduce using rule 35 (unary_expression -> SIZEOF L_PAREN type_name R_PAREN .)


state 324

    (168) type_name -> specifier_qualifier_list abstract_declarator .

    R_PAREN         reduce using rule 168 (type_name -> specifier_qualifier_list abstract_declarator .)


state 325

    (169) abstract_declarator -> pointer .
    (171) abstract_declarator -> pointer . direct_abstract_declarator
    (172) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (173) direct_abstract_declarator -> . L_SQBR R_SQBR
    (174) direct_abstract_declarator -> . L_SQBR constant_expression R_SQBR
    (175) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR R_SQBR
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR constant_expression R_SQBR
    (177) direct_abstract_declarator -> . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN

    R_PAREN         reduce using rule 169 (abstract_declarator -> pointer .)
    L_PAREN         shift and go to state 326
    L_SQBR          shift and go to state 234

    direct_abstract_declarator     shift and go to state 294

state 326

    (172) direct_abstract_declarator -> L_PAREN . abstract_declarator R_PAREN
    (177) direct_abstract_declarator -> L_PAREN . R_PAREN
    (178) direct_abstract_declarator -> L_PAREN . parameter_type_list R_PAREN
    (169) abstract_declarator -> . pointer
    (170) abstract_declarator -> . direct_abstract_declarator
    (171) abstract_declarator -> . pointer direct_abstract_declarator
    (160) parameter_type_list -> . parameter_declaration
    (161) parameter_type_list -> . parameter_type_list COMMA parameter_declaration
    (154) pointer -> . MULTIPLY
    (155) pointer -> . MULTIPLY type_qualifier_list
    (156) pointer -> . MULTIPLY pointer
    (157) pointer -> . MULTIPLY type_qualifier_list pointer
    (172) direct_abstract_declarator -> . L_PAREN abstract_declarator R_PAREN
    (173) direct_abstract_declarator -> . L_SQBR R_SQBR
    (174) direct_abstract_declarator -> . L_SQBR constant_expression R_SQBR
    (175) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR R_SQBR
    (176) direct_abstract_declarator -> . direct_abstract_declarator L_SQBR constant_expression R_SQBR
    (177) direct_abstract_declarator -> . L_PAREN R_PAREN
    (178) direct_abstract_declarator -> . L_PAREN parameter_type_list R_PAREN
    (179) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN R_PAREN
    (180) direct_abstract_declarator -> . direct_abstract_declarator L_PAREN parameter_type_list R_PAREN
    (162) parameter_declaration -> . declaration_specifiers declarator
    (163) parameter_declaration -> . declaration_specifiers abstract_declarator
    (164) parameter_declaration -> . declaration_specifiers
    (92) declaration_specifiers -> . storage_class_specifier
    (93) declaration_specifiers -> . storage_class_specifier declaration_specifiers
    (94) declaration_specifiers -> . type_specifier
    (95) declaration_specifiers -> . type_specifier declaration_specifiers
    (96) declaration_specifiers -> . type_qualifier
    (97) declaration_specifiers -> . type_qualifier declaration_specifiers
    (102) storage_class_specifier -> . TYPEDEF
    (103) storage_class_specifier -> . EXTERN
    (104) storage_class_specifier -> . STATIC
    (105) storage_class_specifier -> . AUTO
    (106) storage_class_specifier -> . REGISTER
    (107) type_specifier -> . VOID
    (108) type_specifier -> . CHAR
    (109) type_specifier -> . SHORT
    (110) type_specifier -> . INT
    (111) type_specifier -> . LONG
    (112) type_specifier -> . FLOAT
    (113) type_specifier -> . DOUBLE
    (114) type_specifier -> . SIGNED
    (115) type_specifier -> . UNSIGNED
    (116) type_specifier -> . struct_or_union_specifier
    (117) type_specifier -> . enum_specifier
    (118) type_specifier -> . BOOL
    (143) type_qualifier -> . CONST
    (144) type_qualifier -> . VOLATILE
    (119) struct_or_union_specifier -> . struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES
    (120) struct_or_union_specifier -> . struct_or_union L_BRACES struct_declaration_list R_BRACES
    (121) struct_or_union_specifier -> . struct_or_union IDENTIFIER
    (136) enum_specifier -> . ENUM L_BRACES enumerator_list R_BRACES
    (137) enum_specifier -> . ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES
    (138) enum_specifier -> . ENUM IDENTIFIER
    (122) struct_or_union -> . STRUCT
    (123) struct_or_union -> . UNION

    R_PAREN         shift and go to state 297
    MULTIPLY        shift and go to state 32
    L_PAREN         shift and go to state 326
    L_SQBR          shift and go to state 234
    TYPEDEF         shift and go to state 13
    EXTERN          shift and go to state 14
    STATIC          shift and go to state 15
    AUTO            shift and go to state 16
    REGISTER        shift and go to state 17
    VOID            shift and go to state 18
    CHAR            shift and go to state 19
    SHORT           shift and go to state 20
    INT             shift and go to state 21
    LONG            shift and go to state 22
    FLOAT           shift and go to state 23
    DOUBLE          shift and go to state 24
    SIGNED          shift and go to state 25
    UNSIGNED        shift and go to state 26
    BOOL            shift and go to state 29
    CONST           shift and go to state 30
    VOLATILE        shift and go to state 31
    ENUM            shift and go to state 36
    STRUCT          shift and go to state 37
    UNION           shift and go to state 38

    abstract_declarator            shift and go to state 298
    parameter_type_list            shift and go to state 299
    pointer                        shift and go to state 325
    direct_abstract_declarator     shift and go to state 232
    parameter_declaration          shift and go to state 139
    declaration_specifiers         shift and go to state 141
    storage_class_specifier        shift and go to state 8
    type_specifier                 shift and go to state 9
    type_qualifier                 shift and go to state 10
    struct_or_union_specifier      shift and go to state 27
    enum_specifier                 shift and go to state 28
    struct_or_union                shift and go to state 35

state 327

    (175) direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR .

    L_SQBR          reduce using rule 175 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR .)
    L_PAREN         reduce using rule 175 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR .)
    R_PAREN         reduce using rule 175 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR .)
    COMMA           reduce using rule 175 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR .)


state 328

    (176) direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression . R_SQBR

    R_SQBR          shift and go to state 346


state 329

    (179) direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .

    L_SQBR          reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    L_PAREN         reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    R_PAREN         reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)
    COMMA           reduce using rule 179 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN .)


state 330

    (180) direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list . R_PAREN
    (161) parameter_type_list -> parameter_type_list . COMMA parameter_declaration

    R_PAREN         shift and go to state 347
    COMMA           shift and go to state 226


state 331

    (172) direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .

    L_SQBR          reduce using rule 172 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    L_PAREN         reduce using rule 172 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    R_PAREN         reduce using rule 172 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)
    COMMA           reduce using rule 172 (direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN .)


state 332

    (178) direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .

    L_SQBR          reduce using rule 178 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    L_PAREN         reduce using rule 178 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 178 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 178 (direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN .)


state 333

    (174) direct_abstract_declarator -> L_SQBR constant_expression R_SQBR .

    L_SQBR          reduce using rule 174 (direct_abstract_declarator -> L_SQBR constant_expression R_SQBR .)
    L_PAREN         reduce using rule 174 (direct_abstract_declarator -> L_SQBR constant_expression R_SQBR .)
    R_PAREN         reduce using rule 174 (direct_abstract_declarator -> L_SQBR constant_expression R_SQBR .)
    COMMA           reduce using rule 174 (direct_abstract_declarator -> L_SQBR constant_expression R_SQBR .)


state 334

    (132) struct_declarator_list -> struct_declarator_list COMMA struct_declarator .

    SEMI_COLON      reduce using rule 132 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)
    COMMA           reduce using rule 132 (struct_declarator_list -> struct_declarator_list COMMA struct_declarator .)


state 335

    (135) struct_declarator -> declarator COLON constant_expression .

    SEMI_COLON      reduce using rule 135 (struct_declarator -> declarator COLON constant_expression .)
    COMMA           reduce using rule 135 (struct_declarator -> declarator COLON constant_expression .)


state 336

    (183) initializer -> L_BRACES initializer_list COMMA R_BRACES .

    SEMI_COLON      reduce using rule 183 (initializer -> L_BRACES initializer_list COMMA R_BRACES .)
    COMMA           reduce using rule 183 (initializer -> L_BRACES initializer_list COMMA R_BRACES .)
    R_BRACES        reduce using rule 183 (initializer -> L_BRACES initializer_list COMMA R_BRACES .)


state 337

    (185) initializer_list -> initializer_list COMMA initializer .

    R_BRACES        reduce using rule 185 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 185 (initializer_list -> initializer_list COMMA initializer .)


state 338

    (205) selection_statement -> IF L_PAREN expression R_PAREN statement .
    (206) selection_statement -> IF L_PAREN expression R_PAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    R_BRACES        reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_BRACES        reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SEMI_COLON      reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DO              reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    GOTO            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    INCREMENT       reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    DECREMENT       reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BITWISE_AND     reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    MULTIPLY        reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    ADD             reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    SUBSTRACT       reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    NULL            reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    INT_CONSTANT    reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    STR_CONSTANT    reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .)
    ELSE            shift and go to state 348

  ! ELSE            [ reduce using rule 205 (selection_statement -> IF L_PAREN expression R_PAREN statement .) ]


state 339

    (207) selection_statement -> SWITCH L_PAREN expression R_PAREN statement .

    R_BRACES        reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    L_BRACES        reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SEMI_COLON      reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    DO              reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    GOTO            reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    INCREMENT       reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    DECREMENT       reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    BITWISE_AND     reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    MULTIPLY        reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    ADD             reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    SUBSTRACT       reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    NULL            reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    INT_CONSTANT    reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    STR_CONSTANT    reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)
    ELSE            reduce using rule 207 (selection_statement -> SWITCH L_PAREN expression R_PAREN statement .)


state 340

    (208) iteration_statement -> WHILE L_PAREN expression R_PAREN statement .

    R_BRACES        reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    CASE            reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    DEFAULT         reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    L_BRACES        reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SEMI_COLON      reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    IF              reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SWITCH          reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    WHILE           reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    DO              reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    FOR             reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    GOTO            reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    CONTINUE        reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    BREAK           reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    RETURN          reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    INCREMENT       reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    DECREMENT       reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SIZEOF          reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    BITWISE_AND     reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    MULTIPLY        reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    ADD             reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    SUBSTRACT       reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    NULL            reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    INT_CONSTANT    reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    STR_CONSTANT    reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    L_PAREN         reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)
    ELSE            reduce using rule 208 (iteration_statement -> WHILE L_PAREN expression R_PAREN statement .)


state 341

    (209) iteration_statement -> DO statement WHILE L_PAREN expression . R_PAREN SEMI_COLON
    (88) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 349
    COMMA           shift and go to state 168


state 342

    (210) iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression_statement           shift and go to state 76
    statement                      shift and go to state 350
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    expression                     shift and go to state 84
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 343

    (211) iteration_statement -> FOR L_PAREN expression_statement expression_statement expression . R_PAREN statement
    (88) expression -> expression . COMMA assignment_expression

    R_PAREN         shift and go to state 351
    COMMA           shift and go to state 168


state 344

    (73) conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .

    SEMI_COLON      reduce using rule 73 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    COMMA           reduce using rule 73 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    R_SQBR          reduce using rule 73 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    COLON           reduce using rule 73 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    R_PAREN         reduce using rule 73 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)
    R_BRACES        reduce using rule 73 (conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression .)


state 345

    (29) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    R_PAREN         reduce using rule 29 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 29 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 346

    (176) direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR .

    L_SQBR          reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR .)
    L_PAREN         reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR .)
    R_PAREN         reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR .)
    COMMA           reduce using rule 176 (direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR .)


state 347

    (180) direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .

    L_SQBR          reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    L_PAREN         reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    R_PAREN         reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)
    COMMA           reduce using rule 180 (direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN .)


state 348

    (206) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression                     shift and go to state 84
    statement                      shift and go to state 352
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    expression_statement           shift and go to state 76
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 349

    (209) iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN . SEMI_COLON

    SEMI_COLON      shift and go to state 353


state 350

    (210) iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .

    R_BRACES        reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    IDENTIFIER      reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    CASE            reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    DEFAULT         reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    L_BRACES        reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SEMI_COLON      reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    IF              reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SWITCH          reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    WHILE           reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    DO              reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    FOR             reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    GOTO            reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    CONTINUE        reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    BREAK           reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    RETURN          reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    INCREMENT       reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    DECREMENT       reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SIZEOF          reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    BITWISE_AND     reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    MULTIPLY        reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    ADD             reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    SUBSTRACT       reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    NULL            reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    INT_CONSTANT    reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    STR_CONSTANT    reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    L_PAREN         reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)
    ELSE            reduce using rule 210 (iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement .)


state 351

    (211) iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN . statement
    (186) statement -> . labeled_statement
    (187) statement -> . compound_statement
    (188) statement -> . expression_statement
    (189) statement -> . selection_statement
    (190) statement -> . iteration_statement
    (191) statement -> . jump_statement
    (192) labeled_statement -> . IDENTIFIER COLON statement
    (193) labeled_statement -> . CASE constant_expression COLON statement
    (194) labeled_statement -> . DEFAULT COLON statement
    (195) compound_statement -> . L_BRACES R_BRACES
    (196) compound_statement -> . L_BRACES statement_list R_BRACES
    (197) compound_statement -> . L_BRACES declaration_list R_BRACES
    (198) compound_statement -> . L_BRACES declaration_list statement_list R_BRACES
    (203) expression_statement -> . SEMI_COLON
    (204) expression_statement -> . expression SEMI_COLON
    (205) selection_statement -> . IF L_PAREN expression R_PAREN statement
    (206) selection_statement -> . IF L_PAREN expression R_PAREN statement ELSE statement
    (207) selection_statement -> . SWITCH L_PAREN expression R_PAREN statement
    (208) iteration_statement -> . WHILE L_PAREN expression R_PAREN statement
    (209) iteration_statement -> . DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON
    (210) iteration_statement -> . FOR L_PAREN expression_statement expression_statement R_PAREN statement
    (211) iteration_statement -> . FOR L_PAREN expression_statement expression_statement expression R_PAREN statement
    (212) jump_statement -> . GOTO IDENTIFIER SEMI_COLON
    (213) jump_statement -> . CONTINUE SEMI_COLON
    (214) jump_statement -> . BREAK SEMI_COLON
    (215) jump_statement -> . RETURN SEMI_COLON
    (216) jump_statement -> . RETURN expression SEMI_COLON
    (87) expression -> . assignment_expression
    (88) expression -> . expression COMMA assignment_expression
    (74) assignment_expression -> . conditional_expression
    (75) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (72) conditional_expression -> . logical_or_expression
    (73) conditional_expression -> . logical_or_expression QUES_MARK expression COLON conditional_expression
    (30) unary_expression -> . postfix_expression
    (31) unary_expression -> . INCREMENT unary_expression
    (32) unary_expression -> . DECREMENT unary_expression
    (33) unary_expression -> . unary_operator cast_expression
    (34) unary_expression -> . SIZEOF unary_expression
    (35) unary_expression -> . SIZEOF L_PAREN type_name R_PAREN
    (70) logical_or_expression -> . logical_and_expression
    (71) logical_or_expression -> . logical_or_expression LOGICAL_OR logical_and_expression
    (20) postfix_expression -> . primary_expression
    (21) postfix_expression -> . postfix_expression L_SQBR expression R_SQBR
    (22) postfix_expression -> . postfix_expression L_PAREN R_PAREN
    (23) postfix_expression -> . postfix_expression L_PAREN argument_expression_list R_PAREN
    (24) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (25) postfix_expression -> . postfix_expression ARROW IDENTIFIER
    (26) postfix_expression -> . postfix_expression INCREMENT
    (27) postfix_expression -> . postfix_expression DECREMENT
    (36) unary_operator -> . BITWISE_AND
    (37) unary_operator -> . MULTIPLY
    (38) unary_operator -> . ADD
    (39) unary_operator -> . SUBSTRACT
    (40) unary_operator -> . BITWISE_ONE_COMPLEMENT
    (41) unary_operator -> . LOGICAL_NOT
    (68) logical_and_expression -> . inclusive_or_expression
    (69) logical_and_expression -> . logical_and_expression LOGICAL_AND inclusive_or_expression
    (10) primary_expression -> . IDENTIFIER
    (11) primary_expression -> . NULL
    (12) primary_expression -> . INT_CONSTANT
    (13) primary_expression -> . HEX_CONSTANT
    (14) primary_expression -> . OCTAL_CONSTANT
    (15) primary_expression -> . EXPONENT_CONSTANT
    (16) primary_expression -> . REAL_CONSTANT
    (17) primary_expression -> . CHAR_CONSTANT
    (18) primary_expression -> . STR_CONSTANT
    (19) primary_expression -> . L_PAREN expression R_PAREN
    (66) inclusive_or_expression -> . exclusive_or_expression
    (67) inclusive_or_expression -> . inclusive_or_expression BITWISE_OR exclusive_or_expression
    (64) exclusive_or_expression -> . and_expression
    (65) exclusive_or_expression -> . exclusive_or_expression BITWISE_XOR and_expression
    (62) and_expression -> . equality_expression
    (63) and_expression -> . and_expression BITWISE_AND equality_expression
    (59) equality_expression -> . relational_expression
    (60) equality_expression -> . equality_expression EQUALS relational_expression
    (61) equality_expression -> . equality_expression NOT_EQUALS relational_expression
    (54) relational_expression -> . shift_expression
    (55) relational_expression -> . relational_expression LESS shift_expression
    (56) relational_expression -> . relational_expression GREATER shift_expression
    (57) relational_expression -> . relational_expression LESS_EQUALS shift_expression
    (58) relational_expression -> . relational_expression GREATER_EQUALS shift_expression
    (51) shift_expression -> . additive_expression
    (52) shift_expression -> . shift_expression LEFT_SHIFT additive_expression
    (53) shift_expression -> . shift_expression RIGHT_SHIFT additive_expression
    (48) additive_expression -> . multiplicative_expression
    (49) additive_expression -> . additive_expression ADD multiplicative_expression
    (50) additive_expression -> . additive_expression SUBSTRACT multiplicative_expression
    (44) multiplicative_expression -> . cast_expression
    (45) multiplicative_expression -> . multiplicative_expression MULTIPLY cast_expression
    (46) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (47) multiplicative_expression -> . multiplicative_expression MODULUS cast_expression
    (42) cast_expression -> . unary_expression
    (43) cast_expression -> . L_PAREN type_specifier R_PAREN cast_expression

    IDENTIFIER      shift and go to state 81
    CASE            shift and go to state 82
    DEFAULT         shift and go to state 83
    L_BRACES        shift and go to state 47
    SEMI_COLON      shift and go to state 80
    IF              shift and go to state 85
    SWITCH          shift and go to state 87
    WHILE           shift and go to state 88
    DO              shift and go to state 89
    FOR             shift and go to state 90
    GOTO            shift and go to state 91
    CONTINUE        shift and go to state 92
    BREAK           shift and go to state 93
    RETURN          shift and go to state 94
    INCREMENT       shift and go to state 100
    DECREMENT       shift and go to state 101
    SIZEOF          shift and go to state 104
    BITWISE_AND     shift and go to state 107
    MULTIPLY        shift and go to state 108
    ADD             shift and go to state 109
    SUBSTRACT       shift and go to state 110
    BITWISE_ONE_COMPLEMENT shift and go to state 111
    LOGICAL_NOT     shift and go to state 112
    NULL            shift and go to state 114
    INT_CONSTANT    shift and go to state 115
    HEX_CONSTANT    shift and go to state 116
    OCTAL_CONSTANT  shift and go to state 117
    EXPONENT_CONSTANT shift and go to state 118
    REAL_CONSTANT   shift and go to state 119
    CHAR_CONSTANT   shift and go to state 120
    STR_CONSTANT    shift and go to state 121
    L_PAREN         shift and go to state 86

    expression_statement           shift and go to state 76
    expression                     shift and go to state 84
    statement                      shift and go to state 354
    labeled_statement              shift and go to state 74
    compound_statement             shift and go to state 75
    selection_statement            shift and go to state 77
    iteration_statement            shift and go to state 78
    jump_statement                 shift and go to state 79
    assignment_expression          shift and go to state 95
    conditional_expression         shift and go to state 96
    unary_expression               shift and go to state 97
    logical_or_expression          shift and go to state 98
    postfix_expression             shift and go to state 99
    unary_operator                 shift and go to state 102
    cast_expression                shift and go to state 103
    logical_and_expression         shift and go to state 105
    primary_expression             shift and go to state 106
    inclusive_or_expression        shift and go to state 113
    exclusive_or_expression        shift and go to state 122
    and_expression                 shift and go to state 123
    equality_expression            shift and go to state 124
    relational_expression          shift and go to state 125
    shift_expression               shift and go to state 126
    additive_expression            shift and go to state 127
    multiplicative_expression      shift and go to state 128

state 352

    (206) selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .

    R_BRACES        reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CASE            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DEFAULT         reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_BRACES        reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SEMI_COLON      reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    IF              reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SWITCH          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    WHILE           reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DO              reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    FOR             reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    GOTO            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CONTINUE        reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BREAK           reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    RETURN          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    INCREMENT       reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    DECREMENT       reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SIZEOF          reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BITWISE_AND     reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    MULTIPLY        reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    ADD             reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    SUBSTRACT       reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    LOGICAL_NOT     reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    NULL            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    INT_CONSTANT    reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    HEX_CONSTANT    reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    OCTAL_CONSTANT  reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    EXPONENT_CONSTANT reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    REAL_CONSTANT   reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    CHAR_CONSTANT   reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    STR_CONSTANT    reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    L_PAREN         reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)
    ELSE            reduce using rule 206 (selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement .)


state 353

    (209) iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .

    R_BRACES        reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    IDENTIFIER      reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    CASE            reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    DEFAULT         reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    L_BRACES        reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SEMI_COLON      reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    IF              reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SWITCH          reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    WHILE           reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    DO              reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    FOR             reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    GOTO            reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    CONTINUE        reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    BREAK           reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    RETURN          reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    INCREMENT       reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    DECREMENT       reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SIZEOF          reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    BITWISE_AND     reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    MULTIPLY        reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    ADD             reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    SUBSTRACT       reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    BITWISE_ONE_COMPLEMENT reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    LOGICAL_NOT     reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    NULL            reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    INT_CONSTANT    reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    HEX_CONSTANT    reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    OCTAL_CONSTANT  reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    EXPONENT_CONSTANT reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    REAL_CONSTANT   reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    CHAR_CONSTANT   reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    STR_CONSTANT    reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    L_PAREN         reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)
    ELSE            reduce using rule 209 (iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON .)


state 354

    (211) iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .

    R_BRACES        reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    IDENTIFIER      reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    CASE            reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    DEFAULT         reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    L_BRACES        reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SEMI_COLON      reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    IF              reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SWITCH          reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    WHILE           reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    DO              reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    FOR             reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    GOTO            reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    CONTINUE        reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    BREAK           reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    RETURN          reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    INCREMENT       reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    DECREMENT       reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SIZEOF          reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    BITWISE_AND     reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    MULTIPLY        reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    ADD             reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    SUBSTRACT       reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    BITWISE_ONE_COMPLEMENT reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    LOGICAL_NOT     reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    NULL            reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    INT_CONSTANT    reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    HEX_CONSTANT    reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    OCTAL_CONSTANT  reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    EXPONENT_CONSTANT reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    REAL_CONSTANT   reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    CHAR_CONSTANT   reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    STR_CONSTANT    reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    L_PAREN         reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)
    ELSE            reduce using rule 211 (iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 338 resolved as shift
