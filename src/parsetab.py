
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BLOCK_COMMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INLINE_COMMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : declaration_specifiers declarator declaration_list compound_statement\n\t\t\t            | declaration_specifiers declarator compound_statement\n    \n    \n    function_definition : declarator declaration_list compound_statement\n\t\t\t            | declarator compound_statement\n    \n    \n    primary_expression : IDENTIFIER\n                       | NULL\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | TRUE\n                       | FALSE\n                       | L_PAREN expression R_PAREN\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : declaration_specifiers SEMI_COLON\n\t            | declaration_specifiers init_declarator_list SEMI_COLON\n    \n    declaration_specifiers : storage_class_specifier\n                           | storage_class_specifier declaration_specifiers\n                           | type_specifier\n                           | type_specifier declaration_specifiers\n                           | type_qualifier\n                           | type_qualifier declaration_specifiers\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    storage_class_specifier : TYPEDEF\n                            | EXTERN\n                            | STATIC\n                            | AUTO\n                            | REGISTER\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | SIGNED\n                   | UNSIGNED\n                   | struct_or_union_specifier\n                   | enum_specifier\n                   | BOOL\n    \n    struct_or_union_specifier : struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES\n\t                          | struct_or_union L_BRACES struct_declaration_list R_BRACES\n\t                          | struct_or_union IDENTIFIER\n    \n    struct_or_union : STRUCT\n\t                | UNION\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI_COLON\n    \n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n                             | type_specifier\n                             | type_qualifier specifier_qualifier_list\n                             | type_qualifier\n    \n    struct_declarator_list : struct_declarator\n\t                       | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n                      | COLON constant_expression\n                      | declarator COLON constant_expression\n    \n    enum_specifier : ENUM L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    type_qualifier : CONST\n\t               | VOLATILE\n    \n    declarator : pointer direct_declarator\n\t           | direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR constant_expression R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n                      | direct_declarator L_PAREN parameter_type_list R_PAREN\n                      | direct_declarator L_PAREN identifier_list R_PAREN\n                      | direct_declarator L_PAREN R_PAREN\n    \n    pointer : MULTIPLY\n\t        | MULTIPLY type_qualifier_list\n            | MULTIPLY pointer\n            | MULTIPLY type_qualifier_list pointer\n    \n    type_qualifier_list : type_qualifier\n\t                    | type_qualifier_list type_qualifier\n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n\t                      | declaration_specifiers abstract_declarator\n\t                      | declaration_specifiers\n    \n    identifier_list : IDENTIFIER\n\t                | identifier_list COMMA IDENTIFIER\n    \n    type_name : specifier_qualifier_list\n\t          | specifier_qualifier_list abstract_declarator\n    \n    abstract_declarator : pointer\n\t                    | direct_abstract_declarator\n\t                    | pointer direct_abstract_declarator\n    \n    direct_abstract_declarator : L_PAREN abstract_declarator R_PAREN\n\t                           | L_SQBR R_SQBR\n\t                           | L_SQBR constant_expression R_SQBR\n\t                           | direct_abstract_declarator L_SQBR R_SQBR\n                               | direct_abstract_declarator L_SQBR constant_expression R_SQBR\n                               | L_PAREN R_PAREN\n                               | L_PAREN parameter_type_list R_PAREN\n                               | direct_abstract_declarator L_PAREN R_PAREN\n                               | direct_abstract_declarator L_PAREN parameter_type_list R_PAREN\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES statement_list R_BRACES\n\t                   | L_BRACES declaration_list R_BRACES\n\t                   | L_BRACES declaration_list statement_list R_BRACES\n    \n    declaration_list : declaration\n\t                 | declaration_list declaration\n    \n    statement_list : statement\n\t               | statement_list statement\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : GOTO IDENTIFIER SEMI_COLON\n\t               | CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    '
    
_lr_action_items = {'TYPEDEF':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,133,139,146,157,162,164,227,228,229,230,236,239,247,253,263,301,307,314,],[13,13,-2,-4,-5,13,13,13,13,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,13,-92,13,-9,-201,13,-147,13,-123,-140,13,-7,-93,-8,-202,-197,13,-152,-155,-150,-6,-198,-199,-151,-153,13,-154,13,-122,-138,-200,13,13,-121,-139,]),'EXTERN':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,133,139,146,157,162,164,227,228,229,230,236,239,247,253,263,301,307,314,],[14,14,-2,-4,-5,14,14,14,14,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,14,-92,14,-9,-201,14,-147,14,-123,-140,14,-7,-93,-8,-202,-197,14,-152,-155,-150,-6,-198,-199,-151,-153,14,-154,14,-122,-138,-200,14,14,-121,-139,]),'STATIC':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,133,139,146,157,162,164,227,228,229,230,236,239,247,253,263,301,307,314,],[15,15,-2,-4,-5,15,15,15,15,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,15,-92,15,-9,-201,15,-147,15,-123,-140,15,-7,-93,-8,-202,-197,15,-152,-155,-150,-6,-198,-199,-151,-153,15,-154,15,-122,-138,-200,15,15,-121,-139,]),'AUTO':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,133,139,146,157,162,164,227,228,229,230,236,239,247,253,263,301,307,314,],[16,16,-2,-4,-5,16,16,16,16,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,16,-92,16,-9,-201,16,-147,16,-123,-140,16,-7,-93,-8,-202,-197,16,-152,-155,-150,-6,-198,-199,-151,-153,16,-154,16,-122,-138,-200,16,16,-121,-139,]),'REGISTER':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,133,139,146,157,162,164,227,228,229,230,236,239,247,253,263,301,307,314,],[17,17,-2,-4,-5,17,17,17,17,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,17,-92,17,-9,-201,17,-147,17,-123,-140,17,-7,-93,-8,-202,-197,17,-152,-155,-150,-6,-198,-199,-151,-153,17,-154,17,-122,-138,-200,17,17,-121,-139,]),'VOID':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[18,18,-2,-4,-5,18,18,18,18,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,18,-92,18,-9,-201,18,-147,18,-123,18,-140,18,-7,-93,-8,-202,-197,18,18,-152,18,-155,-150,18,18,-126,18,18,-6,-198,-199,18,-151,-153,18,-154,18,18,-122,-127,-138,-200,18,18,-121,-128,-139,]),'CHAR':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[19,19,-2,-4,-5,19,19,19,19,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,19,-92,19,-9,-201,19,-147,19,-123,19,-140,19,-7,-93,-8,-202,-197,19,19,-152,19,-155,-150,19,19,-126,19,19,-6,-198,-199,19,-151,-153,19,-154,19,19,-122,-127,-138,-200,19,19,-121,-128,-139,]),'SHORT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[20,20,-2,-4,-5,20,20,20,20,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,20,-92,20,-9,-201,20,-147,20,-123,20,-140,20,-7,-93,-8,-202,-197,20,20,-152,20,-155,-150,20,20,-126,20,20,-6,-198,-199,20,-151,-153,20,-154,20,20,-122,-127,-138,-200,20,20,-121,-128,-139,]),'INT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[21,21,-2,-4,-5,21,21,21,21,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,21,-92,21,-9,-201,21,-147,21,-123,21,-140,21,-7,-93,-8,-202,-197,21,21,-152,21,-155,-150,21,21,-126,21,21,-6,-198,-199,21,-151,-153,21,-154,21,21,-122,-127,-138,-200,21,21,-121,-128,-139,]),'LONG':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[22,22,-2,-4,-5,22,22,22,22,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,22,-92,22,-9,-201,22,-147,22,-123,22,-140,22,-7,-93,-8,-202,-197,22,22,-152,22,-155,-150,22,22,-126,22,22,-6,-198,-199,22,-151,-153,22,-154,22,22,-122,-127,-138,-200,22,22,-121,-128,-139,]),'FLOAT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[23,23,-2,-4,-5,23,23,23,23,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,23,-92,23,-9,-201,23,-147,23,-123,23,-140,23,-7,-93,-8,-202,-197,23,23,-152,23,-155,-150,23,23,-126,23,23,-6,-198,-199,23,-151,-153,23,-154,23,23,-122,-127,-138,-200,23,23,-121,-128,-139,]),'DOUBLE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[24,24,-2,-4,-5,24,24,24,24,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,24,-92,24,-9,-201,24,-147,24,-123,24,-140,24,-7,-93,-8,-202,-197,24,24,-152,24,-155,-150,24,24,-126,24,24,-6,-198,-199,24,-151,-153,24,-154,24,24,-122,-127,-138,-200,24,24,-121,-128,-139,]),'SIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[25,25,-2,-4,-5,25,25,25,25,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,25,-92,25,-9,-201,25,-147,25,-123,25,-140,25,-7,-93,-8,-202,-197,25,25,-152,25,-155,-150,25,25,-126,25,25,-6,-198,-199,25,-151,-153,25,-154,25,25,-122,-127,-138,-200,25,25,-121,-128,-139,]),'UNSIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[26,26,-2,-4,-5,26,26,26,26,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,26,-92,26,-9,-201,26,-147,26,-123,26,-140,26,-7,-93,-8,-202,-197,26,26,-152,26,-155,-150,26,26,-126,26,26,-6,-198,-199,26,-151,-153,26,-154,26,26,-122,-127,-138,-200,26,26,-121,-128,-139,]),'BOOL':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[29,29,-2,-4,-5,29,29,29,29,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,29,-92,29,-9,-201,29,-147,29,-123,29,-140,29,-7,-93,-8,-202,-197,29,29,-152,29,-155,-150,29,29,-126,29,29,-6,-198,-199,29,-151,-153,29,-154,29,29,-122,-127,-138,-200,29,29,-121,-128,-139,]),'CONST':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,44,45,46,47,52,54,55,57,59,60,62,63,64,66,68,69,70,72,86,133,136,139,145,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[30,30,-2,-4,-5,30,30,30,30,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,30,-149,-3,30,-92,30,-9,-201,30,-147,30,30,-160,-123,30,-140,30,-7,-93,-8,-202,-197,30,30,-152,30,-155,-161,-150,30,30,-126,30,30,-6,-198,-199,30,-151,-153,30,-154,30,30,-122,-127,-138,-200,30,30,-121,-128,-139,]),'VOLATILE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,44,45,46,47,52,54,55,57,59,60,62,63,64,66,68,69,70,72,86,133,136,139,145,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[31,31,-2,-4,-5,31,31,31,31,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,31,-149,-3,31,-92,31,-9,-201,31,-147,31,31,-160,-123,31,-140,31,-7,-93,-8,-202,-197,31,31,-152,31,-155,-161,-150,31,31,-126,31,31,-6,-198,-199,31,-151,-153,31,-154,31,31,-122,-127,-138,-200,31,31,-121,-128,-139,]),'MULTIPLY':([0,2,3,4,5,6,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,39,41,45,46,47,48,49,50,51,53,55,57,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,130,135,136,137,143,145,150,151,152,157,160,162,163,164,165,166,168,169,170,171,174,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,236,237,239,244,245,246,247,249,253,254,255,256,259,260,263,267,268,269,274,277,278,292,293,294,295,296,300,307,309,310,314,316,317,318,319,320,321,322,323,324,325,326,327,328,340,341,342,344,350,352,353,354,355,356,],[32,32,-2,-4,-5,32,-94,-96,-98,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,32,32,-3,-92,-9,-201,108,32,-95,-97,-99,108,32,-160,-123,-140,-7,108,-93,32,-8,-202,-197,108,108,-203,-188,-189,-190,-191,-192,-193,-205,-10,108,108,108,108,-44,-32,108,108,108,-46,108,-22,-38,-39,-40,-41,-42,-43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,224,-44,108,-10,32,-161,32,-130,-132,-6,108,-198,-204,-199,108,108,108,-206,108,108,32,108,108,108,-215,-216,-217,108,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,108,108,108,108,-28,-29,-33,108,-34,-35,-36,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,32,108,-122,108,-129,-131,-138,108,-200,-194,108,-196,-21,108,32,108,-214,-218,-24,-26,-27,224,224,-47,-48,-49,108,-121,32,108,-139,108,-195,108,-45,108,108,108,108,108,-23,-25,108,-37,-207,-209,-210,108,108,-212,108,-208,-211,-213,]),'IDENTIFIER':([0,2,3,4,5,6,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,41,45,46,47,48,49,50,51,53,54,55,56,57,59,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,91,94,100,101,102,104,107,108,109,110,111,112,136,143,144,145,150,151,152,156,157,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,231,234,236,237,239,244,245,246,247,248,249,253,254,255,256,260,267,268,269,300,307,309,310,314,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[33,33,-2,-4,-5,33,-94,-96,-98,33,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-156,33,59,62,-124,-125,-3,-92,-9,-201,81,33,-95,-97,-99,137,142,-157,-158,-160,-123,155,-140,-7,137,-93,33,-8,-202,-197,81,81,-203,-188,-189,-190,-191,-192,-193,-205,137,137,81,179,137,137,137,137,137,-38,-39,-40,-41,-42,-43,137,33,-159,-161,33,-130,-132,155,-6,137,-198,-204,-199,81,81,81,-206,137,137,137,137,137,-215,-216,-217,137,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,137,137,137,137,277,278,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,137,298,33,33,137,-122,137,-129,-131,-138,155,137,-200,-194,81,-196,137,137,-214,-218,137,-121,33,137,-139,137,-195,81,81,81,137,137,137,137,-207,-209,-210,81,81,-212,81,-208,-211,-213,]),'L_PAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,41,45,46,47,48,49,50,51,52,53,55,56,57,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,133,136,137,139,143,144,145,146,150,151,152,157,160,162,163,164,165,166,168,169,170,171,174,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,230,234,235,236,237,239,244,245,246,247,249,253,254,255,256,259,260,262,263,266,267,268,269,274,277,278,299,300,302,305,307,309,310,314,316,317,318,320,321,322,323,324,325,326,327,329,331,333,334,335,340,341,342,344,348,349,350,352,353,354,355,356,],[34,34,-2,-4,-5,34,-94,-96,-98,34,54,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-156,-149,34,-3,-92,-9,-201,86,34,-95,-97,-99,54,136,-157,-158,-160,-123,-140,-7,86,-93,34,-8,-202,-197,86,86,-203,-188,-189,-190,-191,-192,-193,-205,-10,136,171,86,175,176,86,178,86,199,205,205,136,209,-22,-38,-39,-40,-41,-42,-43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-152,86,-10,-155,236,-159,-161,-150,34,-130,-132,-6,86,-198,-204,-199,86,86,86,-206,86,86,263,86,86,86,-215,-216,-217,86,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,86,136,86,86,-28,-29,86,86,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,136,-151,-153,-154,236,301,236,136,-122,136,-129,-131,-138,136,-200,-194,86,-196,-21,136,263,263,322,86,-214,-218,-24,-26,-27,301,136,-179,-175,-121,34,136,-139,86,-195,86,86,86,86,86,136,-23,-25,86,-177,-181,-174,-180,-176,-207,-209,-210,86,-178,-182,86,-212,86,-208,-211,-213,]),'ENUM':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[36,36,-2,-4,-5,36,36,36,36,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,36,-92,36,-9,-201,36,-147,36,-123,36,-140,36,-7,-93,-8,-202,-197,36,36,-152,36,-155,-150,36,36,-126,36,36,-6,-198,-199,36,-151,-153,36,-154,36,36,-122,-127,-138,-200,36,36,-121,-128,-139,]),'STRUCT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[37,37,-2,-4,-5,37,37,37,37,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,37,-92,37,-9,-201,37,-147,37,-123,37,-140,37,-7,-93,-8,-202,-197,37,37,-152,37,-155,-150,37,37,-126,37,37,-6,-198,-199,37,-151,-153,37,-154,37,37,-122,-127,-138,-200,37,37,-121,-128,-139,]),'UNION':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,133,136,139,146,147,148,149,151,152,157,162,164,209,227,228,229,230,236,238,239,240,247,253,263,301,307,308,314,],[38,38,-2,-4,-5,38,38,38,38,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-3,38,-92,38,-9,-201,38,-147,38,-123,38,-140,38,-7,-93,-8,-202,-197,38,38,-152,38,-155,-150,38,38,-126,38,38,-6,-198,-199,38,-151,-153,38,-154,38,38,-122,-127,-138,-200,38,38,-121,-128,-139,]),'$end':([1,2,3,4,5,39,41,45,64,66,68,70,157,162,164,253,],[0,-1,-2,-4,-5,-3,-92,-9,-7,-93,-8,-197,-6,-198,-199,-200,]),'SEMI_COLON':([6,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,40,41,42,43,46,47,48,49,50,51,52,59,62,66,69,70,71,72,73,74,75,76,77,78,79,80,81,84,89,92,93,94,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,137,139,146,158,159,161,162,163,164,165,166,168,169,178,179,180,181,182,183,202,203,204,206,207,208,227,228,230,239,241,242,243,247,253,254,255,256,257,259,267,268,269,270,272,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,307,311,314,315,317,318,319,320,321,325,326,328,336,337,338,340,341,342,344,346,350,351,352,353,354,355,356,],[41,-94,-96,-98,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-102,-92,66,-100,-201,80,41,-95,-97,-99,-147,-123,-140,-93,-202,-197,80,80,-203,-188,-189,-190,-191,-192,-193,-205,-10,169,80,180,181,182,-89,-76,-44,-74,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-102,-152,-91,-44,-10,-155,-150,-103,-183,-101,-198,-204,-199,80,80,80,-206,80,268,-215,-216,-217,269,-28,-29,-33,-34,-35,-36,-151,-153,-154,-122,308,-133,-135,-138,-200,-194,80,-196,-90,-21,80,-214,-218,-77,-73,-24,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-121,-136,-139,-184,-195,80,-45,80,80,-23,-25,-37,-134,-137,-185,-207,-209,-210,80,-75,80,355,-212,80,-208,-211,-213,]),'L_BRACES':([7,12,33,35,36,37,38,40,41,44,46,47,52,59,62,63,65,66,69,70,71,72,73,74,75,76,77,78,79,80,89,133,139,146,160,162,163,164,165,166,168,169,180,181,182,227,228,230,253,254,255,256,268,269,316,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[47,-148,-149,60,61,-124,-125,47,-92,47,-201,47,-147,147,156,47,160,-93,-202,-197,47,47,-203,-188,-189,-190,-191,-192,-193,-205,47,-152,-155,-150,160,-198,-204,-199,47,47,47,-206,-215,-216,-217,-151,-153,-154,-200,-194,47,-196,-214,-218,160,-195,47,47,47,-207,-209,-210,47,47,-212,47,-208,-211,-213,]),'L_SQBR':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,50,51,52,55,56,57,59,62,81,99,106,114,115,116,117,118,119,120,121,122,123,133,137,139,143,144,145,146,151,152,174,202,203,227,228,230,234,235,236,239,245,246,247,259,262,263,274,277,278,299,302,305,307,314,325,326,329,331,333,334,335,348,349,],[-94,-96,-98,53,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-156,-149,-95,-97,-99,53,-157,-158,-160,-123,-140,-10,198,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-152,-10,-155,237,-159,-161,-150,-130,-132,237,-28,-29,-151,-153,-154,237,300,237,-122,-129,-131,-138,-21,237,237,-24,-26,-27,300,-179,-175,-121,-139,-23,-25,-177,-181,-174,-180,-176,-178,-182,]),'R_PAREN':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,50,51,52,54,55,56,57,58,59,62,80,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,135,137,138,139,140,141,142,143,144,145,146,151,152,169,172,173,174,199,202,203,204,206,207,208,227,228,230,232,233,234,235,236,239,245,246,247,257,258,259,261,262,263,264,265,270,272,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,301,302,303,304,305,307,314,319,323,325,326,328,329,331,332,333,334,335,343,345,346,347,348,349,],[-94,-96,-98,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-156,-149,-95,-97,-99,-147,139,-157,-158,-160,146,-123,-140,-205,-89,-76,-44,-74,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-152,-44,-10,228,-155,230,-162,-167,-166,-159,-161,-150,-130,-132,-206,259,260,-169,274,-28,-29,-33,-34,-35,-36,-151,-153,-154,-164,-165,-171,-172,302,-122,-129,-131,-138,-90,318,-21,-170,-171,302,320,321,-77,-73,-24,326,-30,-26,-27,328,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-163,-168,-173,331,-179,333,334,-175,-121,-139,-45,344,-23,-25,-37,-177,-181,349,-174,-180,-176,351,353,-75,-31,-178,-182,]),'COMMA':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,40,42,43,49,50,51,52,55,56,57,59,62,81,84,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,135,137,138,139,140,141,142,143,144,145,146,153,154,155,158,159,161,172,183,202,203,204,206,207,208,227,228,230,232,233,234,235,239,241,242,243,247,250,251,252,257,258,259,264,265,270,271,272,273,274,275,276,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,302,304,305,307,311,312,313,314,315,319,325,326,328,329,331,332,333,334,335,336,337,338,339,343,345,346,347,348,349,],[-94,-96,-98,-148,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-156,-149,-102,67,-100,-95,-97,-99,-147,-157,-158,-160,-123,-140,-10,170,-89,-76,-44,-74,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-102,-152,-91,-44,-10,229,-155,231,-162,-167,-166,-159,-161,-150,248,-141,-143,-103,-183,-101,170,170,-28,-29,-33,-34,-35,-36,-151,-153,-154,-164,-165,-171,-172,-122,309,-133,-135,-138,248,316,-186,-90,170,-21,170,170,-77,170,-73,170,-24,327,-30,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-163,-168,-173,-179,229,-175,-121,-136,-142,-144,-139,-184,-45,-23,-25,-37,-177,-181,229,-174,-180,-176,-134,-137,-185,-187,170,170,-75,-31,-178,-182,]),'ASSIGNMENT':([12,33,40,52,81,97,99,106,114,115,116,117,118,119,120,121,122,123,131,133,135,137,139,146,155,202,203,204,206,207,208,227,228,230,259,274,277,278,319,325,326,328,],[-148,-149,65,-147,-10,185,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,65,-152,-44,-10,-155,-150,249,-28,-29,-33,-34,-35,-36,-151,-153,-154,-21,-24,-26,-27,-45,-23,-25,-37,]),'COLON':([12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,52,59,62,81,83,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,133,134,135,137,139,146,150,151,152,167,202,203,204,206,207,208,227,228,230,239,243,245,246,247,257,259,270,271,272,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,307,309,314,319,325,326,328,346,],[-148,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-145,-146,-149,-147,-123,-140,166,168,-89,-76,-44,-74,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-152,-91,-44,-10,-155,-150,244,-130,-132,255,-28,-29,-33,-34,-35,-36,-151,-153,-154,-122,310,-129,-131,-138,-90,-21,-77,324,-73,-24,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-121,244,-139,-45,-23,-25,-37,-75,]),'R_BRACES':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,134,135,137,148,149,153,154,155,159,162,163,164,165,169,180,181,182,202,203,204,206,207,208,238,240,250,251,252,253,254,256,259,268,269,270,272,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,308,312,313,315,316,317,319,325,326,328,338,339,340,341,342,346,352,354,355,356,],[-92,-201,70,-93,-202,-197,162,164,-203,-188,-189,-190,-191,-192,-193,-205,-76,-44,-74,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-91,-44,-10,239,-126,247,-141,-143,-183,-198,-204,-199,253,-206,-215,-216,-217,-28,-29,-33,-34,-35,-36,307,-127,314,315,-186,-200,-194,-196,-21,-214,-218,-77,-73,-24,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-128,-142,-144,-184,338,-195,-45,-23,-25,-37,-185,-187,-207,-209,-210,-75,-212,-208,-211,-213,]),'CASE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,82,-93,-202,-197,82,82,-203,-188,-189,-190,-191,-192,-193,-205,82,-198,-204,-199,82,82,82,-206,-215,-216,-217,-200,-194,82,-196,-214,-218,-195,82,82,82,-207,-209,-210,82,82,-212,82,-208,-211,-213,]),'DEFAULT':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,83,-93,-202,-197,83,83,-203,-188,-189,-190,-191,-192,-193,-205,83,-198,-204,-199,83,83,83,-206,-215,-216,-217,-200,-194,83,-196,-214,-218,-195,83,83,83,-207,-209,-210,83,83,-212,83,-208,-211,-213,]),'IF':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,85,-93,-202,-197,85,85,-203,-188,-189,-190,-191,-192,-193,-205,85,-198,-204,-199,85,85,85,-206,-215,-216,-217,-200,-194,85,-196,-214,-218,-195,85,85,85,-207,-209,-210,85,85,-212,85,-208,-211,-213,]),'SWITCH':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,87,-93,-202,-197,87,87,-203,-188,-189,-190,-191,-192,-193,-205,87,-198,-204,-199,87,87,87,-206,-215,-216,-217,-200,-194,87,-196,-214,-218,-195,87,87,87,-207,-209,-210,87,87,-212,87,-208,-211,-213,]),'WHILE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,177,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,88,-93,-202,-197,88,88,-203,-188,-189,-190,-191,-192,-193,-205,88,-198,-204,-199,88,88,88,-206,266,-215,-216,-217,-200,-194,88,-196,-214,-218,-195,88,88,88,-207,-209,-210,88,88,-212,88,-208,-211,-213,]),'DO':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,89,-93,-202,-197,89,89,-203,-188,-189,-190,-191,-192,-193,-205,89,-198,-204,-199,89,89,89,-206,-215,-216,-217,-200,-194,89,-196,-214,-218,-195,89,89,89,-207,-209,-210,89,89,-212,89,-208,-211,-213,]),'FOR':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,90,-93,-202,-197,90,90,-203,-188,-189,-190,-191,-192,-193,-205,90,-198,-204,-199,90,90,90,-206,-215,-216,-217,-200,-194,90,-196,-214,-218,-195,90,90,90,-207,-209,-210,90,90,-212,90,-208,-211,-213,]),'GOTO':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,91,-93,-202,-197,91,91,-203,-188,-189,-190,-191,-192,-193,-205,91,-198,-204,-199,91,91,91,-206,-215,-216,-217,-200,-194,91,-196,-214,-218,-195,91,91,91,-207,-209,-210,91,91,-212,91,-208,-211,-213,]),'CONTINUE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,92,-93,-202,-197,92,92,-203,-188,-189,-190,-191,-192,-193,-205,92,-198,-204,-199,92,92,92,-206,-215,-216,-217,-200,-194,92,-196,-214,-218,-195,92,92,92,-207,-209,-210,92,92,-212,92,-208,-211,-213,]),'BREAK':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,93,-93,-202,-197,93,93,-203,-188,-189,-190,-191,-192,-193,-205,93,-198,-204,-199,93,93,93,-206,-215,-216,-217,-200,-194,93,-196,-214,-218,-195,93,93,93,-207,-209,-210,93,93,-212,93,-208,-211,-213,]),'RETURN':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,162,163,164,165,166,168,169,180,181,182,253,254,255,256,268,269,317,318,320,321,340,341,342,344,350,352,353,354,355,356,],[-92,-201,94,-93,-202,-197,94,94,-203,-188,-189,-190,-191,-192,-193,-205,94,-198,-204,-199,94,94,94,-206,-215,-216,-217,-200,-194,94,-196,-214,-218,-195,94,94,94,-207,-209,-210,94,94,-212,94,-208,-211,-213,]),'INCREMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,136,137,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,259,260,267,268,269,274,277,278,300,310,316,317,318,320,321,322,323,324,325,326,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,100,100,100,-93,-202,-197,100,100,-203,-188,-189,-190,-191,-192,-193,-205,-10,100,100,100,100,202,100,100,100,100,-22,-38,-39,-40,-41,-42,-43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,100,-10,100,-198,-204,-199,100,100,100,-206,100,100,100,100,100,-215,-216,-217,100,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,100,100,100,100,-28,-29,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-200,-194,100,-196,-21,100,100,-214,-218,-24,-26,-27,100,100,100,-195,100,100,100,100,100,100,-23,-25,100,-207,-209,-210,100,100,-212,100,-208,-211,-213,]),'DECREMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,136,137,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,259,260,267,268,269,274,277,278,300,310,316,317,318,320,321,322,323,324,325,326,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,101,101,101,-93,-202,-197,101,101,-203,-188,-189,-190,-191,-192,-193,-205,-10,101,101,101,101,203,101,101,101,101,-22,-38,-39,-40,-41,-42,-43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,101,-10,101,-198,-204,-199,101,101,101,-206,101,101,101,101,101,-215,-216,-217,101,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,101,101,101,101,-28,-29,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-200,-194,101,-196,-21,101,101,-214,-218,-24,-26,-27,101,101,101,-195,101,101,101,101,101,101,-23,-25,101,-207,-209,-210,101,101,-212,101,-208,-211,-213,]),'SIZEOF':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,104,104,104,-93,-202,-197,104,104,-203,-188,-189,-190,-191,-192,-193,-205,104,104,104,104,104,104,104,104,-38,-39,-40,-41,-42,-43,104,104,-198,-204,-199,104,104,104,-206,104,104,104,104,104,-215,-216,-217,104,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-200,-194,104,-196,104,104,-214,-218,104,104,104,-195,104,104,104,104,104,104,104,-207,-209,-210,104,104,-212,104,-208,-211,-213,]),'BITWISE_AND':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,125,126,127,128,129,130,135,136,137,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,259,260,267,268,269,274,277,278,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,300,310,316,317,318,319,320,321,322,323,324,325,326,327,328,340,341,342,344,350,352,353,354,355,356,],[-92,-201,107,107,107,-93,-202,-197,107,107,-203,-188,-189,-190,-191,-192,-193,-205,-10,107,107,107,107,-44,-32,107,107,107,-46,107,-22,-38,-39,-40,-41,-42,-43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,213,-64,-61,-56,-53,-50,-44,107,-10,107,-198,-204,-199,107,107,107,-206,107,107,107,107,107,-215,-216,-217,107,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,107,107,107,107,-28,-29,-33,107,-34,-35,-36,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-200,-194,107,-196,-21,107,107,-214,-218,-24,-26,-27,213,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,107,107,107,-195,107,-45,107,107,107,107,107,-23,-25,107,-37,-207,-209,-210,107,107,-212,107,-208,-211,-213,]),'ADD':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,129,130,135,136,137,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,259,260,267,268,269,274,277,278,290,291,292,293,294,295,296,300,310,316,317,318,319,320,321,322,323,324,325,326,327,328,340,341,342,344,350,352,353,354,355,356,],[-92,-201,109,109,109,-93,-202,-197,109,109,-203,-188,-189,-190,-191,-192,-193,-205,-10,109,109,109,109,-44,-32,109,109,109,-46,109,-22,-38,-39,-40,-41,-42,-43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,222,-50,-44,109,-10,109,-198,-204,-199,109,109,109,-206,109,109,109,109,109,-215,-216,-217,109,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,109,109,109,109,-28,-29,-33,109,-34,-35,-36,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-200,-194,109,-196,-21,109,109,-214,-218,-24,-26,-27,222,222,-51,-52,-47,-48,-49,109,109,109,-195,109,-45,109,109,109,109,109,-23,-25,109,-37,-207,-209,-210,109,109,-212,109,-208,-211,-213,]),'SUBSTRACT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,122,123,129,130,135,136,137,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,259,260,267,268,269,274,277,278,290,291,292,293,294,295,296,300,310,316,317,318,319,320,321,322,323,324,325,326,327,328,340,341,342,344,350,352,353,354,355,356,],[-92,-201,110,110,110,-93,-202,-197,110,110,-203,-188,-189,-190,-191,-192,-193,-205,-10,110,110,110,110,-44,-32,110,110,110,-46,110,-22,-38,-39,-40,-41,-42,-43,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,223,-50,-44,110,-10,110,-198,-204,-199,110,110,110,-206,110,110,110,110,110,-215,-216,-217,110,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,110,110,110,110,-28,-29,-33,110,-34,-35,-36,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-200,-194,110,-196,-21,110,110,-214,-218,-24,-26,-27,223,223,-51,-52,-47,-48,-49,110,110,110,-195,110,-45,110,110,110,110,110,-23,-25,110,-37,-207,-209,-210,110,110,-212,110,-208,-211,-213,]),'BITWISE_ONE_COMPLEMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,111,111,111,-93,-202,-197,111,111,-203,-188,-189,-190,-191,-192,-193,-205,111,111,111,111,111,111,111,111,-38,-39,-40,-41,-42,-43,111,111,-198,-204,-199,111,111,111,-206,111,111,111,111,111,-215,-216,-217,111,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-200,-194,111,-196,111,111,-214,-218,111,111,111,-195,111,111,111,111,111,111,111,-207,-209,-210,111,111,-212,111,-208,-211,-213,]),'LOGICAL_NOT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,112,112,112,-93,-202,-197,112,112,-203,-188,-189,-190,-191,-192,-193,-205,112,112,112,112,112,112,112,112,-38,-39,-40,-41,-42,-43,112,112,-198,-204,-199,112,112,112,-206,112,112,112,112,112,-215,-216,-217,112,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-200,-194,112,-196,112,112,-214,-218,112,112,112,-195,112,112,112,112,112,112,112,-207,-209,-210,112,112,-212,112,-208,-211,-213,]),'NULL':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,114,114,114,-93,-202,-197,114,114,-203,-188,-189,-190,-191,-192,-193,-205,114,114,114,114,114,114,114,114,-38,-39,-40,-41,-42,-43,114,114,-198,-204,-199,114,114,114,-206,114,114,114,114,114,-215,-216,-217,114,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-200,-194,114,-196,114,114,-214,-218,114,114,114,-195,114,114,114,114,114,114,114,-207,-209,-210,114,114,-212,114,-208,-211,-213,]),'INT_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,115,115,115,-93,-202,-197,115,115,-203,-188,-189,-190,-191,-192,-193,-205,115,115,115,115,115,115,115,115,-38,-39,-40,-41,-42,-43,115,115,-198,-204,-199,115,115,115,-206,115,115,115,115,115,-215,-216,-217,115,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-200,-194,115,-196,115,115,-214,-218,115,115,115,-195,115,115,115,115,115,115,115,-207,-209,-210,115,115,-212,115,-208,-211,-213,]),'HEX_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,116,116,116,-93,-202,-197,116,116,-203,-188,-189,-190,-191,-192,-193,-205,116,116,116,116,116,116,116,116,-38,-39,-40,-41,-42,-43,116,116,-198,-204,-199,116,116,116,-206,116,116,116,116,116,-215,-216,-217,116,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-200,-194,116,-196,116,116,-214,-218,116,116,116,-195,116,116,116,116,116,116,116,-207,-209,-210,116,116,-212,116,-208,-211,-213,]),'OCTAL_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,117,117,117,-93,-202,-197,117,117,-203,-188,-189,-190,-191,-192,-193,-205,117,117,117,117,117,117,117,117,-38,-39,-40,-41,-42,-43,117,117,-198,-204,-199,117,117,117,-206,117,117,117,117,117,-215,-216,-217,117,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-200,-194,117,-196,117,117,-214,-218,117,117,117,-195,117,117,117,117,117,117,117,-207,-209,-210,117,117,-212,117,-208,-211,-213,]),'EXPONENT_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,118,118,118,-93,-202,-197,118,118,-203,-188,-189,-190,-191,-192,-193,-205,118,118,118,118,118,118,118,118,-38,-39,-40,-41,-42,-43,118,118,-198,-204,-199,118,118,118,-206,118,118,118,118,118,-215,-216,-217,118,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-200,-194,118,-196,118,118,-214,-218,118,118,118,-195,118,118,118,118,118,118,118,-207,-209,-210,118,118,-212,118,-208,-211,-213,]),'REAL_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,119,119,119,-93,-202,-197,119,119,-203,-188,-189,-190,-191,-192,-193,-205,119,119,119,119,119,119,119,119,-38,-39,-40,-41,-42,-43,119,119,-198,-204,-199,119,119,119,-206,119,119,119,119,119,-215,-216,-217,119,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-200,-194,119,-196,119,119,-214,-218,119,119,119,-195,119,119,119,119,119,119,119,-207,-209,-210,119,119,-212,119,-208,-211,-213,]),'CHAR_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,120,120,120,-93,-202,-197,120,120,-203,-188,-189,-190,-191,-192,-193,-205,120,120,120,120,120,120,120,120,-38,-39,-40,-41,-42,-43,120,120,-198,-204,-199,120,120,120,-206,120,120,120,120,120,-215,-216,-217,120,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-200,-194,120,-196,120,120,-214,-218,120,120,120,-195,120,120,120,120,120,120,120,-207,-209,-210,120,120,-212,120,-208,-211,-213,]),'STR_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,121,121,121,-93,-202,-197,121,121,-203,-188,-189,-190,-191,-192,-193,-205,121,121,121,121,121,121,121,121,-38,-39,-40,-41,-42,-43,121,121,-198,-204,-199,121,121,121,-206,121,121,121,121,121,-215,-216,-217,121,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-200,-194,121,-196,121,121,-214,-218,121,121,121,-195,121,121,121,121,121,121,121,-207,-209,-210,121,121,-212,121,-208,-211,-213,]),'TRUE':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,122,122,122,-93,-202,-197,122,122,-203,-188,-189,-190,-191,-192,-193,-205,122,122,122,122,122,122,122,122,-38,-39,-40,-41,-42,-43,122,122,-198,-204,-199,122,122,122,-206,122,122,122,122,122,-215,-216,-217,122,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,-200,-194,122,-196,122,122,-214,-218,122,122,122,-195,122,122,122,122,122,122,122,-207,-209,-210,122,122,-212,122,-208,-211,-213,]),'FALSE':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,136,160,162,163,164,165,166,168,169,170,171,175,176,178,180,181,182,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,253,254,255,256,260,267,268,269,300,310,316,317,318,320,321,322,323,324,327,340,341,342,344,350,352,353,354,355,356,],[-92,-201,123,123,123,-93,-202,-197,123,123,-203,-188,-189,-190,-191,-192,-193,-205,123,123,123,123,123,123,123,123,-38,-39,-40,-41,-42,-43,123,123,-198,-204,-199,123,123,123,-206,123,123,123,123,123,-215,-216,-217,123,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,-200,-194,123,-196,123,123,-214,-218,123,123,123,-195,123,123,123,123,123,123,123,-207,-209,-210,123,123,-212,123,-208,-211,-213,]),'R_SQBR':([53,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,132,134,135,137,202,203,204,206,207,208,237,257,259,270,272,273,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,300,306,319,325,326,328,330,346,],[133,-89,-76,-44,-74,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,227,-91,-44,-10,-28,-29,-33,-34,-35,-36,305,-90,-21,-77,-73,325,-24,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,329,335,-45,-23,-25,-37,348,-75,]),'ELSE':([70,74,75,76,77,78,79,80,162,164,169,180,181,182,253,254,256,268,269,317,340,341,342,352,354,355,356,],[-197,-188,-189,-190,-191,-192,-193,-205,-198,-199,-206,-215,-216,-217,-200,-194,-196,-214,-218,-195,350,-209,-210,-212,-208,-211,-213,]),'DOT':([81,99,106,114,115,116,117,118,119,120,121,122,123,137,202,203,259,274,277,278,325,326,],[-10,200,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-10,-28,-29,-21,-24,-26,-27,-23,-25,]),'ARROW':([81,99,106,114,115,116,117,118,119,120,121,122,123,137,202,203,259,274,277,278,325,326,],[-10,201,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-10,-28,-29,-21,-24,-26,-27,-23,-25,]),'MULTIPLY_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,186,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'DIVIDE_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,187,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'MODULUS_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,188,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'ADD_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,189,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'SUBSTRACT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,190,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'LEFT_SHIFT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,191,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'RIGHT_SHIFT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,192,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'BITWISE_AND_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,193,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'BITWISE_XOR_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,194,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'BITWISE_OR_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,122,123,135,137,202,203,204,206,207,208,259,274,277,278,319,325,326,328,],[-10,195,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,-45,-23,-25,-37,]),'DIVIDE':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,130,135,137,202,203,204,206,207,208,259,274,277,278,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,225,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,225,225,-47,-48,-49,-45,-23,-25,-37,]),'MODULUS':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,130,135,137,202,203,204,206,207,208,259,274,277,278,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,226,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,226,226,-47,-48,-49,-45,-23,-25,-37,]),'LEFT_SHIFT':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,220,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,220,220,220,220,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'RIGHT_SHIFT':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,221,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,221,221,221,221,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'LESS':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,216,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,216,216,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'GREATER':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,217,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,217,217,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'LESS_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,218,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,218,218,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'GREATER_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,219,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,219,219,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,126,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,283,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,214,-61,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,214,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'NOT_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,126,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,283,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,215,-61,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,215,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'BITWISE_XOR':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,212,-66,-64,-61,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,212,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'BITWISE_OR':([81,97,99,103,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,137,202,203,204,206,207,208,259,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,-22,211,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-24,-26,-27,211,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'LOGICAL_AND':([81,97,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,137,202,203,204,206,207,208,259,272,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,-32,-46,210,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,210,-24,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'QUES_MARK':([81,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,137,202,203,204,206,207,208,259,272,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,196,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-73,-24,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),'LOGICAL_OR':([81,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,135,137,202,203,204,206,207,208,259,272,274,277,278,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,319,325,326,328,],[-10,-44,197,-32,-46,-72,-22,-70,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-68,-66,-64,-61,-56,-53,-50,-44,-10,-28,-29,-33,-34,-35,-36,-21,-73,-24,-26,-27,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-45,-23,-25,-37,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,39,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,7,40,44,47,63,72,],[5,5,46,46,69,46,69,69,]),'declaration_specifiers':([0,2,7,8,9,10,40,44,47,54,63,72,229,236,263,301,],[6,6,48,49,50,51,48,48,48,143,48,48,143,143,143,143,]),'declarator':([0,2,6,34,48,67,143,150,236,309,],[7,7,40,58,131,131,232,243,58,243,]),'storage_class_specifier':([0,2,7,8,9,10,40,44,47,54,63,72,229,236,263,301,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'type_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,136,147,148,151,152,209,229,236,238,263,301,],[9,9,9,9,9,9,9,9,9,9,151,9,9,151,151,151,151,151,151,151,9,9,151,9,9,]),'type_qualifier':([0,2,7,8,9,10,32,40,44,47,54,55,60,63,72,86,136,147,148,151,152,209,229,236,238,263,301,],[10,10,10,10,10,10,57,10,10,10,10,145,152,10,10,152,152,152,152,152,152,152,10,10,152,10,10,]),'pointer':([0,2,6,32,34,48,55,67,143,150,174,236,263,309,],[11,11,11,56,11,11,144,11,234,11,262,234,262,11,]),'direct_declarator':([0,2,6,11,34,48,67,143,150,234,236,309,],[12,12,12,52,12,12,12,12,12,52,12,12,]),'struct_or_union_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,136,147,148,151,152,209,229,236,238,263,301,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'enum_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,136,147,148,151,152,209,229,236,238,263,301,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'struct_or_union':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,136,147,148,151,152,209,229,236,238,263,301,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'init_declarator_list':([6,48,],[42,42,]),'init_declarator':([6,48,67,],[43,43,161,]),'declaration_list':([7,40,47,],[44,63,72,]),'compound_statement':([7,40,44,47,63,71,72,89,165,166,168,255,318,320,321,344,350,353,],[45,64,68,75,157,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'type_qualifier_list':([32,],[55,]),'statement_list':([47,72,],[71,165,]),'statement':([47,71,72,89,165,166,168,255,318,320,321,344,350,353,],[73,163,73,177,163,254,256,317,340,341,342,352,354,356,]),'labeled_statement':([47,71,72,89,165,166,168,255,318,320,321,344,350,353,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'expression_statement':([47,71,72,89,165,166,168,178,255,267,318,320,321,344,350,353,],[76,76,76,76,76,76,76,267,76,323,76,76,76,76,76,76,]),'selection_statement':([47,71,72,89,165,166,168,255,318,320,321,344,350,353,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'iteration_statement':([47,71,72,89,165,166,168,255,318,320,321,344,350,353,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'jump_statement':([47,71,72,89,165,166,168,255,318,320,321,344,350,353,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'expression':([47,71,72,86,89,94,136,165,166,168,171,175,176,178,196,198,205,209,255,267,318,320,321,322,323,344,350,353,],[84,84,84,172,84,183,172,84,84,84,258,264,265,84,271,273,172,172,84,84,84,84,84,343,345,84,84,84,]),'assignment_expression':([47,65,71,72,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,198,199,205,209,255,267,316,318,320,321,322,323,327,344,350,353,],[95,159,95,95,95,95,95,95,159,95,95,95,257,95,95,95,95,270,95,95,276,95,95,95,95,159,95,95,95,95,95,347,95,95,95,]),'conditional_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,198,199,205,209,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[96,134,96,96,96,134,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,134,134,134,96,96,134,134,96,96,96,96,96,96,346,96,96,96,96,]),'unary_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,255,260,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[97,135,97,97,97,135,97,97,97,204,206,135,208,97,97,97,97,97,97,97,97,97,97,97,97,135,97,97,97,97,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,97,135,97,135,135,97,97,97,97,97,97,135,97,97,97,97,]),'logical_or_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,198,199,205,209,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'postfix_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,255,260,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'unary_operator':([47,53,65,71,72,82,86,89,94,100,101,102,104,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,255,260,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'cast_expression':([47,53,65,71,72,82,86,89,94,102,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,255,260,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[103,103,103,103,103,103,103,103,103,207,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,294,295,296,103,103,103,103,319,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'logical_and_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,272,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'primary_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,237,244,249,255,260,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'inclusive_or_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,280,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'exclusive_or_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,281,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'and_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,282,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'equality_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,283,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'relational_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,284,285,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'shift_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,286,287,288,289,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'additive_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,290,291,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,]),'multiplicative_expression':([47,53,65,71,72,82,86,89,94,136,160,165,166,168,170,171,175,176,178,184,196,197,198,199,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,237,244,249,255,267,300,310,316,318,320,321,322,323,324,327,344,350,353,],[130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,292,293,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,]),'constant_expression':([53,82,237,244,249,300,310,],[132,167,306,311,313,330,337,]),'parameter_type_list':([54,236,263,301,],[138,304,304,332,]),'identifier_list':([54,],[140,]),'parameter_declaration':([54,229,236,263,301,],[141,297,141,141,141,]),'struct_declaration_list':([60,147,],[148,238,]),'struct_declaration':([60,147,148,238,],[149,149,240,240,]),'specifier_qualifier_list':([60,86,136,147,148,151,152,209,238,],[150,174,174,150,150,245,246,174,150,]),'enumerator_list':([61,156,],[153,250,]),'enumerator':([61,156,248,],[154,154,312,]),'initializer':([65,160,316,],[158,252,339,]),'type_name':([86,136,209,],[173,173,279,]),'assignment_operator':([97,],[184,]),'abstract_declarator':([143,174,236,263,],[233,261,303,303,]),'direct_abstract_declarator':([143,174,234,236,262,263,],[235,235,299,235,299,235,]),'struct_declarator_list':([150,],[241,]),'struct_declarator':([150,309,],[242,336,]),'initializer_list':([160,],[251,]),'argument_expression_list':([199,],[275,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',49),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',54),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',55),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',61),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',62),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition_1','cparser.py',68),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition_1','cparser.py',69),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition_2','cparser.py',79),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition_2','cparser.py',80),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',91),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',92),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',93),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',94),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',95),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',96),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',97),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',98),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',99),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',100),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',101),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',102),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',111),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',112),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',113),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',114),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',115),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',116),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',117),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',118),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',134),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',135),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',145),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',146),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',147),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',148),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',149),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',150),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',159),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',160),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',161),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',162),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',163),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',164),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',170),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',171),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',180),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',181),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',182),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',183),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',194),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',195),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',196),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',205),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',206),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',207),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',218),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',219),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',220),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',221),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',222),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',233),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',234),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',235),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',246),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',247),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',258),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',259),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',270),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',271),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',281),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',282),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',293),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',294),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',305),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',306),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',316),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',317),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',327),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',328),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',329),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',330),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',331),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',332),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',333),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',334),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',335),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',336),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',337),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',343),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',344),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',358),
  ('declaration -> declaration_specifiers SEMI_COLON','declaration',2,'p_declaration','cparser.py',365),
  ('declaration -> declaration_specifiers init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',366),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',375),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',376),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',377),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',378),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',379),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',380),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',388),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',389),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',401),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',402),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',411),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',412),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',413),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',414),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',415),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',421),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',422),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',423),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',424),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',425),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',426),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',427),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','cparser.py',428),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','cparser.py',429),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','cparser.py',430),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','cparser.py',431),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',432),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES','struct_or_union_specifier',5,'p_struct_or_union_specifier','cparser.py',439),
  ('struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES','struct_or_union_specifier',4,'p_struct_or_union_specifier','cparser.py',440),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','cparser.py',441),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','cparser.py',447),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','cparser.py',448),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',455),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',456),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',461),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','cparser.py',466),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',467),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','cparser.py',468),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',469),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',478),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',479),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','cparser.py',484),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','cparser.py',485),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','cparser.py',486),
  ('enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES','enum_specifier',4,'p_enum_specifier','cparser.py',491),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',492),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','cparser.py',493),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',498),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',499),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',504),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',505),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','cparser.py',510),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','cparser.py',511),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',517),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','cparser.py',518),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',527),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',528),
  ('direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',529),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',530),
  ('direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',531),
  ('direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',532),
  ('direct_declarator -> direct_declarator L_PAREN R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',533),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',547),
  ('pointer -> MULTIPLY type_qualifier_list','pointer',2,'p_pointer','cparser.py',548),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer','cparser.py',549),
  ('pointer -> MULTIPLY type_qualifier_list pointer','pointer',3,'p_pointer','cparser.py',550),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','cparser.py',558),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','cparser.py',559),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',565),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',566),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',579),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',580),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','cparser.py',581),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','cparser.py',593),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','cparser.py',594),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','cparser.py',609),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','cparser.py',610),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','cparser.py',619),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','cparser.py',620),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','cparser.py',621),
  ('direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',629),
  ('direct_abstract_declarator -> L_SQBR R_SQBR','direct_abstract_declarator',2,'p_direct_abstract_declarator','cparser.py',630),
  ('direct_abstract_declarator -> L_SQBR constant_expression R_SQBR','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',631),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',632),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR','direct_abstract_declarator',4,'p_direct_abstract_declarator','cparser.py',633),
  ('direct_abstract_declarator -> L_PAREN R_PAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','cparser.py',634),
  ('direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',635),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',636),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','cparser.py',637),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',650),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',651),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',652),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',661),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',662),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',668),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',669),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',670),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',671),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',672),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',673),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement_1','cparser.py',679),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement_2','cparser.py',685),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement_2','cparser.py',686),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',695),
  ('compound_statement -> L_BRACES statement_list R_BRACES','compound_statement',3,'p_compound_statement','cparser.py',696),
  ('compound_statement -> L_BRACES declaration_list R_BRACES','compound_statement',3,'p_compound_statement','cparser.py',697),
  ('compound_statement -> L_BRACES declaration_list statement_list R_BRACES','compound_statement',4,'p_compound_statement','cparser.py',698),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','cparser.py',710),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','cparser.py',711),
  ('statement_list -> statement','statement_list',1,'p_statement_list','cparser.py',717),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','cparser.py',718),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',725),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',726),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',735),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',736),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',737),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',747),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',748),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',749),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',750),
  ('jump_statement -> GOTO IDENTIFIER SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',766),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',767),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',768),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',769),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',770),
]
