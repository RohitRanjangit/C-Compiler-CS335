
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    function_definition  : type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym\n                         | type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n                       | NULL\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR expression R_SQBR\n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES\n    \n    add_sym_struct : L_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement_list : labeled_statement_list labeled_statement\n                           | labeled_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[8,8,-2,-4,-5,-3,-95,8,-10,-96,8,-110,8,8,-111,8,-165,8,-165,8,8,-112,-165,-165,-7,-164,-145,8,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,8,-146,-148,-152,-160,-161,-162,8,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'CHAR':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[9,9,-2,-4,-5,-3,-95,9,-10,-96,9,-110,9,9,-111,9,-165,9,-165,9,9,-112,-165,-165,-7,-164,-145,9,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,9,-146,-148,-152,-160,-161,-162,9,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'INT':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[10,10,-2,-4,-5,-3,-95,10,-10,-96,10,-110,10,10,-111,10,-165,10,-165,10,10,-112,-165,-165,-7,-164,-145,10,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,10,-146,-148,-152,-160,-161,-162,10,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'LONG':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[11,11,-2,-4,-5,-3,-95,11,-10,-96,11,-110,11,11,-111,11,-165,11,-165,11,11,-112,-165,-165,-7,-164,-145,11,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,11,-146,-148,-152,-160,-161,-162,11,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'FLOAT':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[12,12,-2,-4,-5,-3,-95,12,-10,-96,12,-110,12,12,-111,12,-165,12,-165,12,12,-112,-165,-165,-7,-164,-145,12,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,12,-146,-148,-152,-160,-161,-162,12,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'DOUBLE':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[13,13,-2,-4,-5,-3,-95,13,-10,-96,13,-110,13,13,-111,13,-165,13,-165,13,13,-112,-165,-165,-7,-164,-145,13,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,13,-146,-148,-152,-160,-161,-162,13,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'STRUCT':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[14,14,-2,-4,-5,-3,-95,42,-10,-96,42,-110,42,42,-111,42,-165,181,-165,42,42,-112,-165,-165,-7,-164,-145,181,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,181,-146,-148,-152,-160,-161,-162,181,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'BOOL':([0,2,3,4,5,16,23,25,27,28,35,36,55,87,88,93,94,95,96,125,127,152,155,156,158,159,160,161,162,163,164,165,166,167,168,169,170,182,218,220,221,222,223,224,225,226,232,233,234,247,253,262,263,265,272,274,279,280,286,],[15,15,-2,-4,-5,-3,-95,15,-10,-96,15,-110,15,15,-111,15,-165,15,-165,15,15,-112,-165,-165,-7,-164,-145,15,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-113,-6,-8,-143,15,-146,-148,-152,-160,-161,-162,15,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'$end':([1,2,3,4,5,16,23,28,94,96,155,156,158,160,182,220,221,224,],[0,-1,-2,-4,-5,-3,-95,-96,-165,-165,-165,-165,-7,-145,-9,-6,-8,-146,]),'MULTIPLY':([6,8,9,10,11,12,13,15,19,22,23,24,26,28,29,31,33,37,45,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,82,89,95,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,171,176,180,184,189,192,193,195,196,197,198,211,212,213,214,215,219,222,223,225,226,227,228,229,231,232,233,234,236,239,240,241,242,243,245,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[22,-101,-102,-103,-104,-105,-106,-108,31,-121,-95,-107,60,-96,22,-122,22,22,60,-47,-35,60,60,60,-49,60,60,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,146,22,60,-107,60,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,60,60,-26,-27,60,60,-36,60,-37,-38,-47,60,-39,60,22,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-164,60,-147,-149,-150,-134,-135,-136,-137,-138,-151,22,60,60,60,-29,-31,-32,-21,60,60,31,146,146,-50,-51,-52,22,-143,60,-148,-152,60,60,60,60,-160,-161,-162,-107,60,-28,-30,60,-40,-48,60,60,-163,60,60,60,60,-144,-153,-156,60,60,-158,60,-154,60,-157,-159,60,-155,60,]),'IDENTIFIER':([6,8,9,10,11,12,13,14,15,19,20,22,23,24,26,28,29,31,33,37,42,45,50,51,52,54,55,59,60,61,62,63,64,89,95,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,118,119,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,171,176,180,181,184,196,197,219,222,223,225,226,227,228,229,231,232,233,234,236,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-123,-101,-102,-103,-104,-105,-106,24,-108,32,32,-121,-95,-107,58,-96,-123,-122,-123,-123,97,58,58,58,58,58,58,-41,-42,-43,-44,-45,-46,-123,58,-107,58,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,58,58,58,58,192,193,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-164,58,-147,-149,-150,-134,-135,-136,-137,-138,-151,-123,58,58,236,58,58,58,-123,-143,58,-148,-152,58,58,58,58,-160,-161,-162,-107,58,58,58,58,-163,58,58,58,58,-144,-153,-156,58,58,-158,58,-154,58,-157,-159,58,-155,58,]),'L_PAREN':([6,8,9,10,11,12,13,15,17,19,20,22,23,24,26,28,29,30,31,32,33,34,37,45,49,50,51,52,54,55,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,89,95,97,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,150,159,161,162,163,164,165,166,167,168,169,170,171,173,174,175,176,177,180,184,189,192,193,195,196,197,216,219,222,223,225,226,227,228,229,231,232,233,234,236,239,240,241,242,247,251,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-123,-101,-102,-103,-104,-105,-106,-108,27,33,33,-121,-95,-107,55,-96,-123,-116,-122,-118,-123,-117,-123,55,117,121,121,125,127,55,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-123,55,-107,55,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,55,125,-26,-27,55,55,55,55,55,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,-119,-164,55,-147,-149,-150,-134,-135,-136,-137,-138,-151,-123,227,228,229,55,231,55,55,-29,-31,-32,-21,55,125,-120,-123,-143,55,-148,-152,55,55,55,55,-160,-161,-162,-107,125,-28,-30,55,55,260,55,-163,55,55,55,55,-144,-153,-156,55,55,-158,55,-154,125,-157,-159,55,-155,55,]),'SEMI_COLON':([7,17,18,21,23,28,30,32,34,40,43,44,46,47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,92,95,114,115,120,122,123,124,126,130,150,153,154,159,161,162,163,164,165,166,167,168,169,170,172,176,178,179,180,183,185,187,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,222,223,225,226,231,232,233,234,235,237,240,241,243,244,245,246,247,252,253,254,257,259,262,263,265,267,269,271,272,273,274,279,280,285,286,287,],[23,-99,28,-97,-95,-96,-116,-118,-117,96,-100,-129,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-98,-99,156,170,-26,-27,-36,-37,-38,-47,-39,-92,-119,218,-114,-164,170,-147,-149,-150,-134,-135,-136,-137,-138,-151,226,170,232,233,234,-130,-80,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-120,-109,-143,170,-148,-152,170,-160,-161,-162,253,-131,-28,-30,-40,-93,-48,-115,170,170,-163,-78,170,170,-144,-153,-156,170,170,279,-158,170,-154,-157,-159,170,-155,170,]),'R_PAREN':([8,9,10,11,12,13,15,22,25,27,30,31,32,34,38,41,46,47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,90,97,114,115,117,120,122,123,124,126,128,129,130,131,150,157,170,185,187,189,190,191,192,193,194,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,226,240,241,243,244,245,248,249,250,254,255,261,266,268,],[-101,-102,-103,-104,-105,-106,-108,-121,40,-10,-116,-122,-118,-117,92,-124,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,150,-126,-107,-26,-27,189,-36,-37,-38,-47,-39,195,197,-92,-127,-119,-125,-151,-80,-76,-29,241,-33,-31,-32,243,-21,-128,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-120,-152,-28,-30,-40,-93,-48,257,258,259,-78,-34,267,271,273,]),'COMMA':([17,18,21,30,32,34,38,41,43,44,46,47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,98,99,114,115,120,122,123,124,126,128,130,150,153,154,157,172,183,185,186,187,188,189,190,191,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,235,237,238,240,241,243,244,245,246,248,249,250,254,255,266,268,],[-99,29,-97,-116,-118,-117,93,-124,-100,-129,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-98,-99,-126,184,-132,-26,-27,-36,-37,-38,-47,-39,196,-92,-119,219,-114,-125,196,-130,-80,196,-76,196,-29,242,-33,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-120,196,-131,-133,-28,-30,-40,-93,-48,-115,196,196,196,-78,-34,196,196,]),'ASSIGNMENT':([17,30,32,34,47,49,57,58,66,67,68,69,70,71,72,73,74,75,84,114,115,120,122,123,124,126,150,189,192,193,195,216,240,241,243,245,],[26,-116,-118,-117,101,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,26,-26,-27,-36,-37,-38,-47,-39,-119,-29,-31,-32,-21,-120,-28,-30,-40,-48,]),'R_BRACES':([23,28,44,46,47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,87,88,95,98,99,114,115,120,122,123,124,126,151,152,159,161,162,163,164,165,166,167,168,169,170,183,184,185,187,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,218,222,225,226,232,233,234,237,238,240,241,243,245,247,253,254,256,262,263,265,272,274,275,276,279,280,281,282,286,288,289,],[-95,-96,-129,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-165,-111,160,183,-132,-26,-27,-36,-37,-38,-47,-39,217,-112,222,224,-147,-149,-150,-134,-135,-136,-137,-138,-151,-130,237,-80,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-113,-143,-148,-152,-160,-161,-162,-131,-133,-28,-30,-40,-48,-165,-163,-78,262,-144,-153,-156,-158,-154,-165,-140,-157,-159,286,-139,-155,-142,-141,]),'L_BRACES':([23,24,26,28,39,40,45,91,92,95,159,161,162,163,164,165,166,167,168,169,170,176,184,222,223,225,226,232,233,234,236,247,253,257,258,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,36,45,-96,95,-12,45,95,-11,159,-164,159,-147,-149,-150,-134,-135,-136,-137,-138,-151,159,45,-143,159,-148,-152,-160,-161,-162,36,159,-163,159,264,159,-144,-153,-156,159,159,-158,159,-154,-157,-159,159,-155,159,]),'IF':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,173,-164,173,-147,-149,-150,-134,-135,-136,-137,-138,-151,173,-143,173,-148,-152,-160,-161,-162,173,-163,173,173,-144,-153,-156,173,173,-158,173,-154,-157,-159,173,-155,173,]),'SWITCH':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,174,-164,174,-147,-149,-150,-134,-135,-136,-137,-138,-151,174,-143,174,-148,-152,-160,-161,-162,174,-163,174,174,-144,-153,-156,174,174,-158,174,-154,-157,-159,174,-155,174,]),'WHILE':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,230,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,175,-164,175,-147,-149,-150,-134,-135,-136,-137,-138,-151,175,-143,175,-148,-152,251,-160,-161,-162,175,-163,175,175,-144,-153,-156,175,175,-158,175,-154,-157,-159,175,-155,175,]),'DO':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,176,-164,176,-147,-149,-150,-134,-135,-136,-137,-138,-151,176,-143,176,-148,-152,-160,-161,-162,176,-163,176,176,-144,-153,-156,176,176,-158,176,-154,-157,-159,176,-155,176,]),'FOR':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,177,-164,177,-147,-149,-150,-134,-135,-136,-137,-138,-151,177,-143,177,-148,-152,-160,-161,-162,177,-163,177,177,-144,-153,-156,177,177,-158,177,-154,-157,-159,177,-155,177,]),'CONTINUE':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,178,-164,178,-147,-149,-150,-134,-135,-136,-137,-138,-151,178,-143,178,-148,-152,-160,-161,-162,178,-163,178,178,-144,-153,-156,178,178,-158,178,-154,-157,-159,178,-155,178,]),'BREAK':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,179,-164,179,-147,-149,-150,-134,-135,-136,-137,-138,-151,179,-143,179,-148,-152,-160,-161,-162,179,-163,179,179,-144,-153,-156,179,179,-158,179,-154,-157,-159,179,-155,179,]),'RETURN':([23,28,95,159,161,162,163,164,165,166,167,168,169,170,176,222,223,225,226,232,233,234,247,253,257,259,262,263,265,267,269,272,273,274,279,280,285,286,287,],[-95,-96,180,-164,180,-147,-149,-150,-134,-135,-136,-137,-138,-151,180,-143,180,-148,-152,-160,-161,-162,180,-163,180,180,-144,-153,-156,180,180,-158,180,-154,-157,-159,180,-155,180,]),'INCREMENT':([23,26,28,45,49,50,51,52,54,55,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,189,192,193,195,196,197,222,223,225,226,227,228,229,231,232,233,234,239,240,241,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,50,-96,50,114,50,50,50,50,50,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,50,50,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,50,50,-26,-27,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-164,50,-147,-149,-150,-134,-135,-136,-137,-138,-151,50,50,50,-29,-31,-32,-21,50,50,-143,50,-148,-152,50,50,50,50,-160,-161,-162,50,-28,-30,50,50,50,-163,50,50,50,50,-144,-153,-156,50,50,-158,50,-154,50,-157,-159,50,-155,50,]),'DECREMENT':([23,26,28,45,49,50,51,52,54,55,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,189,192,193,195,196,197,222,223,225,226,227,228,229,231,232,233,234,239,240,241,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,51,-96,51,115,51,51,51,51,51,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,51,51,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,51,51,-26,-27,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,-164,51,-147,-149,-150,-134,-135,-136,-137,-138,-151,51,51,51,-29,-31,-32,-21,51,51,-143,51,-148,-152,51,51,51,51,-160,-161,-162,51,-28,-30,51,51,51,-163,51,51,51,51,-144,-153,-156,51,51,-158,51,-154,51,-157,-159,51,-155,51,]),'SIZEOF':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,54,-96,54,54,54,54,54,54,-41,-42,-43,-44,-45,-46,54,54,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-164,54,-147,-149,-150,-134,-135,-136,-137,-138,-151,54,54,54,54,54,-143,54,-148,-152,54,54,54,54,-160,-161,-162,54,54,54,54,-163,54,54,54,54,-144,-153,-156,54,54,-158,54,-154,54,-157,-159,54,-155,54,]),'BITWISE_AND':([23,26,28,45,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,77,78,79,80,81,82,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,189,192,193,195,196,197,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,222,223,225,226,227,228,229,231,232,233,234,239,240,241,242,243,245,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,59,-96,59,-47,-35,59,59,59,-49,59,59,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,135,-67,-64,-59,-56,-53,59,59,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,59,59,-26,-27,59,59,-36,59,-37,-38,-47,59,-39,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-164,59,-147,-149,-150,-134,-135,-136,-137,-138,-151,59,59,59,-29,-31,-32,-21,59,59,135,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-143,59,-148,-152,59,59,59,59,-160,-161,-162,59,-28,-30,59,-40,-48,59,59,-163,59,59,59,59,-144,-153,-156,59,59,-158,59,-154,59,-157,-159,59,-155,59,]),'ADD':([23,26,28,45,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,81,82,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,189,192,193,195,196,197,209,210,211,212,213,214,215,222,223,225,226,227,228,229,231,232,233,234,239,240,241,242,243,245,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,61,-96,61,-47,-35,61,61,61,-49,61,61,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,144,-53,61,61,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,61,61,-26,-27,61,61,-36,61,-37,-38,-47,61,-39,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-164,61,-147,-149,-150,-134,-135,-136,-137,-138,-151,61,61,61,-29,-31,-32,-21,61,61,144,144,-54,-55,-50,-51,-52,-143,61,-148,-152,61,61,61,61,-160,-161,-162,61,-28,-30,61,-40,-48,61,61,-163,61,61,61,61,-144,-153,-156,61,61,-158,61,-154,61,-157,-159,61,-155,61,]),'SUBSTRACT':([23,26,28,45,47,49,50,51,52,53,54,55,57,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,75,81,82,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,189,192,193,195,196,197,209,210,211,212,213,214,215,222,223,225,226,227,228,229,231,232,233,234,239,240,241,242,243,245,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,62,-96,62,-47,-35,62,62,62,-49,62,62,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,145,-53,62,62,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,62,62,-26,-27,62,62,-36,62,-37,-38,-47,62,-39,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-164,62,-147,-149,-150,-134,-135,-136,-137,-138,-151,62,62,62,-29,-31,-32,-21,62,62,145,145,-54,-55,-50,-51,-52,-143,62,-148,-152,62,62,62,62,-160,-161,-162,62,-28,-30,62,-40,-48,62,62,-163,62,62,62,62,-144,-153,-156,62,62,-158,62,-154,62,-157,-159,62,-155,62,]),'BITWISE_ONE_COMPLEMENT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,63,-96,63,63,63,63,63,63,-41,-42,-43,-44,-45,-46,63,63,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-164,63,-147,-149,-150,-134,-135,-136,-137,-138,-151,63,63,63,63,63,-143,63,-148,-152,63,63,63,63,-160,-161,-162,63,63,63,63,-163,63,63,63,63,-144,-153,-156,63,63,-158,63,-154,63,-157,-159,63,-155,63,]),'LOGICAL_NOT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,64,-96,64,64,64,64,64,64,-41,-42,-43,-44,-45,-46,64,64,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-164,64,-147,-149,-150,-134,-135,-136,-137,-138,-151,64,64,64,64,64,-143,64,-148,-152,64,64,64,64,-160,-161,-162,64,64,64,64,-163,64,64,64,64,-144,-153,-156,64,64,-158,64,-154,64,-157,-159,64,-155,64,]),'INT_CONSTANT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,85,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,66,-96,66,66,66,66,66,66,-41,-42,-43,-44,-45,-46,149,66,66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-164,66,-147,-149,-150,-134,-135,-136,-137,-138,-151,66,66,66,66,66,-143,66,-148,-152,66,66,66,66,-160,-161,-162,66,66,66,66,-163,66,66,66,66,-144,-153,-156,66,66,-158,66,-154,66,-157,-159,66,-155,66,]),'HEX_CONSTANT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,67,-96,67,67,67,67,67,67,-41,-42,-43,-44,-45,-46,67,67,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-164,67,-147,-149,-150,-134,-135,-136,-137,-138,-151,67,67,67,67,67,-143,67,-148,-152,67,67,67,67,-160,-161,-162,67,67,67,67,-163,67,67,67,67,-144,-153,-156,67,67,-158,67,-154,67,-157,-159,67,-155,67,]),'OCTAL_CONSTANT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,68,-96,68,68,68,68,68,68,-41,-42,-43,-44,-45,-46,68,68,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-164,68,-147,-149,-150,-134,-135,-136,-137,-138,-151,68,68,68,68,68,-143,68,-148,-152,68,68,68,68,-160,-161,-162,68,68,68,68,-163,68,68,68,68,-144,-153,-156,68,68,-158,68,-154,68,-157,-159,68,-155,68,]),'EXPONENT_CONSTANT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,69,-96,69,69,69,69,69,69,-41,-42,-43,-44,-45,-46,69,69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-164,69,-147,-149,-150,-134,-135,-136,-137,-138,-151,69,69,69,69,69,-143,69,-148,-152,69,69,69,69,-160,-161,-162,69,69,69,69,-163,69,69,69,69,-144,-153,-156,69,69,-158,69,-154,69,-157,-159,69,-155,69,]),'REAL_CONSTANT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,70,-96,70,70,70,70,70,70,-41,-42,-43,-44,-45,-46,70,70,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-164,70,-147,-149,-150,-134,-135,-136,-137,-138,-151,70,70,70,70,70,-143,70,-148,-152,70,70,70,70,-160,-161,-162,70,70,70,70,-163,70,70,70,70,-144,-153,-156,70,70,-158,70,-154,70,-157,-159,70,-155,70,]),'CHAR_CONSTANT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,71,-96,71,71,71,71,71,71,-41,-42,-43,-44,-45,-46,71,71,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-164,71,-147,-149,-150,-134,-135,-136,-137,-138,-151,71,71,71,71,71,-143,71,-148,-152,71,71,71,71,-160,-161,-162,71,71,71,71,-163,71,71,71,71,-144,-153,-156,71,71,-158,71,-154,71,-157,-159,71,-155,71,]),'STR_CONSTANT':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,72,-96,72,72,72,72,72,72,-41,-42,-43,-44,-45,-46,72,72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-164,72,-147,-149,-150,-134,-135,-136,-137,-138,-151,72,72,72,72,72,-143,72,-148,-152,72,72,72,72,-160,-161,-162,72,72,72,72,-163,72,72,72,72,-144,-153,-156,72,72,-158,72,-154,72,-157,-159,72,-155,72,]),'TRUE':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,73,-96,73,73,73,73,73,73,-41,-42,-43,-44,-45,-46,73,73,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-164,73,-147,-149,-150,-134,-135,-136,-137,-138,-151,73,73,73,73,73,-143,73,-148,-152,73,73,73,73,-160,-161,-162,73,73,73,73,-163,73,73,73,73,-144,-153,-156,73,73,-158,73,-154,73,-157,-159,73,-155,73,]),'FALSE':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,74,-96,74,74,74,74,74,74,-41,-42,-43,-44,-45,-46,74,74,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-164,74,-147,-149,-150,-134,-135,-136,-137,-138,-151,74,74,74,74,74,-143,74,-148,-152,74,74,74,74,-160,-161,-162,74,74,74,74,-163,74,74,74,74,-144,-153,-156,74,74,-158,74,-154,74,-157,-159,74,-155,74,]),'NULL':([23,26,28,45,50,51,52,54,55,59,60,61,62,63,64,95,100,101,102,103,104,105,106,107,108,109,110,111,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,159,161,162,163,164,165,166,167,168,169,170,176,180,184,196,197,222,223,225,226,227,228,229,231,232,233,234,239,242,247,252,253,257,259,260,261,262,263,265,267,269,272,273,274,277,279,280,285,286,287,],[-95,75,-96,75,75,75,75,75,75,-41,-42,-43,-44,-45,-46,75,75,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-164,75,-147,-149,-150,-134,-135,-136,-137,-138,-151,75,75,75,75,75,-143,75,-148,-152,75,75,75,75,-160,-161,-162,75,75,75,75,-163,75,75,75,75,-144,-153,-156,75,75,-158,75,-154,75,-157,-159,75,-155,75,]),'L_SQBR':([30,32,34,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,150,189,192,193,195,216,240,241,],[85,-118,85,116,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-119,-29,-31,-32,-21,-120,-28,-30,]),'COLON':([46,47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,114,115,120,122,123,124,126,130,185,186,187,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,244,245,254,278,283,284,],[-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-92,-80,239,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-93,-48,-78,285,287,-94,]),'R_SQBR':([46,47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,114,115,120,122,123,124,126,130,149,185,187,188,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,244,245,254,],[-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-92,216,-80,-76,240,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-93,-48,-78,]),'DIVIDE':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,82,114,115,120,122,123,124,126,189,192,193,195,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,147,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,147,147,-50,-51,-52,-28,-30,-40,-48,]),'MODULUS':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,82,114,115,120,122,123,124,126,189,192,193,195,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,148,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,148,148,-50,-51,-52,-28,-30,-40,-48,]),'LEFT_SHIFT':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,80,81,82,114,115,120,122,123,124,126,189,192,193,195,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,142,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,142,142,142,142,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'RIGHT_SHIFT':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,80,81,82,114,115,120,122,123,124,126,189,192,193,195,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,143,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,143,143,143,143,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,138,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,138,138,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,139,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,139,139,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS_EQUALS':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,140,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,140,140,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER_EQUALS':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,141,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,141,141,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'EQUALS':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,78,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,136,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,136,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'NOT_EQUALS':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,78,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,137,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,137,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_XOR':([47,49,53,57,58,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,134,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,134,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_OR':([47,49,53,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,114,115,120,122,123,124,126,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,-25,-13,133,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,133,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_AND':([47,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,114,115,120,122,123,124,126,187,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,-35,-49,132,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,132,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'QUES_MARK':([47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,114,115,120,122,123,124,126,187,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,112,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_OR':([47,48,49,53,56,57,58,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,114,115,120,122,123,124,126,187,189,192,193,195,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,240,241,243,245,],[-47,113,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'MULTIPLY_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[102,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'DIVIDE_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[103,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'MODULUS_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[104,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'ADD_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[105,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'SUBSTRACT_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[106,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'LEFT_SHIFT_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[107,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'RIGHT_SHIFT_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[108,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_AND_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[109,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_XOR_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[110,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_OR_ASSIGNMENT':([47,49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,120,122,123,124,126,189,192,193,195,240,241,243,245,],[111,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'DOT':([49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,189,192,193,195,240,241,],[118,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ARROW':([49,57,58,66,67,68,69,70,71,72,73,74,75,114,115,189,192,193,195,240,241,],[119,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ELSE':([165,166,167,168,169,170,222,226,232,233,234,253,262,263,265,272,274,279,280,286,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,269,-156,-158,-154,-157,-159,-155,]),'CASE':([165,166,167,168,169,170,222,226,232,233,234,253,262,263,264,265,270,272,274,275,276,279,280,282,286,288,289,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,-153,-164,-156,277,-158,-154,277,-140,-157,-159,-139,-155,-142,-141,]),'DEFAULT':([165,166,167,168,169,170,222,226,232,233,234,253,262,263,264,265,270,272,274,275,276,279,280,282,286,288,289,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,-153,-164,-156,278,-158,-154,278,-140,-157,-159,-139,-155,-142,-141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,16,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,95,161,223,247,],[5,5,164,164,164,164,]),'type_specifier':([0,2,25,35,55,87,93,95,125,127,161,223,247,],[6,6,37,89,131,89,37,171,131,131,171,171,171,]),'struct_specifier':([0,2,95,161,223,247,],[7,7,7,7,7,7,]),'declarator':([6,29,33,37,89,171,219,],[17,84,86,90,154,84,246,]),'init_declarator_list':([6,171,],[18,18,]),'pointer':([6,29,33,37,89,131,171,219,],[19,19,19,19,19,198,19,19,]),'no_pointer':([6,29,33,37,89,171,219,],[20,20,20,20,20,20,20,]),'init_declarator':([6,29,171,],[21,83,21,]),'func_scope':([17,],[25,]),'direct_declarator':([19,20,],[30,34,]),'add_sym_struct':([24,236,],[35,35,]),'parameter_type_list':([25,],[38,]),'func_rparen_2':([25,],[39,]),'parameter_declaration':([25,93,],[41,157,]),'initializer':([26,45,184,],[43,99,238,]),'assignment_expression':([26,45,55,95,100,112,116,117,121,125,127,161,176,180,184,196,223,227,228,229,231,242,247,252,257,259,260,261,267,269,273,285,287,],[44,44,130,130,185,130,130,191,130,130,130,130,130,130,44,244,130,130,130,130,130,255,130,130,130,130,130,130,130,130,130,130,130,]),'conditional_expression':([26,45,55,95,100,112,116,117,121,125,127,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,254,46,46,46,46,46,46,46,46,46,46,284,46,46,]),'unary_expression':([26,45,50,51,52,54,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,161,176,180,184,196,197,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[47,47,120,122,124,126,47,47,47,47,124,47,47,47,47,47,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,47,47,47,47,47,124,47,47,47,47,47,124,47,47,47,47,47,47,47,47,47,47,124,47,47,]),'logical_or_expression':([26,45,55,95,100,112,116,117,121,125,127,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'postfix_expression':([26,45,50,51,52,54,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,161,176,180,184,196,197,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'unary_operator':([26,45,50,51,52,54,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,161,176,180,184,196,197,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'cast_expression':([26,45,52,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,161,176,180,184,196,197,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[53,53,123,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,213,214,215,53,53,53,53,53,245,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'logical_and_expression':([26,45,55,95,100,112,113,116,117,121,125,127,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[56,56,56,56,56,56,187,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary_expression':([26,45,50,51,52,54,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,161,176,180,184,196,197,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'inclusive_or_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[65,65,65,65,65,65,65,65,65,65,65,65,199,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,]),'exclusive_or_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,133,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[76,76,76,76,76,76,76,76,76,76,76,76,76,200,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,]),'and_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,133,134,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,201,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'equality_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,133,134,135,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,202,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'relational_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,203,204,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'shift_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,205,206,207,208,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'additive_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,209,210,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'multiplicative_expression':([26,45,55,95,100,112,113,116,117,121,125,127,132,133,134,135,136,137,138,139,140,141,142,143,144,145,161,176,180,184,196,223,227,228,229,231,239,242,247,252,257,259,260,261,267,269,273,277,285,287,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,211,212,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'struct_declaration_list':([35,],[87,]),'struct_declaration':([35,87,],[88,152,]),'func_rparen_1':([38,],[91,]),'function_body':([39,91,],[94,155,]),'initializer_list':([45,],[98,]),'assignment_operator':([47,],[100,]),'expression':([55,95,112,116,121,125,127,161,176,180,223,227,228,229,231,247,252,257,259,260,261,267,269,273,285,287,],[128,172,186,188,128,128,128,172,172,235,172,248,249,250,172,172,172,172,172,266,268,172,172,172,172,172,]),'type_name':([55,125,127,],[129,129,194,]),'pop_sym':([87,94,96,155,156,247,275,],[151,158,182,220,221,256,281,]),'struct_declarator_list':([89,],[153,]),'block_item_list':([95,223,],[161,247,]),'block_item':([95,161,223,247,],[162,225,162,225,]),'statement':([95,161,176,223,247,257,259,267,269,273,285,287,],[163,163,230,163,163,263,265,272,274,280,288,289,]),'compound_statement':([95,161,176,223,247,257,259,267,269,273,285,287,],[165,165,165,165,165,165,165,165,165,165,165,165,]),'expression_statement':([95,161,176,223,231,247,252,257,259,267,269,273,285,287,],[166,166,166,166,252,166,261,166,166,166,166,166,166,166,]),'selection_statement':([95,161,176,223,247,257,259,267,269,273,285,287,],[167,167,167,167,167,167,167,167,167,167,167,167,]),'iteration_statement':([95,161,176,223,247,257,259,267,269,273,285,287,],[168,168,168,168,168,168,168,168,168,168,168,168,]),'jump_statement':([95,161,176,223,247,257,259,267,269,273,285,287,],[169,169,169,169,169,169,169,169,169,169,169,169,]),'argument_expression_list':([117,],[190,]),'add_sym':([159,264,],[223,270,]),'labeled_statement_list':([270,],[275,]),'labeled_statement':([270,275,],[276,282,]),'constant_expression':([277,],[283,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',28),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',37),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',38),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',45),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',46),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',60),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',61),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym','function_definition',7,'p_function_definition_1','cparser.py',91),
  ('function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym','function_definition',6,'p_function_definition_1','cparser.py',92),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',114),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',132),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',167),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',201),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',202),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',203),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',204),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',205),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',206),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',207),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',208),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',209),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',210),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',211),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',212),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',259),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',260),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',261),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',297),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',350),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',351),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',424),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',466),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',507),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',508),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',526),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',533),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',534),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',541),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',548),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',549),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',559),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',560),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',561),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',562),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',563),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',564),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',571),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',572),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',593),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',594),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',595),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',605),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',613),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',614),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',615),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',625),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',626),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',627),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',638),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',639),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',640),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',641),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',642),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',653),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',654),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',655),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',665),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',666),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',678),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',679),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',692),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',693),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',705),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',706),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',717),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',718),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',730),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',731),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',778),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',779),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',791),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',792),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',793),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',794),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',795),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',796),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',797),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',798),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',799),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',800),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',801),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',808),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',809),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',825),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',833),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',834),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',847),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',848),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',856),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',857),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',883),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',884),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',885),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',886),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',887),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',888),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',889),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',890),
  ('struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES','struct_specifier',6,'p_struct_specifier','cparser.py',912),
  ('add_sym_struct -> L_BRACES','add_sym_struct',1,'p_add_sym_struct','cparser.py',921),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',930),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',931),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',942),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',950),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',951),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1000),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1001),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',1011),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',1012),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',1013),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',1048),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',1049),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',1080),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1117),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1118),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1128),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1142),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1143),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',1155),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',1156),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',1157),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',1167),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',1168),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1182),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1183),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1184),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1185),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1186),
  ('labeled_statement_list -> labeled_statement_list labeled_statement','labeled_statement_list',2,'p_labeled_statement_list','cparser.py',1194),
  ('labeled_statement_list -> labeled_statement','labeled_statement_list',1,'p_labeled_statement_list','cparser.py',1195),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1204),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1205),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1222),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1223),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1236),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1237),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1250),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1251),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1258),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1259),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1271),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1272),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1282),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1283),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES','selection_statement',9,'p_selection_statement','cparser.py',1284),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1327),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1328),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1329),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1330),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1431),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1432),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1441),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1442),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1486),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1497),
]
