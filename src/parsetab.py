
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR expression R_SQBR\n    \n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[9,9,-2,-4,-5,-3,-92,-93,9,-8,-94,-167,9,9,9,-168,9,9,9,9,-109,-168,-7,-167,-148,9,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,9,-149,-151,-155,-163,-164,-165,-111,9,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'CHAR':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[10,10,-2,-4,-5,-3,-92,-93,10,-8,-94,-167,10,10,10,-168,10,10,10,10,-109,-168,-7,-167,-148,10,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,10,-149,-151,-155,-163,-164,-165,-111,10,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'INT':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[11,11,-2,-4,-5,-3,-92,-93,11,-8,-94,-167,11,11,11,-168,11,11,11,11,-109,-168,-7,-167,-148,11,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,11,-149,-151,-155,-163,-164,-165,-111,11,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'LONG':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[12,12,-2,-4,-5,-3,-92,-93,12,-8,-94,-167,12,12,12,-168,12,12,12,12,-109,-168,-7,-167,-148,12,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,12,-149,-151,-155,-163,-164,-165,-111,12,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'FLOAT':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[13,13,-2,-4,-5,-3,-92,-93,13,-8,-94,-167,13,13,13,-168,13,13,13,13,-109,-168,-7,-167,-148,13,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,13,-149,-151,-155,-163,-164,-165,-111,13,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'DOUBLE':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[14,14,-2,-4,-5,-3,-92,-93,14,-8,-94,-167,14,14,14,-168,14,14,14,14,-109,-168,-7,-167,-148,14,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,14,-149,-151,-155,-163,-164,-165,-111,14,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'STRUCT':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[15,15,-2,-4,-5,-3,-92,-93,46,-8,-94,-167,46,46,46,-168,191,46,46,46,-109,-168,-7,-167,-148,191,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,191,-149,-151,-155,-163,-164,-165,-111,191,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'ENUM':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[16,16,-2,-4,-5,-3,-92,-93,47,-8,-94,-167,47,47,47,-168,192,47,47,47,-109,-168,-7,-167,-148,192,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,192,-149,-151,-155,-163,-164,-165,-111,192,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'BOOL':([0,2,3,4,5,18,25,26,29,31,32,39,60,91,97,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,228,234,235,236,237,238,241,247,248,249,263,265,267,273,278,284,285,286,287,293,295,296,297,],[17,17,-2,-4,-5,-3,-92,-93,17,-8,-94,-167,17,17,17,-168,17,17,17,17,-109,-168,-7,-167,-148,17,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-110,-6,-146,17,-149,-151,-155,-163,-164,-165,-111,17,-145,-166,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'$end':([1,2,3,4,5,18,25,26,32,99,163,165,167,234,237,],[0,-1,-2,-4,-5,-3,-92,-93,-94,-168,-168,-7,-148,-6,-149,]),'MULTIPLY':([6,9,10,11,12,13,14,17,21,24,25,26,27,28,30,32,33,35,37,41,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,86,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,159,160,166,168,169,170,171,172,173,174,175,176,177,178,179,180,186,190,194,199,202,203,205,206,207,208,221,222,223,224,225,235,236,238,240,241,242,243,244,246,247,248,249,251,252,255,256,257,258,259,261,264,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[24,-99,-100,-101,-102,-103,-104,-107,35,-125,-92,-93,-105,-106,65,-94,24,-126,24,24,65,-44,-32,65,65,65,-46,65,65,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,151,65,-105,-106,65,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,65,65,-23,-24,65,65,-33,65,-34,-35,-44,65,-36,65,24,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,24,65,-167,65,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,24,65,65,65,65,-26,-28,-29,-19,65,65,35,151,151,-47,-48,-49,-146,65,-151,65,-155,65,65,65,65,-163,-164,-165,-105,-106,65,-25,-27,65,-37,-45,24,65,65,-145,65,-166,-144,65,65,65,65,65,-147,-156,-158,-159,65,65,-161,65,-157,-160,-162,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,21,22,24,25,26,27,28,30,32,33,35,37,40,41,46,47,50,55,56,57,59,60,64,65,66,67,68,69,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,124,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,159,160,162,166,168,169,170,171,172,173,174,175,176,177,178,179,180,186,190,191,192,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,251,252,255,258,264,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-127,-99,-100,-101,-102,-103,-104,27,28,-107,36,36,-125,-92,-93,-105,-106,63,-94,-127,-126,-127,92,-127,101,102,63,63,63,63,63,63,-38,-39,-40,-41,-42,-43,63,-105,-106,63,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,63,63,63,63,202,203,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-127,63,92,-167,63,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-127,63,63,63,251,252,63,63,63,-146,63,-151,63,-155,63,63,63,63,-163,-164,-165,-105,-106,63,63,-127,63,63,-145,63,-166,-144,63,63,63,63,63,-147,-156,-158,-159,63,63,-161,63,-157,-160,-162,]),'L_PAREN':([6,9,10,11,12,13,14,17,19,21,22,24,25,26,27,28,30,32,33,34,35,36,37,38,41,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,159,160,166,168,169,170,171,172,173,174,175,176,177,178,179,180,183,184,185,186,187,190,194,199,202,203,205,206,207,226,235,236,238,240,241,242,243,244,246,247,248,249,251,252,255,256,257,258,264,265,266,267,271,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-127,-99,-100,-101,-102,-103,-104,-107,31,37,37,-125,-92,-93,-105,-106,60,-94,-127,-119,-126,-121,-127,-120,-127,60,122,126,126,130,132,60,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,60,-105,-106,60,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,60,130,-23,-24,60,60,60,60,60,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,-124,-122,-127,130,-167,60,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-127,130,242,243,244,60,246,60,60,-26,-28,-29,-19,60,130,-123,-146,60,-151,60,-155,60,60,60,60,-163,-164,-165,-105,-106,130,-25,-27,60,-127,60,60,-145,282,60,-166,-144,60,60,60,60,60,-147,-156,-158,-159,60,60,-161,60,-157,-160,-162,]),'SEMI_COLON':([7,8,19,20,23,25,26,32,34,36,38,48,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,100,119,120,125,127,128,129,131,135,155,156,161,166,168,169,170,171,172,173,174,175,176,177,178,182,186,188,189,190,193,195,197,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,229,230,235,236,238,240,241,246,247,248,249,250,253,256,257,259,260,261,262,265,266,267,272,273,274,276,278,279,280,281,284,285,286,287,289,291,292,293,294,295,296,297,],[25,26,-97,32,-95,-92,-93,-94,-119,-121,-120,-98,-133,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-96,-97,178,-23,-24,-33,-34,-35,-44,-36,-89,-124,-122,-114,-167,178,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,241,178,247,248,249,-134,-77,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-123,263,-112,-146,178,-151,178,-155,178,-163,-164,-165,273,-135,-25,-27,-37,-90,-45,-108,178,178,-145,178,-166,-75,-113,-144,178,178,178,-147,-156,-158,-159,178,178,296,-161,178,-157,-160,-162,]),'R_PAREN':([9,10,11,12,13,14,17,24,29,31,34,35,36,38,42,44,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,95,101,102,119,120,122,125,127,128,129,131,133,134,135,136,155,156,164,178,195,197,199,200,201,202,203,204,205,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,241,256,257,259,260,261,268,269,270,274,275,283,288,290,],[-99,-100,-101,-102,-103,-104,-107,-125,45,-8,-119,-126,-121,-120,98,-128,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,156,-130,-105,-106,-23,-24,199,-33,-34,-35,-44,-36,205,207,-89,-131,-124,-122,-129,-154,-77,-73,-26,257,-30,-28,-29,259,-19,-132,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-123,-155,-25,-27,-37,-90,-45,279,280,281,-75,-31,289,292,294,]),'COMMA':([19,20,23,34,36,38,42,44,48,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,103,104,119,120,125,127,128,129,131,133,135,155,156,164,182,193,195,196,197,198,199,200,201,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,229,230,231,232,233,250,253,254,256,257,259,260,261,268,269,270,274,275,276,288,290,],[-97,33,-95,-119,-121,-120,97,-128,-98,-133,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-96,-97,-117,162,-115,-130,194,-136,-23,-24,-33,-34,-35,-44,-36,206,-89,-124,-122,-129,206,-134,-77,206,-73,206,-26,258,-30,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-123,264,-112,-118,-91,-116,206,-135,-137,-25,-27,-37,-90,-45,206,206,206,-75,-31,-113,206,206,]),'ASSIGNMENT':([19,34,36,38,52,54,62,63,71,72,73,74,75,76,77,78,79,88,92,119,120,125,127,128,129,131,155,156,199,202,203,205,226,256,257,259,261,],[30,-119,-121,-120,106,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,30,160,-23,-24,-33,-34,-35,-44,-36,-124,-122,-26,-28,-29,-19,-123,-25,-27,-37,-45,]),'R_BRACES':([25,26,32,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,93,94,100,103,104,119,120,125,127,128,129,131,157,158,166,168,169,170,171,172,173,174,175,176,177,178,193,194,195,197,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,227,228,231,232,233,235,238,241,247,248,249,253,254,256,257,259,261,263,265,267,273,274,277,278,284,285,286,287,293,295,296,297,],[-92,-93,-94,-133,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-117,161,-115,167,193,-136,-23,-24,-33,-34,-35,-44,-36,-168,-109,235,237,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,-134,253,-77,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,262,-110,-118,-91,-116,-146,-151,-155,-163,-164,-165,-135,-137,-25,-27,-37,-45,-111,-168,-145,-166,-75,284,-144,-147,-156,-158,-159,-161,-157,-160,-162,]),'CASE':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,180,-167,180,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,180,-146,180,-151,180,-155,-163,-164,-165,180,180,-145,-166,-144,180,180,180,-147,-156,-158,-159,180,180,-161,180,-157,-160,-162,]),'DEFAULT':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,181,-167,181,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,181,-146,181,-151,181,-155,-163,-164,-165,181,181,-145,-166,-144,181,181,181,-147,-156,-158,-159,181,181,-161,181,-157,-160,-162,]),'L_BRACES':([25,26,27,28,30,32,43,45,50,96,98,100,166,168,169,170,171,172,173,174,175,176,177,178,186,194,235,236,238,240,241,247,248,249,251,252,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,39,40,50,-94,100,-10,50,100,-9,166,-167,166,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,166,50,-146,166,-151,166,-155,-163,-164,-165,39,40,166,166,-145,-166,-144,166,166,166,-147,-156,-158,-159,166,166,-161,166,-157,-160,-162,]),'IF':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,183,-167,183,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,183,-146,183,-151,183,-155,-163,-164,-165,183,183,-145,-166,-144,183,183,183,-147,-156,-158,-159,183,183,-161,183,-157,-160,-162,]),'SWITCH':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,184,-167,184,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,184,-146,184,-151,184,-155,-163,-164,-165,184,184,-145,-166,-144,184,184,184,-147,-156,-158,-159,184,184,-161,184,-157,-160,-162,]),'WHILE':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,245,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,185,-167,185,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,185,-146,185,-151,185,-155,271,-163,-164,-165,185,185,-145,-166,-144,185,185,185,-147,-156,-158,-159,185,185,-161,185,-157,-160,-162,]),'DO':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,186,-167,186,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,186,-146,186,-151,186,-155,-163,-164,-165,186,186,-145,-166,-144,186,186,186,-147,-156,-158,-159,186,186,-161,186,-157,-160,-162,]),'FOR':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,187,-167,187,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,187,-146,187,-151,187,-155,-163,-164,-165,187,187,-145,-166,-144,187,187,187,-147,-156,-158,-159,187,187,-161,187,-157,-160,-162,]),'CONTINUE':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,188,-167,188,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,188,-146,188,-151,188,-155,-163,-164,-165,188,188,-145,-166,-144,188,188,188,-147,-156,-158,-159,188,188,-161,188,-157,-160,-162,]),'BREAK':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,189,-167,189,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,189,-146,189,-151,189,-155,-163,-164,-165,189,189,-145,-166,-144,189,189,189,-147,-156,-158,-159,189,189,-161,189,-157,-160,-162,]),'RETURN':([25,26,32,100,166,168,169,170,171,172,173,174,175,176,177,178,186,235,236,238,240,241,247,248,249,265,266,267,273,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,190,-167,190,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,190,-146,190,-151,190,-155,-163,-164,-165,190,190,-145,-166,-144,190,190,190,-147,-156,-158,-159,190,190,-161,190,-157,-160,-162,]),'INCREMENT':([25,26,30,32,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,199,202,203,205,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,256,257,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,55,-94,55,119,55,55,55,55,55,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,55,55,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,55,55,-23,-24,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-167,55,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,55,55,55,55,-26,-28,-29,-19,55,55,-146,55,-151,55,-155,55,55,55,55,-163,-164,-165,55,-25,-27,55,55,55,-145,55,-166,-144,55,55,55,55,55,-147,-156,-158,-159,55,55,-161,55,-157,-160,-162,]),'DECREMENT':([25,26,30,32,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,199,202,203,205,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,256,257,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,56,-94,56,120,56,56,56,56,56,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,56,56,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,56,56,-23,-24,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-167,56,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,56,56,56,56,-26,-28,-29,-19,56,56,-146,56,-151,56,-155,56,56,56,56,-163,-164,-165,56,-25,-27,56,56,56,-145,56,-166,-144,56,56,56,56,56,-147,-156,-158,-159,56,56,-161,56,-157,-160,-162,]),'SIZEOF':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,59,-94,59,59,59,59,59,59,-38,-39,-40,-41,-42,-43,59,59,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-167,59,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,59,59,59,59,59,59,-146,59,-151,59,-155,59,59,59,59,-163,-164,-165,59,59,59,59,-145,59,-166,-144,59,59,59,59,59,-147,-156,-158,-159,59,59,-161,59,-157,-160,-162,]),'BITWISE_AND':([25,26,30,32,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,199,202,203,205,206,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,235,236,238,240,241,242,243,244,246,247,248,249,255,256,257,258,259,261,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,64,-94,64,-44,-32,64,64,64,-46,64,64,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,140,-64,-61,-56,-53,-50,64,64,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,64,64,-23,-24,64,64,-33,64,-34,-35,-44,64,-36,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-167,64,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,64,64,64,64,-26,-28,-29,-19,64,64,140,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-146,64,-151,64,-155,64,64,64,64,-163,-164,-165,64,-25,-27,64,-37,-45,64,64,-145,64,-166,-144,64,64,64,64,64,-147,-156,-158,-159,64,64,-161,64,-157,-160,-162,]),'ADD':([25,26,30,32,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,85,86,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,199,202,203,205,206,207,219,220,221,222,223,224,225,235,236,238,240,241,242,243,244,246,247,248,249,255,256,257,258,259,261,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,66,-94,66,-44,-32,66,66,66,-46,66,66,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,149,-50,66,66,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,66,66,-23,-24,66,66,-33,66,-34,-35,-44,66,-36,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-167,66,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,66,66,66,66,-26,-28,-29,-19,66,66,149,149,-51,-52,-47,-48,-49,-146,66,-151,66,-155,66,66,66,66,-163,-164,-165,66,-25,-27,66,-37,-45,66,66,-145,66,-166,-144,66,66,66,66,66,-147,-156,-158,-159,66,66,-161,66,-157,-160,-162,]),'SUBSTRACT':([25,26,30,32,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,85,86,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,199,202,203,205,206,207,219,220,221,222,223,224,225,235,236,238,240,241,242,243,244,246,247,248,249,255,256,257,258,259,261,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,67,-94,67,-44,-32,67,67,67,-46,67,67,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,150,-50,67,67,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,67,67,-23,-24,67,67,-33,67,-34,-35,-44,67,-36,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-167,67,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,67,67,67,67,-26,-28,-29,-19,67,67,150,150,-51,-52,-47,-48,-49,-146,67,-151,67,-155,67,67,67,67,-163,-164,-165,67,-25,-27,67,-37,-45,67,67,-145,67,-166,-144,67,67,67,67,67,-147,-156,-158,-159,67,67,-161,67,-157,-160,-162,]),'BITWISE_ONE_COMPLEMENT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,68,-94,68,68,68,68,68,68,-38,-39,-40,-41,-42,-43,68,68,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-167,68,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,68,68,68,68,68,68,-146,68,-151,68,-155,68,68,68,68,-163,-164,-165,68,68,68,68,-145,68,-166,-144,68,68,68,68,68,-147,-156,-158,-159,68,68,-161,68,-157,-160,-162,]),'LOGICAL_NOT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,69,-94,69,69,69,69,69,69,-38,-39,-40,-41,-42,-43,69,69,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-167,69,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,69,69,69,69,69,69,-146,69,-151,69,-155,69,69,69,69,-163,-164,-165,69,69,69,69,-145,69,-166,-144,69,69,69,69,69,-147,-156,-158,-159,69,69,-161,69,-157,-160,-162,]),'INT_CONSTANT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,89,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,71,-94,71,71,71,71,71,71,-38,-39,-40,-41,-42,-43,154,71,71,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-167,71,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,71,71,71,71,71,71,-146,71,-151,71,-155,71,71,71,71,-163,-164,-165,71,71,71,71,-145,71,-166,-144,71,71,71,71,71,-147,-156,-158,-159,71,71,-161,71,-157,-160,-162,]),'HEX_CONSTANT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,72,-94,72,72,72,72,72,72,-38,-39,-40,-41,-42,-43,72,72,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-167,72,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,72,72,72,72,72,72,-146,72,-151,72,-155,72,72,72,72,-163,-164,-165,72,72,72,72,-145,72,-166,-144,72,72,72,72,72,-147,-156,-158,-159,72,72,-161,72,-157,-160,-162,]),'OCTAL_CONSTANT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,73,-94,73,73,73,73,73,73,-38,-39,-40,-41,-42,-43,73,73,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-167,73,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,73,73,73,73,73,73,-146,73,-151,73,-155,73,73,73,73,-163,-164,-165,73,73,73,73,-145,73,-166,-144,73,73,73,73,73,-147,-156,-158,-159,73,73,-161,73,-157,-160,-162,]),'EXPONENT_CONSTANT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,74,-94,74,74,74,74,74,74,-38,-39,-40,-41,-42,-43,74,74,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-167,74,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,74,74,74,74,74,74,-146,74,-151,74,-155,74,74,74,74,-163,-164,-165,74,74,74,74,-145,74,-166,-144,74,74,74,74,74,-147,-156,-158,-159,74,74,-161,74,-157,-160,-162,]),'REAL_CONSTANT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,75,-94,75,75,75,75,75,75,-38,-39,-40,-41,-42,-43,75,75,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-167,75,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,75,75,75,75,75,75,-146,75,-151,75,-155,75,75,75,75,-163,-164,-165,75,75,75,75,-145,75,-166,-144,75,75,75,75,75,-147,-156,-158,-159,75,75,-161,75,-157,-160,-162,]),'CHAR_CONSTANT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,76,-94,76,76,76,76,76,76,-38,-39,-40,-41,-42,-43,76,76,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-167,76,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,76,76,76,76,76,76,-146,76,-151,76,-155,76,76,76,76,-163,-164,-165,76,76,76,76,-145,76,-166,-144,76,76,76,76,76,-147,-156,-158,-159,76,76,-161,76,-157,-160,-162,]),'STR_CONSTANT':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,77,-94,77,77,77,77,77,77,-38,-39,-40,-41,-42,-43,77,77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-167,77,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,77,77,77,77,77,77,-146,77,-151,77,-155,77,77,77,77,-163,-164,-165,77,77,77,77,-145,77,-166,-144,77,77,77,77,77,-147,-156,-158,-159,77,77,-161,77,-157,-160,-162,]),'TRUE':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,78,-94,78,78,78,78,78,78,-38,-39,-40,-41,-42,-43,78,78,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-167,78,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,78,78,78,78,78,78,-146,78,-151,78,-155,78,78,78,78,-163,-164,-165,78,78,78,78,-145,78,-166,-144,78,78,78,78,78,-147,-156,-158,-159,78,78,-161,78,-157,-160,-162,]),'FALSE':([25,26,30,32,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,186,190,194,206,207,235,236,238,240,241,242,243,244,246,247,248,249,255,258,265,266,267,272,273,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,79,-94,79,79,79,79,79,79,-38,-39,-40,-41,-42,-43,79,79,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-167,79,-150,-152,-153,-138,-139,-140,-141,-142,-143,-154,79,79,79,79,79,79,-146,79,-151,79,-155,79,79,79,79,-163,-164,-165,79,79,79,79,-145,79,-166,-144,79,79,79,79,79,-147,-156,-158,-159,79,79,-161,79,-157,-160,-162,]),'L_SQBR':([34,36,38,54,62,63,71,72,73,74,75,76,77,78,79,119,120,155,156,199,202,203,205,226,256,257,],[89,-121,89,121,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-124,-122,-26,-28,-29,-19,-123,-25,-27,]),'COLON':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,119,120,125,127,128,129,131,135,181,195,196,197,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,232,239,256,257,259,260,261,274,],[-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-89,240,-77,255,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-91,266,-25,-27,-37,-90,-45,-75,]),'R_SQBR':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,89,119,120,125,127,128,129,131,135,154,195,197,198,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,260,261,274,],[-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,155,-23,-24,-33,-34,-35,-44,-36,-89,226,-77,-73,256,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-90,-45,-75,]),'DIVIDE':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,86,119,120,125,127,128,129,131,199,202,203,205,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,152,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,152,152,-47,-48,-49,-25,-27,-37,-45,]),'MODULUS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,86,119,120,125,127,128,129,131,199,202,203,205,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,153,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,153,153,-47,-48,-49,-25,-27,-37,-45,]),'LEFT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,84,85,86,119,120,125,127,128,129,131,199,202,203,205,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,147,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,147,147,147,147,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'RIGHT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,84,85,86,119,120,125,127,128,129,131,199,202,203,205,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,148,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,148,148,148,148,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LESS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,143,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,143,143,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'GREATER':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,144,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,144,144,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LESS_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,145,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,145,145,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'GREATER_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,146,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,146,146,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,82,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,141,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,141,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'NOT_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,82,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,142,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,142,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'BITWISE_XOR':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,139,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,139,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'BITWISE_OR':([52,54,58,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,119,120,125,127,128,129,131,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,-22,-11,138,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,138,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LOGICAL_AND':([52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,119,120,125,127,128,129,131,197,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,-32,-46,137,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,137,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'QUES_MARK':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,119,120,125,127,128,129,131,197,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,117,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LOGICAL_OR':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,119,120,125,127,128,129,131,197,199,202,203,205,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,256,257,259,261,],[-44,118,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'MULTIPLY_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[107,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'DIVIDE_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[108,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'MODULUS_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[109,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'ADD_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[110,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'SUBSTRACT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[111,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'LEFT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[112,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'RIGHT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[113,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'BITWISE_AND_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[114,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'BITWISE_XOR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[115,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'BITWISE_OR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,119,120,125,127,128,129,131,199,202,203,205,256,257,259,261,],[116,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'DOT':([54,62,63,71,72,73,74,75,76,77,78,79,119,120,199,202,203,205,256,257,],[123,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-26,-28,-29,-19,-25,-27,]),'ARROW':([54,62,63,71,72,73,74,75,76,77,78,79,119,120,199,202,203,205,256,257,],[124,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-26,-28,-29,-19,-25,-27,]),'ELSE':([172,173,174,175,176,177,178,235,241,247,248,249,267,273,278,284,285,286,287,293,295,296,297,],[-138,-139,-140,-141,-142,-143,-154,-146,-155,-163,-164,-165,-145,-166,-144,-147,291,-158,-159,-161,-157,-160,-162,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,18,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,100,168,236,265,],[5,5,171,171,171,171,]),'type_specifier':([0,2,29,60,91,97,100,130,132,157,168,236,265,],[6,6,41,136,159,41,179,136,136,159,179,179,179,]),'struct_specifier':([0,2,100,168,236,265,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,100,168,236,265,],[8,8,8,8,8,8,]),'declarator':([6,33,37,41,159,179,264,],[19,88,90,95,230,88,276,]),'init_declarator_list':([6,179,],[20,20,]),'pointer':([6,33,37,41,136,159,179,264,],[21,21,21,21,208,21,21,21,]),'no_pointer':([6,33,37,41,159,179,264,],[22,22,22,22,22,22,22,]),'init_declarator':([6,33,179,],[23,87,23,]),'func_scope':([19,],[29,]),'direct_declarator':([21,22,],[34,38,]),'parameter_type_list':([29,],[42,]),'func_rparen_2':([29,],[43,]),'parameter_declaration':([29,97,],[44,164,]),'initializer':([30,50,194,],[48,104,254,]),'assignment_expression':([30,50,60,100,105,117,121,122,126,130,132,168,186,190,194,206,236,240,242,243,244,246,258,265,266,272,279,280,281,282,283,289,291,294,],[49,49,135,135,195,135,135,201,135,135,135,135,135,135,49,260,135,135,135,135,135,135,275,135,135,135,135,135,135,135,135,135,135,135,]),'conditional_expression':([30,50,60,100,105,117,121,122,126,130,132,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[51,51,51,51,51,51,51,51,51,51,51,232,51,232,51,51,51,51,51,51,51,51,51,51,274,51,51,51,51,51,51,51,51,51,51,51,51,]),'unary_expression':([30,50,55,56,57,59,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,180,186,190,194,206,207,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[52,52,125,127,129,131,52,52,52,52,129,52,52,52,52,52,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,52,129,52,52,52,52,129,52,52,52,52,52,52,129,52,52,52,52,52,52,52,52,52,52,52,52,]),'logical_or_expression':([30,50,60,100,105,117,121,122,126,130,132,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'postfix_expression':([30,50,55,56,57,59,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,180,186,190,194,206,207,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([30,50,55,56,57,59,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,180,186,190,194,206,207,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'cast_expression':([30,50,57,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,180,186,190,194,206,207,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[58,58,128,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,223,224,225,58,58,58,58,58,58,58,261,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'logical_and_expression':([30,50,60,100,105,117,118,121,122,126,130,132,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[61,61,61,61,61,61,197,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'primary_expression':([30,50,55,56,57,59,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,180,186,190,194,206,207,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'inclusive_or_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[70,70,70,70,70,70,70,70,70,70,70,70,209,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'exclusive_or_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,138,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[80,80,80,80,80,80,80,80,80,80,80,80,80,210,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'and_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,138,139,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,211,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'equality_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,138,139,140,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,212,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'relational_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,213,214,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'shift_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,215,216,217,218,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'additive_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,219,220,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'multiplicative_expression':([30,50,60,100,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,160,168,180,186,190,194,206,236,240,242,243,244,246,255,258,265,266,272,279,280,281,282,283,289,291,294,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,221,222,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'add_sym':([39,166,],[91,236,]),'enumerator_list':([40,],[93,]),'enumerator':([40,162,],[94,233,]),'func_rparen_1':([42,],[96,]),'function_body':([43,96,],[99,163,]),'initializer_list':([50,],[103,]),'assignment_operator':([52,],[105,]),'expression':([60,100,117,121,126,130,132,168,186,190,236,240,242,243,244,246,265,266,272,279,280,281,282,283,289,291,294,],[133,182,196,198,133,133,133,182,182,250,182,182,268,269,270,182,182,182,182,182,182,182,288,290,182,182,182,]),'type_name':([60,130,132,],[134,134,204,]),'struct_declaration_list':([91,],[157,]),'struct_declaration':([91,157,],[158,228,]),'pop_sym':([99,157,163,265,],[165,227,234,277,]),'block_item_list':([100,236,],[168,265,]),'block_item':([100,168,236,265,],[169,238,169,238,]),'statement':([100,168,186,236,240,265,266,279,280,281,289,291,294,],[170,170,245,170,267,170,278,285,286,287,293,295,297,]),'labeled_statement':([100,168,186,236,240,265,266,279,280,281,289,291,294,],[172,172,172,172,172,172,172,172,172,172,172,172,172,]),'compound_statement':([100,168,186,236,240,265,266,279,280,281,289,291,294,],[173,173,173,173,173,173,173,173,173,173,173,173,173,]),'expression_statement':([100,168,186,236,240,246,265,266,272,279,280,281,289,291,294,],[174,174,174,174,174,272,174,174,283,174,174,174,174,174,174,]),'selection_statement':([100,168,186,236,240,265,266,279,280,281,289,291,294,],[175,175,175,175,175,175,175,175,175,175,175,175,175,]),'iteration_statement':([100,168,186,236,240,265,266,279,280,281,289,291,294,],[176,176,176,176,176,176,176,176,176,176,176,176,176,]),'jump_statement':([100,168,186,236,240,265,266,279,280,281,289,291,294,],[177,177,177,177,177,177,177,177,177,177,177,177,177,]),'argument_expression_list':([122,],[200,]),'struct_declarator_list':([159,],[229,]),'constant_expression':([160,180,],[231,239,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',27),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',33),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',34),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',41),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',42),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',49),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',50),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',65),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',77),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',88),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',99),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',100),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',101),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',102),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',103),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',104),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',105),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',106),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',107),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',108),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',109),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',140),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',141),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',142),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',168),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',207),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',208),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',257),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',289),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',324),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',325),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',339),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',346),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',347),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',369),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',415),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',416),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',433),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',434),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',435),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',436),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',437),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',438),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',445),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',446),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',462),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',463),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',464),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',496),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',527),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',528),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',529),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',597),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',598),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',599),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',634),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',635),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',636),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',637),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',638),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',673),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',674),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',675),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',710),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',711),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',747),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',748),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',785),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',786),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',822),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',823),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',859),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',860),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',897),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',898),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',930),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',931),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',979),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',980),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',981),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',982),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',983),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',984),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',985),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',986),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',987),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',988),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',989),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',996),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',997),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',1013),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',1021),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',1022),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',1023),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',1035),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',1036),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',1044),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',1045),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',1072),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',1073),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',1074),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',1075),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',1076),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',1077),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1078),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1079),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',1080),
  ('struct_specifier -> STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES','struct_specifier',7,'p_struct_specifier','cparser.py',1097),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',1108),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',1109),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',1120),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',1128),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',1129),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',1154),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',1161),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',1162),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',1169),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',1170),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1178),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1179),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',1195),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',1196),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',1197),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',1198),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',1222),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',1223),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',1250),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1264),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1265),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1275),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1289),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1290),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',1302),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',1303),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',1304),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',1316),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',1317),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',1342),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1343),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1344),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1345),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1346),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1347),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1354),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1355),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1372),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1373),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1383),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1384),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1394),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1395),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1402),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1403),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1415),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1416),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1426),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1427),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1428),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1452),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1453),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1454),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1455),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1483),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1484),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1490),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1491),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1530),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1538),
]
