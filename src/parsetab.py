
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    function_definition  : type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym\n                         | type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n                       | NULL\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR expression R_SQBR\n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES\n    \n    add_sym_struct : L_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement_list : labeled_statement_list labeled_statement\n                           | labeled_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[9,9,-2,-4,-5,-3,-95,-96,9,-10,-97,9,-112,9,9,-113,9,-172,9,-172,9,9,-114,-172,-172,-7,-171,-152,9,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,9,-153,-155,-159,-167,-168,-169,9,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'CHAR':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[10,10,-2,-4,-5,-3,-95,-96,10,-10,-97,10,-112,10,10,-113,10,-172,10,-172,10,10,-114,-172,-172,-7,-171,-152,10,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,10,-153,-155,-159,-167,-168,-169,10,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'INT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[11,11,-2,-4,-5,-3,-95,-96,11,-10,-97,11,-112,11,11,-113,11,-172,11,-172,11,11,-114,-172,-172,-7,-171,-152,11,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,11,-153,-155,-159,-167,-168,-169,11,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'LONG':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[12,12,-2,-4,-5,-3,-95,-96,12,-10,-97,12,-112,12,12,-113,12,-172,12,-172,12,12,-114,-172,-172,-7,-171,-152,12,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,12,-153,-155,-159,-167,-168,-169,12,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'FLOAT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[13,13,-2,-4,-5,-3,-95,-96,13,-10,-97,13,-112,13,13,-113,13,-172,13,-172,13,13,-114,-172,-172,-7,-171,-152,13,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,13,-153,-155,-159,-167,-168,-169,13,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'DOUBLE':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[14,14,-2,-4,-5,-3,-95,-96,14,-10,-97,14,-112,14,14,-113,14,-172,14,-172,14,14,-114,-172,-172,-7,-171,-152,14,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,14,-153,-155,-159,-167,-168,-169,14,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'STRUCT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[15,15,-2,-4,-5,-3,-95,-96,47,-10,-97,47,-112,47,47,-113,47,-172,194,-172,47,47,-114,-172,-172,-7,-171,-152,194,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,194,-153,-155,-159,-167,-168,-169,194,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'ENUM':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[16,16,-2,-4,-5,-3,-95,-96,48,-10,-97,48,-112,48,48,-113,48,-172,195,-172,48,48,-114,-172,-172,-7,-171,-152,195,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,195,-153,-155,-159,-167,-168,-169,195,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'BOOL':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,93,94,102,103,104,105,135,137,162,168,169,171,172,173,174,175,176,177,178,179,180,181,182,183,196,232,237,238,239,240,241,242,243,249,250,251,265,271,280,281,283,290,292,297,298,303,],[17,17,-2,-4,-5,-3,-95,-96,17,-10,-97,17,-112,17,17,-113,17,-172,17,-172,17,17,-114,-172,-172,-7,-171,-152,17,-154,-156,-157,-141,-142,-143,-144,-145,-158,-9,-115,-6,-8,-150,17,-153,-155,-159,-167,-168,-169,17,-170,-151,-160,-163,-165,-161,-164,-166,-162,]),'$end':([1,2,3,4,5,18,25,26,32,103,105,168,169,171,173,196,237,238,241,],[0,-1,-2,-4,-5,-3,-95,-96,-97,-172,-172,-172,-172,-7,-152,-9,-6,-8,-153,]),'MULTIPLY':([6,9,10,11,12,13,14,17,21,24,25,26,27,28,30,32,33,35,37,42,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,88,95,104,106,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,133,134,135,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,184,189,193,198,203,206,207,209,210,211,212,225,226,227,228,229,233,239,240,242,243,244,245,246,248,249,250,251,253,254,257,258,259,260,261,263,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[24,-102,-103,-104,-105,-106,-107,-110,35,-128,-95,-96,-108,-109,66,-97,24,-129,24,24,66,-47,-35,66,66,66,-49,66,66,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,156,24,66,-108,-109,66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,66,66,-26,-27,66,66,-36,66,-37,-38,-47,66,-39,66,24,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-171,66,-154,-156,-157,-141,-142,-143,-144,-145,-158,24,66,66,66,-29,-31,-32,-21,66,66,35,156,156,-50,-51,-52,24,-150,66,-155,-159,66,66,66,66,-167,-168,-169,-108,-109,66,-28,-30,66,-40,-48,66,66,-170,66,66,66,66,-151,-160,-163,66,66,-165,66,-161,66,-164,-166,66,-162,66,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,21,22,24,25,26,27,28,30,32,33,35,37,41,42,47,48,51,56,57,58,60,61,65,66,67,68,69,70,95,104,106,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,128,129,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,167,172,174,175,176,177,178,179,180,181,182,183,184,189,193,194,195,198,210,211,233,239,240,242,243,244,245,246,248,249,250,251,253,254,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-130,-102,-103,-104,-105,-106,-107,27,28,-110,36,36,-128,-95,-96,-108,-109,64,-97,-130,-129,-130,96,-130,106,107,64,64,64,64,64,64,-41,-42,-43,-44,-45,-46,-130,64,-108,-109,64,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,64,64,64,64,206,207,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,96,-171,64,-154,-156,-157,-141,-142,-143,-144,-145,-158,-130,64,64,253,254,64,64,64,-130,-150,64,-155,-159,64,64,64,64,-167,-168,-169,-108,-109,64,64,64,64,-170,64,64,64,64,-151,-160,-163,64,64,-165,64,-161,64,-164,-166,64,-162,64,]),'L_PAREN':([6,9,10,11,12,13,14,17,19,21,22,24,25,26,27,28,30,32,33,34,35,36,37,38,42,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,95,104,106,107,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,160,165,172,174,175,176,177,178,179,180,181,182,183,184,186,187,188,189,190,193,198,203,206,207,209,210,211,230,233,239,240,242,243,244,245,246,248,249,250,251,253,254,257,258,259,260,265,269,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-130,-102,-103,-104,-105,-106,-107,-110,31,37,37,-128,-95,-96,-108,-109,61,-97,-130,-123,-129,-125,-130,-124,-130,61,127,131,131,135,137,61,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-130,61,-108,-109,61,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,61,135,-26,-27,61,61,61,61,61,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,-126,135,-171,61,-154,-156,-157,-141,-142,-143,-144,-145,-158,-130,244,245,246,61,248,61,61,-29,-31,-32,-21,61,135,-127,-130,-150,61,-155,-159,61,61,61,61,-167,-168,-169,-108,-109,135,-28,-30,61,61,278,61,-170,61,61,61,61,-151,-160,-163,61,61,-165,61,-161,135,-164,-166,61,-162,61,]),'SEMI_COLON':([7,8,19,20,23,25,26,32,34,36,38,45,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,101,104,124,125,130,132,133,134,136,140,160,163,164,166,172,174,175,176,177,178,179,180,181,182,183,185,189,191,192,193,197,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,239,240,242,243,248,249,250,251,252,255,258,259,261,262,263,264,265,270,271,272,275,277,280,281,283,285,287,289,290,291,292,297,298,302,303,304,],[25,26,-100,32,-98,-95,-96,-97,-123,-125,-124,105,-101,-136,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-99,-100,169,183,-26,-27,-36,-37,-38,-47,-39,-92,-126,232,-116,-118,-171,183,-154,-156,-157,-141,-142,-143,-144,-145,-158,243,183,249,250,251,-137,-80,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-127,-111,-150,183,-155,-159,183,-167,-168,-169,271,-138,-28,-30,-40,-93,-48,-117,183,183,-170,-78,183,183,-151,-160,-163,183,183,297,-165,183,-161,-164,-166,183,-162,183,]),'R_PAREN':([9,10,11,12,13,14,17,24,29,31,34,35,36,38,43,46,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,99,106,107,124,125,127,130,132,133,134,136,138,139,140,141,160,170,183,199,201,203,204,205,206,207,208,209,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,243,258,259,261,262,263,266,267,268,272,273,279,284,286,],[-102,-103,-104,-105,-106,-107,-110,-128,45,-10,-123,-129,-125,-124,101,-131,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,160,-133,-108,-109,-26,-27,203,-36,-37,-38,-47,-39,209,211,-92,-134,-126,-132,-158,-80,-76,-29,259,-33,-31,-32,261,-21,-135,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-127,-159,-28,-30,-40,-93,-48,275,276,277,-78,-34,285,289,291,]),'COMMA':([19,20,23,34,36,38,43,46,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,96,97,98,99,108,109,124,125,130,132,133,134,136,138,140,160,163,164,170,185,197,199,200,201,202,203,204,205,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,234,235,236,252,255,256,258,259,261,262,263,264,266,267,268,272,273,284,286,],[-100,33,-98,-123,-125,-124,102,-131,-101,-136,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-99,-100,-121,167,-119,-133,198,-139,-26,-27,-36,-37,-38,-47,-39,210,-92,-126,233,-116,-132,210,-137,-80,210,-76,210,-29,260,-33,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-127,-122,-94,-120,210,-138,-140,-28,-30,-40,-93,-48,-117,210,210,210,-78,-34,210,210,]),'ASSIGNMENT':([19,34,36,38,53,55,63,64,72,73,74,75,76,77,78,79,80,81,90,96,124,125,130,132,133,134,136,160,203,206,207,209,230,258,259,261,263,],[30,-123,-125,-124,111,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,30,165,-26,-27,-36,-37,-38,-47,-39,-126,-29,-31,-32,-21,-127,-28,-30,-40,-48,]),'R_BRACES':([25,26,32,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,93,94,96,97,98,104,108,109,124,125,130,132,133,134,136,161,162,172,174,175,176,177,178,179,180,181,182,183,197,198,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,232,234,235,236,239,242,243,249,250,251,255,256,258,259,261,263,265,271,272,274,280,281,283,290,292,293,294,297,298,299,300,303,305,306,],[-95,-96,-97,-136,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-172,-113,-121,166,-119,173,197,-139,-26,-27,-36,-37,-38,-47,-39,231,-114,239,241,-154,-156,-157,-141,-142,-143,-144,-145,-158,-137,255,-80,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-115,-122,-94,-120,-150,-155,-159,-167,-168,-169,-138,-140,-28,-30,-40,-48,-172,-170,-78,280,-151,-160,-163,-165,-161,-172,-147,-164,-166,303,-146,-162,-149,-148,]),'L_BRACES':([25,26,27,28,30,32,44,45,51,100,101,104,172,174,175,176,177,178,179,180,181,182,183,189,198,239,240,242,243,249,250,251,253,254,265,271,275,276,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,40,41,51,-97,104,-12,51,104,-11,172,-171,172,-154,-156,-157,-141,-142,-143,-144,-145,-158,172,51,-150,172,-155,-159,-167,-168,-169,40,41,172,-170,172,282,172,-151,-160,-163,172,172,-165,172,-161,-164,-166,172,-162,172,]),'IF':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,186,-171,186,-154,-156,-157,-141,-142,-143,-144,-145,-158,186,-150,186,-155,-159,-167,-168,-169,186,-170,186,186,-151,-160,-163,186,186,-165,186,-161,-164,-166,186,-162,186,]),'SWITCH':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,187,-171,187,-154,-156,-157,-141,-142,-143,-144,-145,-158,187,-150,187,-155,-159,-167,-168,-169,187,-170,187,187,-151,-160,-163,187,187,-165,187,-161,-164,-166,187,-162,187,]),'WHILE':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,247,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,188,-171,188,-154,-156,-157,-141,-142,-143,-144,-145,-158,188,-150,188,-155,-159,269,-167,-168,-169,188,-170,188,188,-151,-160,-163,188,188,-165,188,-161,-164,-166,188,-162,188,]),'DO':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,189,-171,189,-154,-156,-157,-141,-142,-143,-144,-145,-158,189,-150,189,-155,-159,-167,-168,-169,189,-170,189,189,-151,-160,-163,189,189,-165,189,-161,-164,-166,189,-162,189,]),'FOR':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,190,-171,190,-154,-156,-157,-141,-142,-143,-144,-145,-158,190,-150,190,-155,-159,-167,-168,-169,190,-170,190,190,-151,-160,-163,190,190,-165,190,-161,-164,-166,190,-162,190,]),'CONTINUE':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,191,-171,191,-154,-156,-157,-141,-142,-143,-144,-145,-158,191,-150,191,-155,-159,-167,-168,-169,191,-170,191,191,-151,-160,-163,191,191,-165,191,-161,-164,-166,191,-162,191,]),'BREAK':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,192,-171,192,-154,-156,-157,-141,-142,-143,-144,-145,-158,192,-150,192,-155,-159,-167,-168,-169,192,-170,192,192,-151,-160,-163,192,192,-165,192,-161,-164,-166,192,-162,192,]),'RETURN':([25,26,32,104,172,174,175,176,177,178,179,180,181,182,183,189,239,240,242,243,249,250,251,265,271,275,277,280,281,283,285,287,290,291,292,297,298,302,303,304,],[-95,-96,-97,193,-171,193,-154,-156,-157,-141,-142,-143,-144,-145,-158,193,-150,193,-155,-159,-167,-168,-169,193,-170,193,193,-151,-160,-163,193,193,-165,193,-161,-164,-166,193,-162,193,]),'INCREMENT':([25,26,30,32,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,203,206,207,209,210,211,239,240,242,243,244,245,246,248,249,250,251,257,258,259,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,56,-97,56,124,56,56,56,56,56,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,56,56,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,56,56,-26,-27,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-171,56,-154,-156,-157,-141,-142,-143,-144,-145,-158,56,56,56,-29,-31,-32,-21,56,56,-150,56,-155,-159,56,56,56,56,-167,-168,-169,56,-28,-30,56,56,56,-170,56,56,56,56,-151,-160,-163,56,56,-165,56,-161,56,-164,-166,56,-162,56,]),'DECREMENT':([25,26,30,32,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,203,206,207,209,210,211,239,240,242,243,244,245,246,248,249,250,251,257,258,259,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,57,-97,57,125,57,57,57,57,57,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,57,57,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,57,57,-26,-27,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-171,57,-154,-156,-157,-141,-142,-143,-144,-145,-158,57,57,57,-29,-31,-32,-21,57,57,-150,57,-155,-159,57,57,57,57,-167,-168,-169,57,-28,-30,57,57,57,-170,57,57,57,57,-151,-160,-163,57,57,-165,57,-161,57,-164,-166,57,-162,57,]),'SIZEOF':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,60,-97,60,60,60,60,60,60,-41,-42,-43,-44,-45,-46,60,60,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-171,60,-154,-156,-157,-141,-142,-143,-144,-145,-158,60,60,60,60,60,-150,60,-155,-159,60,60,60,60,-167,-168,-169,60,60,60,60,-170,60,60,60,60,-151,-160,-163,60,60,-165,60,-161,60,-164,-166,60,-162,60,]),'BITWISE_AND':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,203,206,207,209,210,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,239,240,242,243,244,245,246,248,249,250,251,257,258,259,260,261,263,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,65,-97,65,-47,-35,65,65,65,-49,65,65,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,145,-67,-64,-59,-56,-53,65,65,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,65,65,-26,-27,65,65,-36,65,-37,-38,-47,65,-39,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-171,65,-154,-156,-157,-141,-142,-143,-144,-145,-158,65,65,65,-29,-31,-32,-21,65,65,145,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-150,65,-155,-159,65,65,65,65,-167,-168,-169,65,-28,-30,65,-40,-48,65,65,-170,65,65,65,65,-151,-160,-163,65,65,-165,65,-161,65,-164,-166,65,-162,65,]),'ADD':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,87,88,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,203,206,207,209,210,211,223,224,225,226,227,228,229,239,240,242,243,244,245,246,248,249,250,251,257,258,259,260,261,263,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,67,-97,67,-47,-35,67,67,67,-49,67,67,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,154,-53,67,67,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,67,67,-26,-27,67,67,-36,67,-37,-38,-47,67,-39,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-171,67,-154,-156,-157,-141,-142,-143,-144,-145,-158,67,67,67,-29,-31,-32,-21,67,67,154,154,-54,-55,-50,-51,-52,-150,67,-155,-159,67,67,67,67,-167,-168,-169,67,-28,-30,67,-40,-48,67,67,-170,67,67,67,67,-151,-160,-163,67,67,-165,67,-161,67,-164,-166,67,-162,67,]),'SUBSTRACT':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,87,88,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,133,134,135,136,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,203,206,207,209,210,211,223,224,225,226,227,228,229,239,240,242,243,244,245,246,248,249,250,251,257,258,259,260,261,263,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,68,-97,68,-47,-35,68,68,68,-49,68,68,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,155,-53,68,68,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,68,68,-26,-27,68,68,-36,68,-37,-38,-47,68,-39,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-171,68,-154,-156,-157,-141,-142,-143,-144,-145,-158,68,68,68,-29,-31,-32,-21,68,68,155,155,-54,-55,-50,-51,-52,-150,68,-155,-159,68,68,68,68,-167,-168,-169,68,-28,-30,68,-40,-48,68,68,-170,68,68,68,68,-151,-160,-163,68,68,-165,68,-161,68,-164,-166,68,-162,68,]),'BITWISE_ONE_COMPLEMENT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,69,-97,69,69,69,69,69,69,-41,-42,-43,-44,-45,-46,69,69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-171,69,-154,-156,-157,-141,-142,-143,-144,-145,-158,69,69,69,69,69,-150,69,-155,-159,69,69,69,69,-167,-168,-169,69,69,69,69,-170,69,69,69,69,-151,-160,-163,69,69,-165,69,-161,69,-164,-166,69,-162,69,]),'LOGICAL_NOT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,70,-97,70,70,70,70,70,70,-41,-42,-43,-44,-45,-46,70,70,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-171,70,-154,-156,-157,-141,-142,-143,-144,-145,-158,70,70,70,70,70,-150,70,-155,-159,70,70,70,70,-167,-168,-169,70,70,70,70,-170,70,70,70,70,-151,-160,-163,70,70,-165,70,-161,70,-164,-166,70,-162,70,]),'INT_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,91,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,72,-97,72,72,72,72,72,72,-41,-42,-43,-44,-45,-46,159,72,72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-171,72,-154,-156,-157,-141,-142,-143,-144,-145,-158,72,72,72,72,72,-150,72,-155,-159,72,72,72,72,-167,-168,-169,72,72,72,72,-170,72,72,72,72,-151,-160,-163,72,72,-165,72,-161,72,-164,-166,72,-162,72,]),'HEX_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,73,-97,73,73,73,73,73,73,-41,-42,-43,-44,-45,-46,73,73,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-171,73,-154,-156,-157,-141,-142,-143,-144,-145,-158,73,73,73,73,73,-150,73,-155,-159,73,73,73,73,-167,-168,-169,73,73,73,73,-170,73,73,73,73,-151,-160,-163,73,73,-165,73,-161,73,-164,-166,73,-162,73,]),'OCTAL_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,74,-97,74,74,74,74,74,74,-41,-42,-43,-44,-45,-46,74,74,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-171,74,-154,-156,-157,-141,-142,-143,-144,-145,-158,74,74,74,74,74,-150,74,-155,-159,74,74,74,74,-167,-168,-169,74,74,74,74,-170,74,74,74,74,-151,-160,-163,74,74,-165,74,-161,74,-164,-166,74,-162,74,]),'EXPONENT_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,75,-97,75,75,75,75,75,75,-41,-42,-43,-44,-45,-46,75,75,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-171,75,-154,-156,-157,-141,-142,-143,-144,-145,-158,75,75,75,75,75,-150,75,-155,-159,75,75,75,75,-167,-168,-169,75,75,75,75,-170,75,75,75,75,-151,-160,-163,75,75,-165,75,-161,75,-164,-166,75,-162,75,]),'REAL_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,76,-97,76,76,76,76,76,76,-41,-42,-43,-44,-45,-46,76,76,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-171,76,-154,-156,-157,-141,-142,-143,-144,-145,-158,76,76,76,76,76,-150,76,-155,-159,76,76,76,76,-167,-168,-169,76,76,76,76,-170,76,76,76,76,-151,-160,-163,76,76,-165,76,-161,76,-164,-166,76,-162,76,]),'CHAR_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,77,-97,77,77,77,77,77,77,-41,-42,-43,-44,-45,-46,77,77,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-171,77,-154,-156,-157,-141,-142,-143,-144,-145,-158,77,77,77,77,77,-150,77,-155,-159,77,77,77,77,-167,-168,-169,77,77,77,77,-170,77,77,77,77,-151,-160,-163,77,77,-165,77,-161,77,-164,-166,77,-162,77,]),'STR_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,78,-97,78,78,78,78,78,78,-41,-42,-43,-44,-45,-46,78,78,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-171,78,-154,-156,-157,-141,-142,-143,-144,-145,-158,78,78,78,78,78,-150,78,-155,-159,78,78,78,78,-167,-168,-169,78,78,78,78,-170,78,78,78,78,-151,-160,-163,78,78,-165,78,-161,78,-164,-166,78,-162,78,]),'TRUE':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,79,-97,79,79,79,79,79,79,-41,-42,-43,-44,-45,-46,79,79,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-171,79,-154,-156,-157,-141,-142,-143,-144,-145,-158,79,79,79,79,79,-150,79,-155,-159,79,79,79,79,-167,-168,-169,79,79,79,79,-170,79,79,79,79,-151,-160,-163,79,79,-165,79,-161,79,-164,-166,79,-162,79,]),'FALSE':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,80,-97,80,80,80,80,80,80,-41,-42,-43,-44,-45,-46,80,80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-171,80,-154,-156,-157,-141,-142,-143,-144,-145,-158,80,80,80,80,80,-150,80,-155,-159,80,80,80,80,-167,-168,-169,80,80,80,80,-170,80,80,80,80,-151,-160,-163,80,80,-165,80,-161,80,-164,-166,80,-162,80,]),'NULL':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,104,110,111,112,113,114,115,116,117,118,119,120,121,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,172,174,175,176,177,178,179,180,181,182,183,189,193,198,210,211,239,240,242,243,244,245,246,248,249,250,251,257,260,265,270,271,275,277,278,279,280,281,283,285,287,290,291,292,295,297,298,302,303,304,],[-95,-96,81,-97,81,81,81,81,81,81,-41,-42,-43,-44,-45,-46,81,81,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-171,81,-154,-156,-157,-141,-142,-143,-144,-145,-158,81,81,81,81,81,-150,81,-155,-159,81,81,81,81,-167,-168,-169,81,81,81,81,-170,81,81,81,81,-151,-160,-163,81,81,-165,81,-161,81,-164,-166,81,-162,81,]),'L_SQBR':([34,36,38,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,160,203,206,207,209,230,258,259,],[91,-125,91,126,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-126,-29,-31,-32,-21,-127,-28,-30,]),'COLON':([52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,124,125,130,132,133,134,136,140,199,200,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,235,258,259,261,262,263,272,296,301,],[-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-92,-80,257,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-94,-28,-30,-40,-93,-48,-78,302,304,]),'R_SQBR':([52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,124,125,130,132,133,134,136,140,159,199,201,202,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,262,263,272,],[-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-92,230,-80,-76,258,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-93,-48,-78,]),'DIVIDE':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,88,124,125,130,132,133,134,136,203,206,207,209,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,157,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,157,157,-50,-51,-52,-28,-30,-40,-48,]),'MODULUS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,88,124,125,130,132,133,134,136,203,206,207,209,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,158,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,158,158,-50,-51,-52,-28,-30,-40,-48,]),'LEFT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,86,87,88,124,125,130,132,133,134,136,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,152,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,152,152,152,152,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'RIGHT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,86,87,88,124,125,130,132,133,134,136,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,153,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,153,153,153,153,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,148,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,148,148,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,149,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,149,149,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,150,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,150,150,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,151,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,151,151,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,146,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,146,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'NOT_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,147,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,147,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_XOR':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,144,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,144,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_OR':([53,55,59,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,124,125,130,132,133,134,136,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,-25,-13,143,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,143,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_AND':([53,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,124,125,130,132,133,134,136,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,-35,-49,142,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,142,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'QUES_MARK':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,124,125,130,132,133,134,136,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,122,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_OR':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,124,125,130,132,133,134,136,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,258,259,261,263,],[-47,123,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'MULTIPLY_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[112,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'DIVIDE_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[113,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'MODULUS_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[114,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'ADD_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[115,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'SUBSTRACT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[116,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'LEFT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[117,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'RIGHT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[118,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_AND_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[119,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_XOR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[120,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_OR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,130,132,133,134,136,203,206,207,209,258,259,261,263,],[121,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'DOT':([55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,203,206,207,209,258,259,],[128,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ARROW':([55,63,64,72,73,74,75,76,77,78,79,80,81,124,125,203,206,207,209,258,259,],[129,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ELSE':([178,179,180,181,182,183,239,243,249,250,251,271,280,281,283,290,292,297,298,303,],[-141,-142,-143,-144,-145,-158,-150,-159,-167,-168,-169,-170,-151,287,-163,-165,-161,-164,-166,-162,]),'CASE':([178,179,180,181,182,183,239,243,249,250,251,271,280,281,282,283,288,290,292,293,294,297,298,300,303,305,306,],[-141,-142,-143,-144,-145,-158,-150,-159,-167,-168,-169,-170,-151,-160,-171,-163,295,-165,-161,295,-147,-164,-166,-146,-162,-149,-148,]),'DEFAULT':([178,179,180,181,182,183,239,243,249,250,251,271,280,281,282,283,288,290,292,293,294,297,298,300,303,305,306,],[-141,-142,-143,-144,-145,-158,-150,-159,-167,-168,-169,-170,-151,-160,-171,-163,296,-165,-161,296,-147,-164,-166,-146,-162,-149,-148,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,18,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,104,174,240,265,],[5,5,177,177,177,177,]),'type_specifier':([0,2,29,39,61,93,102,104,135,137,174,240,265,],[6,6,42,95,141,95,42,184,141,141,184,184,184,]),'struct_specifier':([0,2,104,174,240,265,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,104,174,240,265,],[8,8,8,8,8,8,]),'declarator':([6,33,37,42,95,184,233,],[19,90,92,99,164,90,264,]),'init_declarator_list':([6,184,],[20,20,]),'pointer':([6,33,37,42,95,141,184,233,],[21,21,21,21,21,212,21,21,]),'no_pointer':([6,33,37,42,95,184,233,],[22,22,22,22,22,22,22,]),'init_declarator':([6,33,184,],[23,89,23,]),'func_scope':([19,],[29,]),'direct_declarator':([21,22,],[34,38,]),'add_sym_struct':([27,253,],[39,39,]),'parameter_type_list':([29,],[43,]),'func_rparen_2':([29,],[44,]),'parameter_declaration':([29,102,],[46,170,]),'initializer':([30,51,198,],[49,109,256,]),'assignment_expression':([30,51,61,104,110,122,126,127,131,135,137,174,189,193,198,210,240,244,245,246,248,260,265,270,275,277,278,279,285,287,291,302,304,],[50,50,140,140,199,140,140,205,140,140,140,140,140,140,50,262,140,140,140,140,140,273,140,140,140,140,140,140,140,140,140,140,140,]),'conditional_expression':([30,51,61,104,110,122,126,127,131,135,137,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[52,52,52,52,52,52,52,52,52,52,52,235,52,52,52,52,52,52,52,52,52,52,272,52,52,52,52,52,52,52,52,52,52,235,52,52,]),'unary_expression':([30,51,56,57,58,60,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,174,189,193,198,210,211,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[53,53,130,132,134,136,53,53,53,53,134,53,53,53,53,53,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,53,53,53,53,53,134,53,53,53,53,53,134,53,53,53,53,53,53,53,53,53,53,134,53,53,]),'logical_or_expression':([30,51,61,104,110,122,126,127,131,135,137,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'postfix_expression':([30,51,56,57,58,60,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,174,189,193,198,210,211,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'unary_operator':([30,51,56,57,58,60,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,174,189,193,198,210,211,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'cast_expression':([30,51,58,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,174,189,193,198,210,211,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[59,59,133,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,227,228,229,59,59,59,59,59,59,263,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'logical_and_expression':([30,51,61,104,110,122,123,126,127,131,135,137,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[62,62,62,62,62,62,201,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'primary_expression':([30,51,56,57,58,60,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,165,174,189,193,198,210,211,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'inclusive_or_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[71,71,71,71,71,71,71,71,71,71,71,71,213,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'exclusive_or_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,143,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[82,82,82,82,82,82,82,82,82,82,82,82,82,214,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'and_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,143,144,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,215,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'equality_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,143,144,145,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,216,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'relational_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,217,218,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'shift_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,219,220,221,222,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'additive_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,223,224,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'multiplicative_expression':([30,51,61,104,110,122,123,126,127,131,135,137,142,143,144,145,146,147,148,149,150,151,152,153,154,155,165,174,189,193,198,210,240,244,245,246,248,257,260,265,270,275,277,278,279,285,287,291,295,302,304,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,225,226,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'struct_declaration_list':([39,],[93,]),'struct_declaration':([39,93,],[94,162,]),'enumerator_list':([41,],[97,]),'enumerator':([41,167,],[98,236,]),'func_rparen_1':([43,],[100,]),'function_body':([44,100,],[103,168,]),'initializer_list':([51,],[108,]),'assignment_operator':([53,],[110,]),'expression':([61,104,122,126,131,135,137,174,189,193,240,244,245,246,248,265,270,275,277,278,279,285,287,291,302,304,],[138,185,200,202,138,138,138,185,185,252,185,266,267,268,185,185,185,185,185,284,286,185,185,185,185,185,]),'type_name':([61,135,137,],[139,139,208,]),'pop_sym':([93,103,105,168,169,265,293,],[161,171,196,237,238,274,299,]),'struct_declarator_list':([95,],[163,]),'block_item_list':([104,240,],[174,265,]),'block_item':([104,174,240,265,],[175,242,175,242,]),'statement':([104,174,189,240,265,275,277,285,287,291,302,304,],[176,176,247,176,176,281,283,290,292,298,305,306,]),'compound_statement':([104,174,189,240,265,275,277,285,287,291,302,304,],[178,178,178,178,178,178,178,178,178,178,178,178,]),'expression_statement':([104,174,189,240,248,265,270,275,277,285,287,291,302,304,],[179,179,179,179,270,179,279,179,179,179,179,179,179,179,]),'selection_statement':([104,174,189,240,265,275,277,285,287,291,302,304,],[180,180,180,180,180,180,180,180,180,180,180,180,]),'iteration_statement':([104,174,189,240,265,275,277,285,287,291,302,304,],[181,181,181,181,181,181,181,181,181,181,181,181,]),'jump_statement':([104,174,189,240,265,275,277,285,287,291,302,304,],[182,182,182,182,182,182,182,182,182,182,182,182,]),'argument_expression_list':([127,],[204,]),'constant_expression':([165,295,],[234,301,]),'add_sym':([172,282,],[240,288,]),'labeled_statement_list':([288,],[293,]),'labeled_statement':([288,293,],[294,300,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',28),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',34),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',35),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',42),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',43),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',57),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',58),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym','function_definition',7,'p_function_definition_1','cparser.py',69),
  ('function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym','function_definition',6,'p_function_definition_1','cparser.py',70),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',92),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',110),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',145),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',179),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',180),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',181),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',182),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',183),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',184),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',185),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',186),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',187),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',188),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',189),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',190),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',226),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',227),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',228),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',254),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',292),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',293),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',342),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',377),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',415),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',416),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',430),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',437),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',438),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',445),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',452),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',453),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',463),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',464),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',465),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',466),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',467),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',468),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',475),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',476),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',497),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',498),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',499),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',509),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',517),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',518),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',519),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',529),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',530),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',531),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',542),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',543),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',544),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',545),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',546),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',557),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',558),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',559),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',569),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',570),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',582),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',583),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',596),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',597),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',609),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',610),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',621),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',622),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',634),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',635),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',667),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',668),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',680),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',681),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',682),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',683),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',684),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',685),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',686),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',687),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',688),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',689),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',690),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',697),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',698),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',714),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',722),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',723),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',724),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',737),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',738),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',746),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',747),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',772),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',773),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',774),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',775),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',776),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',777),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',778),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',779),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',780),
  ('struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES','struct_specifier',6,'p_struct_specifier','cparser.py',803),
  ('add_sym_struct -> L_BRACES','add_sym_struct',1,'p_add_sym_struct','cparser.py',812),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',821),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',822),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',833),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',841),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',842),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',867),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',874),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',875),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',882),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',883),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',891),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',892),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',902),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',903),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',904),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',939),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',940),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',971),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1008),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1009),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1019),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1033),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1034),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',1046),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',1047),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',1048),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',1058),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',1059),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1073),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1074),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1075),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1076),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1077),
  ('labeled_statement_list -> labeled_statement_list labeled_statement','labeled_statement_list',2,'p_labeled_statement_list','cparser.py',1085),
  ('labeled_statement_list -> labeled_statement','labeled_statement_list',1,'p_labeled_statement_list','cparser.py',1086),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1095),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1096),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1113),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1114),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1124),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1125),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1135),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1136),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1143),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1144),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1156),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1157),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1167),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1168),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES','selection_statement',9,'p_selection_statement','cparser.py',1169),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1194),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1195),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1196),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1197),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1225),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1226),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1232),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1233),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1272),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1283),
]
