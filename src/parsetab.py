
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    function_definition  : type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym\n                         | type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n                       | NULL\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR constant_expression R_SQBR\n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n                | AUTO auto_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT assignment_expression\n    \n    auto_declarator_list : auto_declarator\n                         | auto_declarator_list COMMA auto_declarator\n    \n    auto_declarator : IDENTIFIER ASSIGNMENT assignment_expression\n                    | IDENTIFIER\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | STRUCT IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES\n    \n    add_sym_struct : L_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    statement : compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement_list : labeled_statement_list labeled_statement\n                           | labeled_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'AUTO':([0,2,3,4,5,16,23,31,38,100,101,102,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[8,8,-2,-4,-5,-3,-95,-96,-97,-164,8,-164,-164,-164,-7,-163,-144,8,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-6,-8,-142,8,-145,-147,-151,-159,-160,-161,8,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'VOID':([0,2,3,4,5,16,23,28,30,31,38,41,42,59,93,94,99,100,101,102,129,131,156,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[9,9,-2,-4,-5,-3,-95,9,-10,-96,-97,9,-114,9,9,-115,9,-164,9,-164,9,9,-116,-164,-164,-7,-163,-144,9,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-117,-6,-8,-142,9,-145,-147,-151,-159,-160,-161,9,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'CHAR':([0,2,3,4,5,16,23,28,30,31,38,41,42,59,93,94,99,100,101,102,129,131,156,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[10,10,-2,-4,-5,-3,-95,10,-10,-96,-97,10,-114,10,10,-115,10,-164,10,-164,10,10,-116,-164,-164,-7,-163,-144,10,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-117,-6,-8,-142,10,-145,-147,-151,-159,-160,-161,10,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'INT':([0,2,3,4,5,16,23,28,30,31,38,41,42,59,93,94,99,100,101,102,129,131,156,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[11,11,-2,-4,-5,-3,-95,11,-10,-96,-97,11,-114,11,11,-115,11,-164,11,-164,11,11,-116,-164,-164,-7,-163,-144,11,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-117,-6,-8,-142,11,-145,-147,-151,-159,-160,-161,11,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'LONG':([0,2,3,4,5,16,23,28,30,31,38,41,42,59,93,94,99,100,101,102,129,131,156,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[12,12,-2,-4,-5,-3,-95,12,-10,-96,-97,12,-114,12,12,-115,12,-164,12,-164,12,12,-116,-164,-164,-7,-163,-144,12,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-117,-6,-8,-142,12,-145,-147,-151,-159,-160,-161,12,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'FLOAT':([0,2,3,4,5,16,23,28,30,31,38,41,42,59,93,94,99,100,101,102,129,131,156,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[13,13,-2,-4,-5,-3,-95,13,-10,-96,-97,13,-114,13,13,-115,13,-164,13,-164,13,13,-116,-164,-164,-7,-163,-144,13,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-117,-6,-8,-142,13,-145,-147,-151,-159,-160,-161,13,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'STRUCT':([0,2,3,4,5,16,23,28,30,31,38,41,42,59,93,94,99,100,101,102,129,131,156,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[14,14,-2,-4,-5,-3,-95,48,-10,-96,-97,48,-114,48,48,-115,48,-164,185,-164,48,48,-116,-164,-164,-7,-163,-144,185,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-117,-6,-8,-142,185,-145,-147,-151,-159,-160,-161,185,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'BOOL':([0,2,3,4,5,16,23,28,30,31,38,41,42,59,93,94,99,100,101,102,129,131,156,159,160,162,163,164,165,166,167,168,169,170,171,172,173,174,186,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,286,],[15,15,-2,-4,-5,-3,-95,15,-10,-96,-97,15,-114,15,15,-115,15,-164,15,-164,15,15,-116,-164,-164,-7,-163,-144,15,-146,-148,-149,-133,-134,-135,-136,-137,-150,-9,-117,-6,-8,-142,15,-145,-147,-151,-159,-160,-161,15,-162,-143,-152,-155,-157,-153,-156,-158,-154,]),'$end':([1,2,3,4,5,16,23,31,38,100,102,159,160,162,164,186,223,224,227,],[0,-1,-2,-4,-5,-3,-95,-96,-97,-164,-164,-164,-164,-7,-144,-9,-6,-8,-145,]),'MULTIPLY':([6,9,10,11,12,13,15,19,22,23,27,29,31,32,34,36,38,40,43,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,86,95,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,175,180,184,192,195,196,198,199,200,201,214,215,216,217,218,222,225,226,228,229,230,231,232,234,235,236,237,239,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[22,-106,-107,-108,-109,-110,-112,34,-125,-95,-111,64,-96,22,-126,22,-97,64,22,-47,-35,64,64,64,-49,64,64,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,150,22,64,-111,64,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,64,64,-26,-27,64,64,-36,64,-37,-38,-47,64,-39,64,22,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-163,64,-146,-148,-149,-133,-134,-135,-136,-137,-150,22,64,64,-29,-31,-32,-21,64,64,34,150,150,-50,-51,-52,22,-142,64,-147,-151,64,64,64,64,-159,-160,-161,-111,64,-28,-30,64,-40,-48,64,64,-162,64,64,64,64,-143,-152,-155,64,64,-157,64,-153,64,-156,-158,64,-154,64,]),'IDENTIFIER':([6,8,9,10,11,12,13,14,15,19,20,22,23,27,29,31,32,34,36,38,39,40,43,48,54,55,56,58,59,63,64,65,66,67,68,95,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,175,180,184,185,199,200,222,225,226,228,229,230,231,232,234,235,236,237,239,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-127,26,-106,-107,-108,-109,-110,27,-112,35,35,-125,-95,-111,62,-96,-127,-126,-127,-97,26,62,-127,103,62,62,62,62,62,-41,-42,-43,-44,-45,-46,-127,62,-111,62,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,62,62,62,62,195,196,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-163,62,-146,-148,-149,-133,-134,-135,-136,-137,-150,-127,62,62,239,62,62,-127,-142,62,-147,-151,62,62,62,62,-159,-160,-161,-111,62,62,62,62,-162,62,62,62,62,-143,-152,-155,62,62,-157,62,-153,62,-156,-158,62,-154,62,]),'L_PAREN':([6,9,10,11,12,13,15,17,19,20,22,23,27,29,31,32,33,34,35,36,37,38,40,43,53,54,55,56,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,95,101,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,163,165,166,167,168,169,170,171,172,173,174,175,177,178,179,180,181,184,192,195,196,198,199,200,219,222,225,226,228,229,230,231,232,234,235,236,237,239,240,241,242,243,248,252,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-127,-106,-107,-108,-109,-110,-112,30,36,36,-125,-95,-111,59,-96,-127,-120,-126,-122,-127,-121,-97,59,-127,121,125,125,129,131,59,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-127,59,-111,59,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,59,129,-26,-27,129,59,59,59,59,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,-123,-163,59,-146,-148,-149,-133,-134,-135,-136,-137,-150,-127,230,231,232,59,234,59,-29,-31,-32,-21,59,129,-124,-127,-142,59,-147,-151,59,59,59,59,-159,-160,-161,-111,129,-28,-30,59,59,261,59,-162,59,59,59,59,-143,-152,-155,59,59,-157,59,-153,129,-156,-158,59,-154,59,]),'SEMI_COLON':([7,17,18,21,23,24,25,26,31,33,35,37,38,46,49,50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,98,101,118,119,124,126,127,128,130,134,154,157,158,163,165,166,167,168,169,170,171,172,173,174,176,180,182,183,184,187,189,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,225,226,228,229,234,235,236,237,238,241,242,244,245,246,247,248,253,254,255,258,260,263,264,266,268,270,272,273,274,275,280,281,285,286,287,],[23,-100,31,-98,-95,38,-102,-105,-96,-120,-122,-121,-97,102,-101,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-99,-100,-103,-104,160,174,-26,-27,-36,-37,-38,-47,-39,-92,-123,221,-118,-163,174,-146,-148,-149,-133,-134,-135,-136,-137,-150,229,174,235,236,237,-80,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-124,-113,-142,174,-147,-151,174,-159,-160,-161,254,-28,-30,-40,-93,-48,-119,174,174,-162,-78,174,174,-143,-152,-155,174,174,280,-157,174,-153,-156,-158,174,-154,174,]),'R_PAREN':([9,10,11,12,13,15,22,28,30,33,34,35,37,44,47,50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,96,103,118,119,121,124,126,127,128,130,132,133,134,135,154,161,174,187,189,192,193,194,195,196,197,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,229,241,242,244,245,246,249,250,251,255,256,262,267,269,],[-106,-107,-108,-109,-110,-112,-125,46,-10,-120,-126,-122,-121,98,-128,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,154,-130,-111,-26,-27,192,-36,-37,-38,-47,-39,198,200,-92,-131,-123,-129,-150,-80,-76,-29,242,-33,-31,-32,244,-21,-132,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-124,-151,-28,-30,-40,-93,-48,258,259,260,-78,-34,268,272,274,]),'COMMA':([17,18,21,24,25,26,33,35,37,44,47,49,50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,92,96,118,119,124,126,127,128,130,132,134,154,157,158,161,176,187,188,189,192,193,194,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,238,241,242,244,245,246,247,249,250,251,255,256,267,269,],[-100,32,-98,39,-102,-105,-120,-122,-121,99,-128,-101,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-99,-100,-103,-104,-130,-26,-27,-36,-37,-38,-47,-39,199,-92,-123,222,-118,-129,199,-80,199,-76,-29,243,-33,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-124,199,-28,-30,-40,-93,-48,-119,199,199,199,-78,-34,199,199,]),'ASSIGNMENT':([17,26,33,35,37,51,53,61,62,70,71,72,73,74,75,76,77,78,79,88,118,119,124,126,127,128,130,154,192,195,196,198,219,241,242,244,246,],[29,40,-120,-122,-121,105,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,29,-26,-27,-36,-37,-38,-47,-39,-123,-29,-31,-32,-21,-124,-28,-30,-40,-48,]),'R_BRACES':([23,31,38,93,94,101,155,156,163,165,166,167,168,169,170,171,172,173,174,221,225,228,229,235,236,237,248,254,257,263,264,266,273,275,276,277,280,281,282,283,286,288,289,],[-95,-96,-97,-164,-115,164,220,-116,225,227,-146,-148,-149,-133,-134,-135,-136,-137,-150,-117,-142,-147,-151,-159,-160,-161,-164,-162,263,-143,-152,-155,-157,-153,-164,-139,-156,-158,286,-138,-154,-141,-140,]),'L_BRACES':([23,27,31,38,45,46,97,98,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,239,248,254,258,259,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,42,-96,-97,101,-12,101,-11,163,-163,163,-146,-148,-149,-133,-134,-135,-136,-137,-150,163,-142,163,-147,-151,-159,-160,-161,42,163,-162,163,265,163,-143,-152,-155,163,163,-157,163,-153,-156,-158,163,-154,163,]),'IF':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,177,-163,177,-146,-148,-149,-133,-134,-135,-136,-137,-150,177,-142,177,-147,-151,-159,-160,-161,177,-162,177,177,-143,-152,-155,177,177,-157,177,-153,-156,-158,177,-154,177,]),'SWITCH':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,178,-163,178,-146,-148,-149,-133,-134,-135,-136,-137,-150,178,-142,178,-147,-151,-159,-160,-161,178,-162,178,178,-143,-152,-155,178,178,-157,178,-153,-156,-158,178,-154,178,]),'WHILE':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,233,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,179,-163,179,-146,-148,-149,-133,-134,-135,-136,-137,-150,179,-142,179,-147,-151,252,-159,-160,-161,179,-162,179,179,-143,-152,-155,179,179,-157,179,-153,-156,-158,179,-154,179,]),'DO':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,180,-163,180,-146,-148,-149,-133,-134,-135,-136,-137,-150,180,-142,180,-147,-151,-159,-160,-161,180,-162,180,180,-143,-152,-155,180,180,-157,180,-153,-156,-158,180,-154,180,]),'FOR':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,181,-163,181,-146,-148,-149,-133,-134,-135,-136,-137,-150,181,-142,181,-147,-151,-159,-160,-161,181,-162,181,181,-143,-152,-155,181,181,-157,181,-153,-156,-158,181,-154,181,]),'CONTINUE':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,182,-163,182,-146,-148,-149,-133,-134,-135,-136,-137,-150,182,-142,182,-147,-151,-159,-160,-161,182,-162,182,182,-143,-152,-155,182,182,-157,182,-153,-156,-158,182,-154,182,]),'BREAK':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,183,-163,183,-146,-148,-149,-133,-134,-135,-136,-137,-150,183,-142,183,-147,-151,-159,-160,-161,183,-162,183,183,-143,-152,-155,183,183,-157,183,-153,-156,-158,183,-154,183,]),'RETURN':([23,31,38,101,163,165,166,167,168,169,170,171,172,173,174,180,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,285,286,287,],[-95,-96,-97,184,-163,184,-146,-148,-149,-133,-134,-135,-136,-137,-150,184,-142,184,-147,-151,-159,-160,-161,184,-162,184,184,-143,-152,-155,184,184,-157,184,-153,-156,-158,184,-154,184,]),'INCREMENT':([23,29,31,38,40,53,54,55,56,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,192,195,196,198,199,200,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,54,-96,-97,54,118,54,54,54,54,54,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,54,54,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,54,54,-26,-27,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-163,54,-146,-148,-149,-133,-134,-135,-136,-137,-150,54,54,-29,-31,-32,-21,54,54,-142,54,-147,-151,54,54,54,54,-159,-160,-161,54,-28,-30,54,54,54,-162,54,54,54,54,-143,-152,-155,54,54,-157,54,-153,54,-156,-158,54,-154,54,]),'DECREMENT':([23,29,31,38,40,53,54,55,56,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,192,195,196,198,199,200,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,55,-96,-97,55,119,55,55,55,55,55,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,55,55,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,55,55,-26,-27,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-163,55,-146,-148,-149,-133,-134,-135,-136,-137,-150,55,55,-29,-31,-32,-21,55,55,-142,55,-147,-151,55,55,55,55,-159,-160,-161,55,-28,-30,55,55,55,-162,55,55,55,55,-143,-152,-155,55,55,-157,55,-153,55,-156,-158,55,-154,55,]),'SIZEOF':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,58,-96,-97,58,58,58,58,58,58,-41,-42,-43,-44,-45,-46,58,58,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-163,58,-146,-148,-149,-133,-134,-135,-136,-137,-150,58,58,58,58,-142,58,-147,-151,58,58,58,58,-159,-160,-161,58,58,58,58,-162,58,58,58,58,-143,-152,-155,58,58,-157,58,-153,58,-156,-158,58,-154,58,]),'BITWISE_AND':([23,29,31,38,40,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,192,195,196,198,199,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,63,-96,-97,63,-47,-35,63,63,63,-49,63,63,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,139,-67,-64,-59,-56,-53,63,63,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,63,63,-26,-27,63,63,-36,63,-37,-38,-47,63,-39,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-163,63,-146,-148,-149,-133,-134,-135,-136,-137,-150,63,63,-29,-31,-32,-21,63,63,139,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-142,63,-147,-151,63,63,63,63,-159,-160,-161,63,-28,-30,63,-40,-48,63,63,-162,63,63,63,63,-143,-152,-155,63,63,-157,63,-153,63,-156,-158,63,-154,63,]),'ADD':([23,29,31,38,40,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,85,86,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,192,195,196,198,199,200,212,213,214,215,216,217,218,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,65,-96,-97,65,-47,-35,65,65,65,-49,65,65,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,148,-53,65,65,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,65,65,-26,-27,65,65,-36,65,-37,-38,-47,65,-39,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-163,65,-146,-148,-149,-133,-134,-135,-136,-137,-150,65,65,-29,-31,-32,-21,65,65,148,148,-54,-55,-50,-51,-52,-142,65,-147,-151,65,65,65,65,-159,-160,-161,65,-28,-30,65,-40,-48,65,65,-162,65,65,65,65,-143,-152,-155,65,65,-157,65,-153,65,-156,-158,65,-154,65,]),'SUBSTRACT':([23,29,31,38,40,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,79,85,86,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,192,195,196,198,199,200,212,213,214,215,216,217,218,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,66,-96,-97,66,-47,-35,66,66,66,-49,66,66,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,149,-53,66,66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,66,66,-26,-27,66,66,-36,66,-37,-38,-47,66,-39,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-163,66,-146,-148,-149,-133,-134,-135,-136,-137,-150,66,66,-29,-31,-32,-21,66,66,149,149,-54,-55,-50,-51,-52,-142,66,-147,-151,66,66,66,66,-159,-160,-161,66,-28,-30,66,-40,-48,66,66,-162,66,66,66,66,-143,-152,-155,66,66,-157,66,-153,66,-156,-158,66,-154,66,]),'BITWISE_ONE_COMPLEMENT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,67,-96,-97,67,67,67,67,67,67,-41,-42,-43,-44,-45,-46,67,67,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-163,67,-146,-148,-149,-133,-134,-135,-136,-137,-150,67,67,67,67,-142,67,-147,-151,67,67,67,67,-159,-160,-161,67,67,67,67,-162,67,67,67,67,-143,-152,-155,67,67,-157,67,-153,67,-156,-158,67,-154,67,]),'LOGICAL_NOT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,68,-96,-97,68,68,68,68,68,68,-41,-42,-43,-44,-45,-46,68,68,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-163,68,-146,-148,-149,-133,-134,-135,-136,-137,-150,68,68,68,68,-142,68,-147,-151,68,68,68,68,-159,-160,-161,68,68,68,68,-162,68,68,68,68,-143,-152,-155,68,68,-157,68,-153,68,-156,-158,68,-154,68,]),'INT_CONSTANT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,89,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,70,-96,-97,70,70,70,70,70,70,-41,-42,-43,-44,-45,-46,153,70,70,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-163,70,-146,-148,-149,-133,-134,-135,-136,-137,-150,70,70,70,70,-142,70,-147,-151,70,70,70,70,-159,-160,-161,70,70,70,70,-162,70,70,70,70,-143,-152,-155,70,70,-157,70,-153,70,-156,-158,70,-154,70,]),'HEX_CONSTANT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,71,-96,-97,71,71,71,71,71,71,-41,-42,-43,-44,-45,-46,71,71,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-163,71,-146,-148,-149,-133,-134,-135,-136,-137,-150,71,71,71,71,-142,71,-147,-151,71,71,71,71,-159,-160,-161,71,71,71,71,-162,71,71,71,71,-143,-152,-155,71,71,-157,71,-153,71,-156,-158,71,-154,71,]),'OCTAL_CONSTANT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,72,-96,-97,72,72,72,72,72,72,-41,-42,-43,-44,-45,-46,72,72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-163,72,-146,-148,-149,-133,-134,-135,-136,-137,-150,72,72,72,72,-142,72,-147,-151,72,72,72,72,-159,-160,-161,72,72,72,72,-162,72,72,72,72,-143,-152,-155,72,72,-157,72,-153,72,-156,-158,72,-154,72,]),'EXPONENT_CONSTANT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,73,-96,-97,73,73,73,73,73,73,-41,-42,-43,-44,-45,-46,73,73,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-163,73,-146,-148,-149,-133,-134,-135,-136,-137,-150,73,73,73,73,-142,73,-147,-151,73,73,73,73,-159,-160,-161,73,73,73,73,-162,73,73,73,73,-143,-152,-155,73,73,-157,73,-153,73,-156,-158,73,-154,73,]),'REAL_CONSTANT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,74,-96,-97,74,74,74,74,74,74,-41,-42,-43,-44,-45,-46,74,74,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-163,74,-146,-148,-149,-133,-134,-135,-136,-137,-150,74,74,74,74,-142,74,-147,-151,74,74,74,74,-159,-160,-161,74,74,74,74,-162,74,74,74,74,-143,-152,-155,74,74,-157,74,-153,74,-156,-158,74,-154,74,]),'CHAR_CONSTANT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,75,-96,-97,75,75,75,75,75,75,-41,-42,-43,-44,-45,-46,75,75,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-163,75,-146,-148,-149,-133,-134,-135,-136,-137,-150,75,75,75,75,-142,75,-147,-151,75,75,75,75,-159,-160,-161,75,75,75,75,-162,75,75,75,75,-143,-152,-155,75,75,-157,75,-153,75,-156,-158,75,-154,75,]),'STR_CONSTANT':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,76,-96,-97,76,76,76,76,76,76,-41,-42,-43,-44,-45,-46,76,76,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-163,76,-146,-148,-149,-133,-134,-135,-136,-137,-150,76,76,76,76,-142,76,-147,-151,76,76,76,76,-159,-160,-161,76,76,76,76,-162,76,76,76,76,-143,-152,-155,76,76,-157,76,-153,76,-156,-158,76,-154,76,]),'TRUE':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,77,-96,-97,77,77,77,77,77,77,-41,-42,-43,-44,-45,-46,77,77,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-163,77,-146,-148,-149,-133,-134,-135,-136,-137,-150,77,77,77,77,-142,77,-147,-151,77,77,77,77,-159,-160,-161,77,77,77,77,-162,77,77,77,77,-143,-152,-155,77,77,-157,77,-153,77,-156,-158,77,-154,77,]),'FALSE':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,78,-96,-97,78,78,78,78,78,78,-41,-42,-43,-44,-45,-46,78,78,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-163,78,-146,-148,-149,-133,-134,-135,-136,-137,-150,78,78,78,78,-142,78,-147,-151,78,78,78,78,-159,-160,-161,78,78,78,78,-162,78,78,78,78,-143,-152,-155,78,78,-157,78,-153,78,-156,-158,78,-154,78,]),'NULL':([23,29,31,38,40,54,55,56,58,59,63,64,65,66,67,68,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,163,165,166,167,168,169,170,171,172,173,174,180,184,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,285,286,287,],[-95,79,-96,-97,79,79,79,79,79,79,-41,-42,-43,-44,-45,-46,79,79,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-163,79,-146,-148,-149,-133,-134,-135,-136,-137,-150,79,79,79,79,-142,79,-147,-151,79,79,79,79,-159,-160,-161,79,79,79,79,-162,79,79,79,79,-143,-152,-155,79,79,-157,79,-153,79,-156,-158,79,-154,79,]),'L_SQBR':([33,35,37,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,154,192,195,196,198,219,241,242,],[89,-122,89,120,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-123,-29,-31,-32,-21,-124,-28,-30,]),'COLON':([50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,119,124,126,127,128,130,134,187,188,189,191,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,245,246,255,279,284,],[-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-92,-80,240,-76,-94,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-93,-48,-78,285,287,]),'DIVIDE':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,86,118,119,124,126,127,128,130,192,195,196,198,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,151,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,151,151,-50,-51,-52,-28,-30,-40,-48,]),'MODULUS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,86,118,119,124,126,127,128,130,192,195,196,198,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,152,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,152,152,-50,-51,-52,-28,-30,-40,-48,]),'LEFT_SHIFT':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,84,85,86,118,119,124,126,127,128,130,192,195,196,198,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,146,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,146,146,146,146,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'RIGHT_SHIFT':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,84,85,86,118,119,124,126,127,128,130,192,195,196,198,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,147,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,147,147,147,147,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,142,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,142,142,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,143,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,143,143,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS_EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,144,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,144,144,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER_EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,145,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,145,145,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,82,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,140,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,140,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'NOT_EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,82,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,141,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,141,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_XOR':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,138,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,138,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_OR':([51,53,57,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,119,124,126,127,128,130,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,137,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,137,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_AND':([51,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,119,124,126,127,128,130,189,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,136,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,136,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'QUES_MARK':([51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,119,124,126,127,128,130,189,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,116,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_OR':([51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,119,124,126,127,128,130,189,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,117,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'MULTIPLY_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[106,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'DIVIDE_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[107,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'MODULUS_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[108,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'ADD_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[109,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'SUBSTRACT_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[110,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'LEFT_SHIFT_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[111,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'RIGHT_SHIFT_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[112,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_AND_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[113,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_XOR_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[114,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_OR_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,124,126,127,128,130,192,195,196,198,241,242,244,246,],[115,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'R_SQBR':([52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,118,119,124,126,127,128,130,153,189,190,191,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,255,],[-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,219,-76,241,-94,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,-78,]),'DOT':([53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,192,195,196,198,241,242,],[122,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ARROW':([53,61,62,70,71,72,73,74,75,76,77,78,79,118,119,192,195,196,198,241,242,],[123,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ELSE':([169,170,171,172,173,174,225,229,235,236,237,254,263,264,266,273,275,280,281,286,],[-133,-134,-135,-136,-137,-150,-142,-151,-159,-160,-161,-162,-143,270,-155,-157,-153,-156,-158,-154,]),'CASE':([169,170,171,172,173,174,225,229,235,236,237,254,263,264,265,266,271,273,275,276,277,280,281,283,286,288,289,],[-133,-134,-135,-136,-137,-150,-142,-151,-159,-160,-161,-162,-143,-152,-163,-155,278,-157,-153,278,-139,-156,-158,-138,-154,-141,-140,]),'DEFAULT':([169,170,171,172,173,174,225,229,235,236,237,254,263,264,265,266,271,273,275,276,277,280,281,283,286,288,289,],[-133,-134,-135,-136,-137,-150,-142,-151,-159,-160,-161,-162,-143,-152,-163,-155,279,-157,-153,279,-139,-156,-158,-138,-154,-141,-140,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,16,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,101,165,226,248,],[5,5,168,168,168,168,]),'type_specifier':([0,2,28,41,59,93,99,101,129,131,165,226,248,],[6,6,43,95,135,95,43,175,135,135,175,175,175,]),'struct_specifier':([0,2,101,165,226,248,],[7,7,7,7,7,7,]),'declarator':([6,32,36,43,95,175,222,],[17,88,90,96,158,88,247,]),'init_declarator_list':([6,175,],[18,18,]),'pointer':([6,32,36,43,95,135,175,222,],[19,19,19,19,19,201,19,19,]),'no_pointer':([6,32,36,43,95,175,222,],[20,20,20,20,20,20,20,]),'init_declarator':([6,32,175,],[21,87,21,]),'auto_declarator_list':([8,],[24,]),'auto_declarator':([8,39,],[25,91,]),'func_scope':([17,],[28,]),'direct_declarator':([19,20,],[33,37,]),'add_sym_struct':([27,239,],[41,41,]),'parameter_type_list':([28,],[44,]),'func_rparen_2':([28,],[45,]),'parameter_declaration':([28,99,],[47,161,]),'assignment_expression':([29,40,59,101,104,116,121,125,129,131,165,180,184,199,226,230,231,232,234,243,248,253,258,260,261,262,268,270,274,285,287,],[49,92,134,134,187,134,194,134,134,134,134,134,134,245,134,134,134,134,134,256,134,134,134,134,134,134,134,134,134,134,134,]),'conditional_expression':([29,40,59,101,104,116,120,121,125,129,131,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[50,50,50,50,50,50,191,50,50,50,50,50,50,50,50,50,50,50,50,50,255,50,50,50,50,50,50,50,50,50,50,191,50,50,]),'unary_expression':([29,40,54,55,56,58,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,165,180,184,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[51,51,124,126,128,130,51,51,51,51,128,128,51,51,51,51,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,51,51,51,51,128,51,51,51,51,51,128,51,51,51,51,51,51,51,51,51,51,128,51,51,]),'logical_or_expression':([29,40,59,101,104,116,120,121,125,129,131,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'postfix_expression':([29,40,54,55,56,58,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,165,180,184,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([29,40,54,55,56,58,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,165,180,184,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'cast_expression':([29,40,56,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,165,180,184,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[57,57,127,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,216,217,218,57,57,57,57,246,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'logical_and_expression':([29,40,59,101,104,116,117,120,121,125,129,131,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[60,60,60,60,60,60,189,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'primary_expression':([29,40,54,55,56,58,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,165,180,184,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'inclusive_or_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[69,69,69,69,69,69,69,69,69,69,69,69,202,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'exclusive_or_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,137,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[80,80,80,80,80,80,80,80,80,80,80,80,80,203,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'and_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,137,138,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,204,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'equality_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,137,138,139,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,205,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'relational_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,206,207,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'shift_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,208,209,210,211,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'additive_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,212,213,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'multiplicative_expression':([29,40,59,101,104,116,117,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,165,180,184,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,285,287,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,214,215,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'struct_declaration_list':([41,],[93,]),'struct_declaration':([41,93,],[94,156,]),'func_rparen_1':([44,],[97,]),'function_body':([45,97,],[100,159,]),'assignment_operator':([51,],[104,]),'expression':([59,101,116,125,129,131,165,180,184,226,230,231,232,234,248,253,258,260,261,262,268,270,274,285,287,],[132,176,188,132,132,132,176,176,238,176,249,250,251,176,176,176,176,176,267,269,176,176,176,176,176,]),'type_name':([59,129,131,],[133,133,197,]),'pop_sym':([93,100,102,159,160,248,276,],[155,162,186,223,224,257,282,]),'struct_declarator_list':([95,],[157,]),'block_item_list':([101,226,],[165,248,]),'block_item':([101,165,226,248,],[166,228,166,228,]),'statement':([101,165,180,226,248,258,260,268,270,274,285,287,],[167,167,233,167,167,264,266,273,275,281,288,289,]),'compound_statement':([101,165,180,226,248,258,260,268,270,274,285,287,],[169,169,169,169,169,169,169,169,169,169,169,169,]),'expression_statement':([101,165,180,226,234,248,253,258,260,268,270,274,285,287,],[170,170,170,170,253,170,262,170,170,170,170,170,170,170,]),'selection_statement':([101,165,180,226,248,258,260,268,270,274,285,287,],[171,171,171,171,171,171,171,171,171,171,171,171,]),'iteration_statement':([101,165,180,226,248,258,260,268,270,274,285,287,],[172,172,172,172,172,172,172,172,172,172,172,172,]),'jump_statement':([101,165,180,226,248,258,260,268,270,274,285,287,],[173,173,173,173,173,173,173,173,173,173,173,173,]),'constant_expression':([120,278,],[190,284,]),'argument_expression_list':([121,],[193,]),'add_sym':([163,265,],[226,271,]),'labeled_statement_list':([271,],[276,]),'labeled_statement':([271,276,],[277,283,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',30),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',39),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',40),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',47),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',48),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',62),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',63),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym','function_definition',7,'p_function_definition_1','cparser.py',93),
  ('function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym','function_definition',6,'p_function_definition_1','cparser.py',94),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',116),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',134),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',170),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',206),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',207),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',208),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',209),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',210),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',211),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',212),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',213),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',214),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',215),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',216),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',217),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',272),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',273),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',274),
  ('postfix_expression -> postfix_expression L_SQBR constant_expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',344),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',428),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',429),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',513),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',563),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',606),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',607),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',627),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',634),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',635),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',643),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',651),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',652),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',664),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',665),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',666),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',667),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',668),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',669),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',676),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',677),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',698),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',699),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',700),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',712),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',722),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',723),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',724),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',736),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',737),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',738),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',751),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',752),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',753),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',754),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',755),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',768),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',769),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',770),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',782),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',783),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',797),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',798),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',813),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',814),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',828),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',829),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',842),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',843),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',858),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',859),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',915),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',916),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',930),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',931),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',932),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',933),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',934),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',935),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',936),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',937),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',938),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',939),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',940),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',947),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',948),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',967),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',978),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',979),
  ('declaration -> AUTO auto_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',980),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',993),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',994),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',1002),
  ('init_declarator -> declarator ASSIGNMENT assignment_expression','init_declarator',3,'p_init_declarator','cparser.py',1003),
  ('auto_declarator_list -> auto_declarator','auto_declarator_list',1,'p_auto_declarator_list','cparser.py',1083),
  ('auto_declarator_list -> auto_declarator_list COMMA auto_declarator','auto_declarator_list',3,'p_auto_declarator_list','cparser.py',1084),
  ('auto_declarator -> IDENTIFIER ASSIGNMENT assignment_expression','auto_declarator',3,'p_auto_declarator','cparser.py',1091),
  ('auto_declarator -> IDENTIFIER','auto_declarator',1,'p_auto_declarator','cparser.py',1092),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',1134),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',1135),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',1136),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',1137),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',1138),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1139),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',1140),
  ('struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES','struct_specifier',6,'p_struct_specifier','cparser.py',1162),
  ('add_sym_struct -> L_BRACES','add_sym_struct',1,'p_add_sym_struct','cparser.py',1169),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',1177),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',1178),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',1189),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',1197),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',1198),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1242),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1243),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',1253),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',1254),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',1255),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',1290),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',1291),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',1318),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1336),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1337),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1347),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1363),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1364),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1377),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1378),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1379),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1380),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1381),
  ('labeled_statement_list -> labeled_statement_list labeled_statement','labeled_statement_list',2,'p_labeled_statement_list','cparser.py',1389),
  ('labeled_statement_list -> labeled_statement','labeled_statement_list',1,'p_labeled_statement_list','cparser.py',1390),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1399),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1400),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1433),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1434),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1447),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1448),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1462),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1463),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1470),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1471),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1483),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1484),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1494),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1495),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES','selection_statement',9,'p_selection_statement','cparser.py',1496),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1576),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1577),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1578),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1579),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1670),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1671),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1680),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1681),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1727),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1738),
]
