
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym\n                        | type_specifier declarator func_scope R_PAREN function_body pop_sym\n    \n    func_scope : L_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | NULL\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : struct_declarator\n\t                       | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR assignment_expression R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n    \n    pointer : MULTIPLY\n            | MULTIPLY pointer\n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | pointer type_specifier\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n                      | CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : GOTO IDENTIFIER SEMI_COLON\n\t               | CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[9,9,-2,-4,-5,-3,-126,-91,-92,9,-8,-93,-127,-169,9,9,9,-170,9,9,9,9,-126,9,-109,-170,-7,-169,-149,9,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,9,-150,-152,-156,-165,-166,-167,-111,9,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'CHAR':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[10,10,-2,-4,-5,-3,-126,-91,-92,10,-8,-93,-127,-169,10,10,10,-170,10,10,10,10,-126,10,-109,-170,-7,-169,-149,10,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,10,-150,-152,-156,-165,-166,-167,-111,10,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'SHORT':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[11,11,-2,-4,-5,-3,-126,-91,-92,11,-8,-93,-127,-169,11,11,11,-170,11,11,11,11,-126,11,-109,-170,-7,-169,-149,11,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,11,-150,-152,-156,-165,-166,-167,-111,11,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'INT':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[12,12,-2,-4,-5,-3,-126,-91,-92,12,-8,-93,-127,-169,12,12,12,-170,12,12,12,12,-126,12,-109,-170,-7,-169,-149,12,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,12,-150,-152,-156,-165,-166,-167,-111,12,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'LONG':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[13,13,-2,-4,-5,-3,-126,-91,-92,13,-8,-93,-127,-169,13,13,13,-170,13,13,13,13,-126,13,-109,-170,-7,-169,-149,13,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,13,-150,-152,-156,-165,-166,-167,-111,13,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'FLOAT':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[14,14,-2,-4,-5,-3,-126,-91,-92,14,-8,-93,-127,-169,14,14,14,-170,14,14,14,14,-126,14,-109,-170,-7,-169,-149,14,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,14,-150,-152,-156,-165,-166,-167,-111,14,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'DOUBLE':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[15,15,-2,-4,-5,-3,-126,-91,-92,15,-8,-93,-127,-169,15,15,15,-170,15,15,15,15,-126,15,-109,-170,-7,-169,-149,15,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,15,-150,-152,-156,-165,-166,-167,-111,15,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'STRUCT':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[16,16,-2,-4,-5,-3,-126,-91,-92,47,-8,-93,-127,-169,47,47,47,-170,195,47,47,47,-126,47,-109,-170,-7,-169,-149,195,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,195,-150,-152,-156,-165,-166,-167,-111,195,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'ENUM':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[17,17,-2,-4,-5,-3,-126,-91,-92,48,-8,-93,-127,-169,48,48,48,-170,196,48,48,48,-126,48,-109,-170,-7,-169,-149,196,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,196,-150,-152,-156,-165,-166,-167,-111,196,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'BOOL':([0,2,3,4,5,19,25,28,29,32,34,35,39,41,61,94,100,101,102,132,134,139,140,159,160,165,167,168,169,170,171,172,173,174,175,176,177,178,179,180,231,238,239,240,241,242,246,253,254,255,269,271,272,274,280,281,286,292,293,294,295,301,303,304,305,],[18,18,-2,-4,-5,-3,-126,-91,-92,18,-8,-93,-127,-169,18,18,18,-170,18,18,18,18,-126,18,-109,-170,-7,-169,-149,18,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-110,-6,-147,18,-150,-152,-156,-165,-166,-167,-111,18,-144,-146,-164,-168,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'$end':([1,2,3,4,5,19,28,29,35,101,165,167,169,238,241,],[0,-1,-2,-4,-5,-3,-91,-92,-93,-170,-170,-7,-149,-6,-150,]),'MULTIPLY':([6,9,10,11,12,13,14,15,18,25,27,28,29,30,31,33,35,36,38,43,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,88,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,161,162,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,189,194,198,203,206,207,209,210,211,225,226,227,228,229,239,240,242,243,245,246,247,248,249,251,253,254,255,257,258,261,262,263,264,265,267,270,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[25,-98,-99,-100,-101,-102,-103,-104,-107,25,25,-91,-92,-105,-106,66,-93,25,66,25,66,-43,-31,66,66,66,-45,66,140,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,155,66,-105,-106,66,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,66,66,66,66,-27,-28,-32,66,-33,-34,-43,140,-35,140,25,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,25,66,-169,66,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,25,-9,66,66,66,66,-23,-25,-26,-18,66,66,155,155,-46,-47,-48,-147,66,-152,66,66,-156,66,66,66,66,-165,-166,-167,-105,-106,66,-22,-24,66,-36,-44,25,66,-144,66,-146,66,-164,-168,-145,66,66,66,66,66,-148,-157,-159,-160,66,66,-162,66,-158,-161,-163,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,18,22,25,27,28,29,30,31,33,35,36,38,39,42,43,47,48,51,56,57,58,60,61,65,66,67,68,69,70,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,161,162,164,168,170,171,172,173,174,175,176,177,178,179,180,181,183,189,191,194,195,196,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,257,258,261,264,270,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[26,-98,-99,-100,-101,-102,-103,-104,30,31,-107,26,-126,26,-91,-92,-105,-106,64,-93,26,64,-127,95,26,103,104,64,64,64,64,64,64,-37,-38,-39,-40,-41,-42,182,-105,-106,64,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,64,64,64,64,206,207,64,64,64,-38,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,26,64,95,-169,182,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,26,64,182,252,64,257,258,64,64,64,-147,182,-152,182,182,-156,64,64,64,64,-165,-166,-167,-105,-106,64,64,26,182,-144,182,-146,64,-164,-168,-145,182,182,182,64,64,-148,-157,-159,-160,182,182,-162,182,-158,-161,-163,]),'L_PAREN':([6,9,10,11,12,13,14,15,18,20,22,23,25,26,27,28,29,30,31,33,35,36,37,38,39,43,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,92,93,102,103,104,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,161,162,168,170,171,172,173,174,175,176,177,178,179,180,181,182,183,186,187,188,189,190,194,198,203,206,207,209,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,257,258,261,262,263,264,270,271,272,273,274,278,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[27,-98,-99,-100,-101,-102,-103,-104,-107,34,27,-121,-126,-122,27,-91,-92,-105,-106,61,-93,27,-120,61,-127,27,61,122,128,128,132,134,61,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-125,-123,61,-105,-106,61,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,61,132,61,61,-27,-28,61,61,61,-38,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,-124,27,132,-169,61,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,27,-9,132,247,248,249,61,251,61,61,-23,-25,-26,-18,61,132,-147,61,-152,61,61,-156,61,61,61,61,-165,-166,-167,-105,-106,132,-22,-24,61,27,61,-144,61,-146,290,61,-164,-168,-145,61,61,61,61,61,-148,-157,-159,-160,61,61,-162,61,-158,-161,-163,]),'SEMI_COLON':([7,8,20,21,23,24,26,28,29,35,37,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,102,125,126,127,129,130,131,133,137,158,163,168,170,171,172,173,174,175,176,177,178,179,180,182,185,189,192,193,194,197,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,232,233,234,239,240,242,243,245,246,251,252,253,254,255,256,259,262,263,265,266,267,268,271,272,273,274,279,280,281,282,284,286,287,288,289,292,293,294,295,297,299,300,301,302,303,304,305,],[28,29,-96,35,-121,-94,-122,-91,-92,-93,-120,-97,-133,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-95,-96,-125,-123,180,-27,-28,-32,-33,-34,-43,-35,-88,-124,-115,-169,180,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-9,246,180,253,254,255,-134,-76,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,269,-112,-114,-147,180,-152,180,180,-156,180,280,-165,-166,-167,281,-135,-22,-24,-36,-89,-44,-108,180,-144,180,-146,180,-164,-168,-74,-113,-145,180,180,180,-148,-157,-159,-160,180,180,304,-162,180,-158,-161,-163,]),'R_PAREN':([9,10,11,12,13,14,15,18,23,26,32,34,37,40,44,46,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,98,103,104,122,125,126,127,129,130,131,133,135,136,137,138,158,166,180,199,201,203,204,205,206,207,208,209,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,246,262,263,265,266,267,275,276,277,282,283,291,296,298,],[-98,-99,-100,-101,-102,-103,-104,-107,-121,-122,45,-8,-120,93,99,-128,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-125,-123,-130,-105,-106,203,-27,-28,-32,-33,-34,-43,-35,209,211,-88,-131,-124,-129,-155,-76,-72,-23,263,-29,-25,-26,265,-18,-132,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-156,-22,-24,-36,-89,-44,287,288,289,-74,-30,297,300,302,]),'COMMA':([20,21,23,24,26,37,44,46,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,92,93,95,96,97,98,105,106,125,126,127,129,130,131,133,135,137,158,166,182,185,197,199,200,201,202,203,204,205,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,232,233,234,235,236,237,256,259,260,262,263,265,266,267,275,276,277,282,283,284,296,298,],[-96,36,-121,-94,-122,-120,100,-128,-97,-133,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-95,-96,-125,-123,-118,164,-116,-130,198,-136,-27,-28,-32,-33,-34,-43,-35,210,-88,-124,-129,-9,210,-134,-76,210,-72,210,-23,264,-29,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,270,-112,-114,-119,-90,-117,210,-135,-137,-22,-24,-36,-89,-44,210,210,210,-74,-30,-113,210,210,]),'ASSIGNMENT':([20,23,26,37,53,55,63,64,72,73,74,75,76,77,78,79,80,81,90,92,93,95,125,126,127,129,130,131,133,158,182,203,206,207,209,262,263,265,267,],[33,-121,-122,-120,108,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,33,-125,-123,162,-27,-28,-32,-33,-34,-43,-35,-124,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'L_SQBR':([23,26,37,55,63,64,72,73,74,75,76,77,78,79,80,81,92,93,125,126,158,182,203,206,207,209,262,263,],[38,-122,38,121,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-125,-123,-27,-28,-124,-9,-23,-25,-26,-18,-22,-24,]),'R_BRACES':([28,29,35,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,95,96,97,102,105,106,125,126,127,129,130,131,133,159,160,168,170,171,172,173,174,175,176,177,178,179,180,197,198,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,235,236,237,239,242,246,253,254,255,259,260,262,263,265,267,269,271,272,274,280,281,282,285,286,292,293,294,295,301,303,304,305,],[-91,-92,-93,-133,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-118,163,-116,169,197,-136,-27,-28,-32,-33,-34,-43,-35,-170,-109,239,241,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-134,259,-76,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,268,-110,-119,-90,-117,-147,-152,-156,-165,-166,-167,-135,-137,-22,-24,-36,-44,-111,-170,-144,-146,-164,-168,-74,292,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'CASE':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,183,-169,183,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,183,-147,183,-152,183,183,-156,-165,-166,-167,183,-144,183,-146,-164,-168,-145,183,183,183,-148,-157,-159,-160,183,183,-162,183,-158,-161,-163,]),'DEFAULT':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,184,-169,184,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,184,-147,184,-152,184,184,-156,-165,-166,-167,184,-144,184,-146,-164,-168,-145,184,184,184,-148,-157,-159,-160,184,184,-162,184,-158,-161,-163,]),'L_BRACES':([28,29,30,31,33,35,45,51,99,102,168,170,171,172,173,174,175,176,177,178,179,180,189,198,239,240,242,243,245,246,253,254,255,257,258,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,41,42,51,-93,102,51,102,168,-169,168,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,168,51,-147,168,-152,168,168,-156,-165,-166,-167,41,42,168,-144,168,-146,-164,-168,-145,168,168,168,-148,-157,-159,-160,168,168,-162,168,-158,-161,-163,]),'IF':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,186,-169,186,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,186,-147,186,-152,186,186,-156,-165,-166,-167,186,-144,186,-146,-164,-168,-145,186,186,186,-148,-157,-159,-160,186,186,-162,186,-158,-161,-163,]),'SWITCH':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,187,-169,187,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,187,-147,187,-152,187,187,-156,-165,-166,-167,187,-144,187,-146,-164,-168,-145,187,187,187,-148,-157,-159,-160,187,187,-162,187,-158,-161,-163,]),'WHILE':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,250,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,188,-169,188,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,188,-147,188,-152,188,188,-156,278,-165,-166,-167,188,-144,188,-146,-164,-168,-145,188,188,188,-148,-157,-159,-160,188,188,-162,188,-158,-161,-163,]),'DO':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,189,-169,189,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,189,-147,189,-152,189,189,-156,-165,-166,-167,189,-144,189,-146,-164,-168,-145,189,189,189,-148,-157,-159,-160,189,189,-162,189,-158,-161,-163,]),'FOR':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,190,-169,190,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,190,-147,190,-152,190,190,-156,-165,-166,-167,190,-144,190,-146,-164,-168,-145,190,190,190,-148,-157,-159,-160,190,190,-162,190,-158,-161,-163,]),'GOTO':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,191,-169,191,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,191,-147,191,-152,191,191,-156,-165,-166,-167,191,-144,191,-146,-164,-168,-145,191,191,191,-148,-157,-159,-160,191,191,-162,191,-158,-161,-163,]),'CONTINUE':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,192,-169,192,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,192,-147,192,-152,192,192,-156,-165,-166,-167,192,-144,192,-146,-164,-168,-145,192,192,192,-148,-157,-159,-160,192,192,-162,192,-158,-161,-163,]),'BREAK':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,193,-169,193,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,193,-147,193,-152,193,193,-156,-165,-166,-167,193,-144,193,-146,-164,-168,-145,193,193,193,-148,-157,-159,-160,193,193,-162,193,-158,-161,-163,]),'RETURN':([28,29,35,102,168,170,171,172,173,174,175,176,177,178,179,180,189,239,240,242,243,245,246,253,254,255,271,272,273,274,280,281,286,287,288,289,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,-93,194,-169,194,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,194,-147,194,-152,194,194,-156,-165,-166,-167,194,-144,194,-146,-164,-168,-145,194,194,194,-148,-157,-159,-160,194,194,-162,194,-158,-161,-163,]),'INCREMENT':([28,29,33,35,38,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,182,183,189,194,198,203,206,207,209,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,262,263,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,56,-93,56,56,125,56,56,56,56,56,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,56,56,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,56,56,56,56,-27,-28,56,56,56,-38,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-169,56,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-9,56,56,56,56,-23,-25,-26,-18,56,56,-147,56,-152,56,56,-156,56,56,56,56,-165,-166,-167,56,-22,-24,56,56,-144,56,-146,56,-164,-168,-145,56,56,56,56,56,-148,-157,-159,-160,56,56,-162,56,-158,-161,-163,]),'DECREMENT':([28,29,33,35,38,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,182,183,189,194,198,203,206,207,209,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,262,263,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,57,-93,57,57,126,57,57,57,57,57,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,57,57,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,57,57,57,57,-27,-28,57,57,57,-38,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-169,57,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-9,57,57,57,57,-23,-25,-26,-18,57,57,-147,57,-152,57,57,-156,57,57,57,57,-165,-166,-167,57,-22,-24,57,57,-144,57,-146,57,-164,-168,-145,57,57,57,57,57,-148,-157,-159,-160,57,57,-162,57,-158,-161,-163,]),'SIZEOF':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,60,-93,60,60,60,60,60,60,60,-37,-38,-39,-40,-41,-42,60,60,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,60,60,60,60,60,60,60,-38,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-169,60,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,60,60,60,60,60,60,-147,60,-152,60,60,-156,60,60,60,60,-165,-166,-167,60,60,60,-144,60,-146,60,-164,-168,-145,60,60,60,60,60,-148,-157,-159,-160,60,60,-162,60,-158,-161,-163,]),'BITWISE_AND':([28,29,33,35,38,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,83,84,85,86,87,88,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,182,183,189,194,198,203,206,207,209,210,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,239,240,242,243,245,246,247,248,249,251,253,254,255,261,262,263,264,265,267,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,65,-93,65,65,-43,-31,65,65,65,-45,65,65,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,144,-63,-60,-55,-52,-49,65,65,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,65,65,65,65,-27,-28,-32,65,-33,-34,-43,65,-35,65,-38,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-169,65,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-9,65,65,65,65,-23,-25,-26,-18,65,65,144,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-147,65,-152,65,65,-156,65,65,65,65,-165,-166,-167,65,-22,-24,65,-36,-44,65,-144,65,-146,65,-164,-168,-145,65,65,65,65,65,-148,-157,-159,-160,65,65,-162,65,-158,-161,-163,]),'ADD':([28,29,33,35,38,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,87,88,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,182,183,189,194,198,203,206,207,209,210,211,223,224,225,226,227,228,229,239,240,242,243,245,246,247,248,249,251,253,254,255,261,262,263,264,265,267,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,67,-93,67,67,-43,-31,67,67,67,-45,67,67,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,153,-49,67,67,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,67,67,67,67,-27,-28,-32,67,-33,-34,-43,67,-35,67,-38,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-169,67,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-9,67,67,67,67,-23,-25,-26,-18,67,67,153,153,-50,-51,-46,-47,-48,-147,67,-152,67,67,-156,67,67,67,67,-165,-166,-167,67,-22,-24,67,-36,-44,67,-144,67,-146,67,-164,-168,-145,67,67,67,67,67,-148,-157,-159,-160,67,67,-162,67,-158,-161,-163,]),'SUBSTRACT':([28,29,33,35,38,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,81,87,88,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,182,183,189,194,198,203,206,207,209,210,211,223,224,225,226,227,228,229,239,240,242,243,245,246,247,248,249,251,253,254,255,261,262,263,264,265,267,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,68,-93,68,68,-43,-31,68,68,68,-45,68,68,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,154,-49,68,68,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,68,68,68,68,-27,-28,-32,68,-33,-34,-43,68,-35,68,-38,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-169,68,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,-9,68,68,68,68,-23,-25,-26,-18,68,68,154,154,-50,-51,-46,-47,-48,-147,68,-152,68,68,-156,68,68,68,68,-165,-166,-167,68,-22,-24,68,-36,-44,68,-144,68,-146,68,-164,-168,-145,68,68,68,68,68,-148,-157,-159,-160,68,68,-162,68,-158,-161,-163,]),'BITWISE_ONE_COMPLEMENT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,69,-93,69,69,69,69,69,69,69,-37,-38,-39,-40,-41,-42,69,69,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,69,69,69,69,69,69,69,-38,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-169,69,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,69,69,69,69,69,69,-147,69,-152,69,69,-156,69,69,69,69,-165,-166,-167,69,69,69,-144,69,-146,69,-164,-168,-145,69,69,69,69,69,-148,-157,-159,-160,69,69,-162,69,-158,-161,-163,]),'LOGICAL_NOT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,70,-93,70,70,70,70,70,70,70,-37,-38,-39,-40,-41,-42,70,70,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,70,70,70,70,70,70,70,-38,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-169,70,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,70,70,70,70,70,70,-147,70,-152,70,70,-156,70,70,70,70,-165,-166,-167,70,70,70,-144,70,-146,70,-164,-168,-145,70,70,70,70,70,-148,-157,-159,-160,70,70,-162,70,-158,-161,-163,]),'NULL':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,72,-93,72,72,72,72,72,72,72,-37,-38,-39,-40,-41,-42,72,72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,72,72,72,72,72,72,72,-38,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-169,72,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,72,72,72,72,72,72,-147,72,-152,72,72,-156,72,72,72,72,-165,-166,-167,72,72,72,-144,72,-146,72,-164,-168,-145,72,72,72,72,72,-148,-157,-159,-160,72,72,-162,72,-158,-161,-163,]),'INT_CONSTANT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,73,-93,73,73,73,73,73,73,73,-37,-38,-39,-40,-41,-42,73,73,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,73,73,73,73,73,73,73,-38,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-169,73,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,73,73,73,73,73,73,-147,73,-152,73,73,-156,73,73,73,73,-165,-166,-167,73,73,73,-144,73,-146,73,-164,-168,-145,73,73,73,73,73,-148,-157,-159,-160,73,73,-162,73,-158,-161,-163,]),'HEX_CONSTANT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,74,-93,74,74,74,74,74,74,74,-37,-38,-39,-40,-41,-42,74,74,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,74,74,74,74,74,74,74,-38,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-169,74,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,74,74,74,74,74,74,-147,74,-152,74,74,-156,74,74,74,74,-165,-166,-167,74,74,74,-144,74,-146,74,-164,-168,-145,74,74,74,74,74,-148,-157,-159,-160,74,74,-162,74,-158,-161,-163,]),'OCTAL_CONSTANT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,75,-93,75,75,75,75,75,75,75,-37,-38,-39,-40,-41,-42,75,75,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,75,75,75,75,75,75,75,-38,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-169,75,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,75,75,75,75,75,75,-147,75,-152,75,75,-156,75,75,75,75,-165,-166,-167,75,75,75,-144,75,-146,75,-164,-168,-145,75,75,75,75,75,-148,-157,-159,-160,75,75,-162,75,-158,-161,-163,]),'EXPONENT_CONSTANT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,76,-93,76,76,76,76,76,76,76,-37,-38,-39,-40,-41,-42,76,76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,76,76,76,76,76,76,76,-38,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-169,76,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,76,76,76,76,76,76,-147,76,-152,76,76,-156,76,76,76,76,-165,-166,-167,76,76,76,-144,76,-146,76,-164,-168,-145,76,76,76,76,76,-148,-157,-159,-160,76,76,-162,76,-158,-161,-163,]),'REAL_CONSTANT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,77,-93,77,77,77,77,77,77,77,-37,-38,-39,-40,-41,-42,77,77,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,77,77,77,77,77,77,77,-38,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-169,77,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,77,77,77,77,77,77,-147,77,-152,77,77,-156,77,77,77,77,-165,-166,-167,77,77,77,-144,77,-146,77,-164,-168,-145,77,77,77,77,77,-148,-157,-159,-160,77,77,-162,77,-158,-161,-163,]),'CHAR_CONSTANT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,78,-93,78,78,78,78,78,78,78,-37,-38,-39,-40,-41,-42,78,78,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,78,78,78,78,78,78,78,-38,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-169,78,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,78,78,78,78,78,78,-147,78,-152,78,78,-156,78,78,78,78,-165,-166,-167,78,78,78,-144,78,-146,78,-164,-168,-145,78,78,78,78,78,-148,-157,-159,-160,78,78,-162,78,-158,-161,-163,]),'STR_CONSTANT':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,79,-93,79,79,79,79,79,79,79,-37,-38,-39,-40,-41,-42,79,79,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,79,79,79,79,79,79,79,-38,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-169,79,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,79,79,79,79,79,79,-147,79,-152,79,79,-156,79,79,79,79,-165,-166,-167,79,79,79,-144,79,-146,79,-164,-168,-145,79,79,79,79,79,-148,-157,-159,-160,79,79,-162,79,-158,-161,-163,]),'TRUE':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,80,-93,80,80,80,80,80,80,80,-37,-38,-39,-40,-41,-42,80,80,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,80,80,80,80,80,80,80,-38,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-169,80,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,80,80,80,80,80,80,-147,80,-152,80,80,-156,80,80,80,80,-165,-166,-167,80,80,80,-144,80,-146,80,-164,-168,-145,80,80,80,80,80,-148,-157,-159,-160,80,80,-162,80,-158,-161,-163,]),'FALSE':([28,29,33,35,38,51,56,57,58,60,61,65,66,67,68,69,70,102,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,168,170,171,172,173,174,175,176,177,178,179,180,183,189,194,198,210,211,239,240,242,243,245,246,247,248,249,251,253,254,255,261,264,271,272,273,274,279,280,281,286,287,288,289,290,291,292,293,294,295,297,299,301,302,303,304,305,],[-91,-92,81,-93,81,81,81,81,81,81,81,-37,-38,-39,-40,-41,-42,81,81,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,81,81,81,81,81,81,81,-38,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-169,81,-151,-153,-154,-138,-139,-140,-141,-142,-143,-155,81,81,81,81,81,81,-147,81,-152,81,81,-156,81,81,81,81,-165,-166,-167,81,81,81,-144,81,-146,81,-164,-168,-145,81,81,81,81,81,-148,-157,-159,-160,81,81,-162,81,-158,-161,-163,]),'R_SQBR':([38,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,91,125,126,127,129,130,131,133,137,199,201,202,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,266,267,282,],[92,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,158,-27,-28,-32,-33,-34,-43,-35,-88,-76,-72,262,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-89,-44,-74,]),'COLON':([52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,125,126,127,129,130,131,133,137,182,184,199,200,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,236,244,262,263,265,266,267,282,],[-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-88,243,245,-76,261,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-90,273,-22,-24,-36,-89,-44,-74,]),'DIVIDE':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,88,125,126,127,129,130,131,133,182,203,206,207,209,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,156,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,156,156,-46,-47,-48,-22,-24,-36,-44,]),'MODULUS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,88,125,126,127,129,130,131,133,182,203,206,207,209,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,157,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,157,157,-46,-47,-48,-22,-24,-36,-44,]),'LEFT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,151,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,151,151,151,151,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'RIGHT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,152,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,152,152,152,152,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LESS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,147,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,147,147,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'GREATER':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,148,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,148,148,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LESS_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,149,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,149,149,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'GREATER_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,150,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,150,150,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,145,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,145,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'NOT_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,84,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,146,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,146,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'BITWISE_XOR':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,143,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,143,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'BITWISE_OR':([53,55,59,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,125,126,127,129,130,131,133,182,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,-21,-9,142,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,142,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LOGICAL_AND':([53,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,125,126,127,129,130,131,133,182,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,-31,-45,141,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,141,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'QUES_MARK':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,125,126,127,129,130,131,133,182,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,119,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LOGICAL_OR':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,125,126,127,129,130,131,133,182,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,262,263,265,267,],[-43,120,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'MULTIPLY_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[109,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'DIVIDE_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[110,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'MODULUS_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[111,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'ADD_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[112,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'SUBSTRACT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[113,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'LEFT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[114,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'RIGHT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[115,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'BITWISE_AND_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[116,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'BITWISE_XOR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[117,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'BITWISE_OR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,127,129,130,131,133,182,203,206,207,209,262,263,265,267,],[118,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'DOT':([55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,182,203,206,207,209,262,263,],[123,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-9,-23,-25,-26,-18,-22,-24,]),'ARROW':([55,63,64,72,73,74,75,76,77,78,79,80,81,125,126,182,203,206,207,209,262,263,],[124,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-9,-23,-25,-26,-18,-22,-24,]),'ELSE':([174,175,176,177,178,179,180,239,246,253,254,255,272,274,280,281,286,292,293,294,295,301,303,304,305,],[-138,-139,-140,-141,-142,-143,-155,-147,-156,-165,-166,-167,-144,-146,-164,-168,-145,-148,299,-159,-160,-162,-158,-161,-163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,19,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,102,170,240,271,],[5,5,173,173,173,173,]),'type_specifier':([0,2,32,61,94,100,102,132,134,139,159,170,240,271,],[6,6,43,138,161,43,181,138,138,212,161,181,181,181,]),'struct_specifier':([0,2,102,170,240,271,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,102,170,240,271,],[8,8,8,8,8,8,]),'declarator':([6,27,36,43,161,181,270,],[20,40,90,98,234,90,234,]),'init_declarator_list':([6,181,],[21,21,]),'pointer':([6,25,27,36,43,61,132,134,140,161,181,270,],[22,39,22,22,22,139,139,139,39,22,22,22,]),'direct_declarator':([6,22,27,36,43,161,181,270,],[23,37,23,23,23,23,23,23,]),'init_declarator':([6,36,181,],[24,89,24,]),'func_scope':([20,],[32,]),'parameter_type_list':([32,],[44,]),'parameter_declaration':([32,100,],[46,166,]),'initializer':([33,51,198,],[49,106,260,]),'assignment_expression':([33,38,51,61,102,107,119,121,122,128,132,134,170,189,194,198,210,240,243,245,247,248,249,251,264,271,273,279,287,288,289,290,291,297,299,302,],[50,91,50,137,137,199,137,137,205,137,137,137,137,137,137,50,266,137,137,137,137,137,137,137,283,137,137,137,137,137,137,137,137,137,137,137,]),'conditional_expression':([33,38,51,61,102,107,119,121,122,128,132,134,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[52,52,52,52,52,52,52,52,52,52,52,52,236,52,236,52,52,52,52,52,52,52,52,52,52,52,282,52,52,52,52,52,52,52,52,52,52,52,52,]),'unary_expression':([33,38,51,56,57,58,60,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,170,183,189,194,198,210,211,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[53,53,53,127,129,131,133,53,53,53,53,131,53,53,53,53,53,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,53,131,53,53,53,53,131,53,53,53,53,53,53,53,131,53,53,53,53,53,53,53,53,53,53,53,53,]),'logical_or_expression':([33,38,51,61,102,107,119,121,122,128,132,134,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'postfix_expression':([33,38,51,56,57,58,60,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,170,183,189,194,198,210,211,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'unary_operator':([33,38,51,56,57,58,60,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,170,183,189,194,198,210,211,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'cast_expression':([33,38,51,58,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,170,183,189,194,198,210,211,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[59,59,59,130,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,227,228,229,59,59,59,59,59,59,59,267,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'logical_and_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[62,62,62,62,62,62,62,201,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'primary_expression':([33,38,51,56,57,58,60,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,162,170,183,189,194,198,210,211,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'inclusive_or_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[71,71,71,71,71,71,71,71,71,71,71,71,71,213,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'exclusive_or_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,142,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,214,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'and_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,142,143,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,215,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'equality_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,142,143,144,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,216,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'relational_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,217,218,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'shift_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,219,220,221,222,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'additive_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,223,224,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'multiplicative_expression':([33,38,51,61,102,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,162,170,183,189,194,198,210,240,243,245,247,248,249,251,261,264,271,273,279,287,288,289,290,291,297,299,302,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,225,226,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'add_sym':([41,168,],[94,240,]),'enumerator_list':([42,],[96,]),'enumerator':([42,164,],[97,237,]),'function_body':([45,99,],[101,165,]),'initializer_list':([51,],[105,]),'assignment_operator':([53,],[107,]),'expression':([61,102,119,121,128,132,134,170,189,194,240,243,245,247,248,249,251,271,273,279,287,288,289,290,291,297,299,302,],[135,185,200,202,135,135,135,185,185,256,185,185,185,275,276,277,185,185,185,185,185,185,185,296,298,185,185,185,]),'type_name':([61,132,134,],[136,136,208,]),'struct_declaration_list':([94,],[159,]),'struct_declaration':([94,159,],[160,231,]),'pop_sym':([101,159,165,271,],[167,230,238,285,]),'block_item_list':([102,240,],[170,271,]),'block_item':([102,170,240,271,],[171,242,171,242,]),'statement':([102,170,189,240,243,245,271,273,287,288,289,297,299,302,],[172,172,250,172,272,274,172,286,293,294,295,301,303,305,]),'labeled_statement':([102,170,189,240,243,245,271,273,287,288,289,297,299,302,],[174,174,174,174,174,174,174,174,174,174,174,174,174,174,]),'compound_statement':([102,170,189,240,243,245,271,273,287,288,289,297,299,302,],[175,175,175,175,175,175,175,175,175,175,175,175,175,175,]),'expression_statement':([102,170,189,240,243,245,251,271,273,279,287,288,289,297,299,302,],[176,176,176,176,176,176,279,176,176,291,176,176,176,176,176,176,]),'selection_statement':([102,170,189,240,243,245,271,273,287,288,289,297,299,302,],[177,177,177,177,177,177,177,177,177,177,177,177,177,177,]),'iteration_statement':([102,170,189,240,243,245,271,273,287,288,289,297,299,302,],[178,178,178,178,178,178,178,178,178,178,178,178,178,178,]),'jump_statement':([102,170,189,240,243,245,271,273,287,288,289,297,299,302,],[179,179,179,179,179,179,179,179,179,179,179,179,179,179,]),'argument_expression_list':([122,],[204,]),'struct_declarator_list':([161,],[232,]),'struct_declarator':([161,270,],[233,284,]),'constant_expression':([162,183,],[235,244,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',26),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',32),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',33),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',40),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',41),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',48),
  ('function_definition -> type_specifier declarator func_scope R_PAREN function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',49),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',68),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',74),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',75),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',76),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',77),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',78),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',79),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',80),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',81),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',82),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',83),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',84),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',85),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',99),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',100),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',101),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',102),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',103),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',104),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',105),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',106),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',124),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',125),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',137),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',138),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',139),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',140),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',141),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',142),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',152),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',153),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',154),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',155),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',156),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',157),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',164),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',165),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',176),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',177),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',178),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',179),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',190),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',191),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',192),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',202),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',203),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',204),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',215),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',216),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',217),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',218),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',219),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',230),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',231),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',232),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',243),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',244),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',255),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',256),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',267),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',268),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',279),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',280),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',291),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',292),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',303),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',304),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',315),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',316),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',327),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',328),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',329),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',330),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',331),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',332),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',333),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',334),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',335),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',336),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',337),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',344),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',345),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',359),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',367),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',368),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',369),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',382),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',383),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',398),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',399),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',410),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',411),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',412),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',413),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',414),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',415),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',416),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',417),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',418),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',419),
  ('struct_specifier -> STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES','struct_specifier',7,'p_struct_specifier','cparser.py',432),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',441),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',442),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',449),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',457),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',458),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','cparser.py',465),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',474),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',481),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',482),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',489),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',490),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',498),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','cparser.py',499),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',514),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',515),
  ('direct_declarator -> direct_declarator L_SQBR assignment_expression R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',516),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',517),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',537),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer','cparser.py',538),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',555),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',556),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',569),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',585),
  ('type_name -> pointer type_specifier','type_name',2,'p_type_name','cparser.py',586),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',598),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',599),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',600),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',610),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',611),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',618),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',619),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',620),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',621),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',622),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',623),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',630),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',631),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',632),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',644),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',645),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',655),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',656),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',666),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',667),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',674),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',675),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',682),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',683),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',693),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',694),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',695),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',706),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',707),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',708),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',709),
  ('jump_statement -> GOTO IDENTIFIER SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',725),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',726),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',727),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',728),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',729),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',740),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',746),
]
