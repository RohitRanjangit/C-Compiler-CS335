
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BLOCK_COMMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INLINE_COMMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : declaration_specifiers declarator declaration_list compound_statement\n\t\t\t            | declaration_specifiers declarator compound_statement\n    \n    \n    function_definition : declarator declaration_list compound_statement\n\t\t\t            | declarator compound_statement\n    \n    \n    primary_expression : IDENTIFIER\n                       | NULL\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_specifier R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : declaration_specifiers SEMI_COLON\n\t            | declaration_specifiers init_declarator_list SEMI_COLON\n    \n    declaration_specifiers : storage_class_specifier\n                           | storage_class_specifier declaration_specifiers\n                           | type_specifier\n                           | type_specifier declaration_specifiers\n                           | type_qualifier\n                           | type_qualifier declaration_specifiers\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    storage_class_specifier : TYPEDEF\n                            | EXTERN\n                            | STATIC\n                            | AUTO\n                            | REGISTER\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | SIGNED\n                   | UNSIGNED\n                   | struct_or_union_specifier\n                   | enum_specifier\n                   | BOOL\n    \n    struct_or_union_specifier : struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES\n\t                          | struct_or_union L_BRACES struct_declaration_list R_BRACES\n\t                          | struct_or_union IDENTIFIER\n    \n    struct_or_union : STRUCT\n\t                | UNION\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI_COLON\n    \n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n                             | type_specifier\n                             | type_qualifier specifier_qualifier_list\n                             | type_qualifier\n    \n    struct_declarator_list : struct_declarator\n\t                       | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n                      | COLON constant_expression\n                      | declarator COLON constant_expression\n    \n    enum_specifier : ENUM L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    type_qualifier : CONST\n\t               | VOLATILE\n    \n    declarator : pointer direct_declarator\n\t           | direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR constant_expression R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n                      | direct_declarator L_PAREN parameter_type_list R_PAREN\n                      | direct_declarator L_PAREN identifier_list R_PAREN\n                      | direct_declarator L_PAREN R_PAREN\n    \n    pointer : MULTIPLY\n\t        | MULTIPLY type_qualifier_list\n            | MULTIPLY pointer\n            | MULTIPLY type_qualifier_list pointer\n    \n    type_qualifier_list : type_qualifier\n\t                    | type_qualifier_list type_qualifier\n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n\t                      | declaration_specifiers abstract_declarator\n\t                      | declaration_specifiers\n    \n    identifier_list : IDENTIFIER\n\t                | identifier_list COMMA IDENTIFIER\n    \n    type_name : specifier_qualifier_list\n\t          | specifier_qualifier_list abstract_declarator\n    \n    abstract_declarator : pointer\n\t                    | direct_abstract_declarator\n\t                    | pointer direct_abstract_declarator\n    \n    direct_abstract_declarator : L_PAREN abstract_declarator R_PAREN\n\t                           | L_SQBR R_SQBR\n\t                           | L_SQBR constant_expression R_SQBR\n\t                           | direct_abstract_declarator L_SQBR R_SQBR\n                               | direct_abstract_declarator L_SQBR constant_expression R_SQBR\n                               | L_PAREN R_PAREN\n                               | L_PAREN parameter_type_list R_PAREN\n                               | direct_abstract_declarator L_PAREN R_PAREN\n                               | direct_abstract_declarator L_PAREN parameter_type_list R_PAREN\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES statement_list R_BRACES\n\t                   | L_BRACES declaration_list R_BRACES\n\t                   | L_BRACES declaration_list statement_list R_BRACES\n    \n    declaration_list : declaration\n\t                 | declaration_list declaration\n    \n    statement_list : statement\n\t               | statement_list statement\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : GOTO IDENTIFIER SEMI_COLON\n\t               | CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    '
    
_lr_action_items = {'TYPEDEF':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,131,137,144,155,160,162,224,225,226,227,233,236,244,250,296,302,309,326,],[13,13,-2,-4,-5,13,13,13,13,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,13,-90,13,-9,-199,13,-145,13,-121,-138,13,-7,-91,-8,-200,-195,13,-150,-153,-148,-6,-196,-197,-149,-151,13,-152,13,-120,-136,-198,13,-119,-137,13,]),'EXTERN':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,131,137,144,155,160,162,224,225,226,227,233,236,244,250,296,302,309,326,],[14,14,-2,-4,-5,14,14,14,14,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,14,-90,14,-9,-199,14,-145,14,-121,-138,14,-7,-91,-8,-200,-195,14,-150,-153,-148,-6,-196,-197,-149,-151,14,-152,14,-120,-136,-198,14,-119,-137,14,]),'STATIC':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,131,137,144,155,160,162,224,225,226,227,233,236,244,250,296,302,309,326,],[15,15,-2,-4,-5,15,15,15,15,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,15,-90,15,-9,-199,15,-145,15,-121,-138,15,-7,-91,-8,-200,-195,15,-150,-153,-148,-6,-196,-197,-149,-151,15,-152,15,-120,-136,-198,15,-119,-137,15,]),'AUTO':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,131,137,144,155,160,162,224,225,226,227,233,236,244,250,296,302,309,326,],[16,16,-2,-4,-5,16,16,16,16,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,16,-90,16,-9,-199,16,-145,16,-121,-138,16,-7,-91,-8,-200,-195,16,-150,-153,-148,-6,-196,-197,-149,-151,16,-152,16,-120,-136,-198,16,-119,-137,16,]),'REGISTER':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,131,137,144,155,160,162,224,225,226,227,233,236,244,250,296,302,309,326,],[17,17,-2,-4,-5,17,17,17,17,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,17,-90,17,-9,-199,17,-145,17,-121,-138,17,-7,-91,-8,-200,-195,17,-150,-153,-148,-6,-196,-197,-149,-151,17,-152,17,-120,-136,-198,17,-119,-137,17,]),'VOID':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[18,18,-2,-4,-5,18,18,18,18,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,18,-90,18,-9,-199,18,-145,18,-121,18,-138,18,-7,-91,-8,-200,-195,18,18,-150,18,-153,-148,18,18,-124,18,18,-6,-196,-197,18,-149,-151,18,-152,18,18,-120,-125,-136,-198,18,-119,-126,-137,18,]),'CHAR':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[19,19,-2,-4,-5,19,19,19,19,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,19,-90,19,-9,-199,19,-145,19,-121,19,-138,19,-7,-91,-8,-200,-195,19,19,-150,19,-153,-148,19,19,-124,19,19,-6,-196,-197,19,-149,-151,19,-152,19,19,-120,-125,-136,-198,19,-119,-126,-137,19,]),'SHORT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[20,20,-2,-4,-5,20,20,20,20,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,20,-90,20,-9,-199,20,-145,20,-121,20,-138,20,-7,-91,-8,-200,-195,20,20,-150,20,-153,-148,20,20,-124,20,20,-6,-196,-197,20,-149,-151,20,-152,20,20,-120,-125,-136,-198,20,-119,-126,-137,20,]),'INT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[21,21,-2,-4,-5,21,21,21,21,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,21,-90,21,-9,-199,21,-145,21,-121,21,-138,21,-7,-91,-8,-200,-195,21,21,-150,21,-153,-148,21,21,-124,21,21,-6,-196,-197,21,-149,-151,21,-152,21,21,-120,-125,-136,-198,21,-119,-126,-137,21,]),'LONG':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[22,22,-2,-4,-5,22,22,22,22,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,22,-90,22,-9,-199,22,-145,22,-121,22,-138,22,-7,-91,-8,-200,-195,22,22,-150,22,-153,-148,22,22,-124,22,22,-6,-196,-197,22,-149,-151,22,-152,22,22,-120,-125,-136,-198,22,-119,-126,-137,22,]),'FLOAT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[23,23,-2,-4,-5,23,23,23,23,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,23,-90,23,-9,-199,23,-145,23,-121,23,-138,23,-7,-91,-8,-200,-195,23,23,-150,23,-153,-148,23,23,-124,23,23,-6,-196,-197,23,-149,-151,23,-152,23,23,-120,-125,-136,-198,23,-119,-126,-137,23,]),'DOUBLE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[24,24,-2,-4,-5,24,24,24,24,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,24,-90,24,-9,-199,24,-145,24,-121,24,-138,24,-7,-91,-8,-200,-195,24,24,-150,24,-153,-148,24,24,-124,24,24,-6,-196,-197,24,-149,-151,24,-152,24,24,-120,-125,-136,-198,24,-119,-126,-137,24,]),'SIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[25,25,-2,-4,-5,25,25,25,25,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,25,-90,25,-9,-199,25,-145,25,-121,25,-138,25,-7,-91,-8,-200,-195,25,25,-150,25,-153,-148,25,25,-124,25,25,-6,-196,-197,25,-149,-151,25,-152,25,25,-120,-125,-136,-198,25,-119,-126,-137,25,]),'UNSIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[26,26,-2,-4,-5,26,26,26,26,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,26,-90,26,-9,-199,26,-145,26,-121,26,-138,26,-7,-91,-8,-200,-195,26,26,-150,26,-153,-148,26,26,-124,26,26,-6,-196,-197,26,-149,-151,26,-152,26,26,-120,-125,-136,-198,26,-119,-126,-137,26,]),'BOOL':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[29,29,-2,-4,-5,29,29,29,29,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,29,-90,29,-9,-199,29,-145,29,-121,29,-138,29,-7,-91,-8,-200,-195,29,29,-150,29,-153,-148,29,29,-124,29,29,-6,-196,-197,29,-149,-151,29,-152,29,29,-120,-125,-136,-198,29,-119,-126,-137,29,]),'CONST':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,44,45,46,47,52,54,55,57,59,60,62,63,64,66,68,69,70,72,131,137,143,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[30,30,-2,-4,-5,30,30,30,30,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,30,-147,-3,30,-90,30,-9,-199,30,-145,30,30,-158,-121,30,-138,30,-7,-91,-8,-200,-195,30,-150,-153,-159,-148,30,30,-124,30,30,-6,-196,-197,30,-149,-151,30,-152,30,30,-120,-125,-136,-198,30,-119,-126,-137,30,]),'VOLATILE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,44,45,46,47,52,54,55,57,59,60,62,63,64,66,68,69,70,72,131,137,143,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[31,31,-2,-4,-5,31,31,31,31,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,31,-147,-3,31,-90,31,-9,-199,31,-145,31,31,-158,-121,31,-138,31,-7,-91,-8,-200,-195,31,-150,-153,-159,-148,31,31,-124,31,31,-6,-196,-197,31,-149,-151,31,-152,31,31,-120,-125,-136,-198,31,-119,-126,-137,31,]),'MULTIPLY':([0,2,3,4,5,6,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,39,41,45,46,47,48,49,50,51,53,55,57,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,128,133,134,135,141,143,148,149,150,155,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,233,234,236,241,242,243,244,246,250,251,252,253,256,257,261,262,263,268,271,272,274,287,288,289,290,291,295,302,304,305,309,311,312,313,314,315,316,317,318,319,320,321,322,323,326,338,339,340,342,348,350,351,352,353,354,],[32,32,-2,-4,-5,32,-92,-94,-96,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,32,32,-3,-90,-9,-199,108,32,-93,-95,-97,108,32,-158,-121,-138,-7,108,-91,32,-8,-200,-195,108,108,-201,-186,-187,-188,-189,-190,-191,-203,-10,108,108,108,108,-42,-30,108,108,108,-44,108,-20,-36,-37,-38,-39,-40,-41,-11,-12,-13,-14,-15,-16,-17,-18,221,-42,108,-10,32,-159,32,-128,-130,-6,108,-196,-202,-197,108,108,108,-204,108,108,108,108,108,-213,-214,-215,108,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,108,108,108,108,-26,-27,-31,108,-32,-33,-34,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,32,108,-120,108,-127,-129,-136,108,-198,-192,108,-194,-19,108,108,-212,-216,-22,-24,-25,32,221,221,-45,-46,-47,108,-119,32,108,-137,108,-193,108,-43,108,108,108,108,108,-21,-23,108,-35,32,-205,-207,-208,108,108,-210,108,-206,-209,-211,]),'IDENTIFIER':([0,2,3,4,5,6,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,41,45,46,47,48,49,50,51,53,54,55,56,57,59,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,91,94,100,101,102,104,107,108,109,110,111,112,134,141,142,143,148,149,150,154,155,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,228,231,233,234,236,241,242,243,244,245,246,250,251,252,253,257,261,262,263,295,302,304,305,309,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[33,33,-2,-4,-5,33,-92,-94,-96,33,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-154,33,59,62,-122,-123,-3,-90,-9,-199,81,33,-93,-95,-97,135,140,-155,-156,-158,-121,153,-138,-7,135,-91,33,-8,-200,-195,81,81,-201,-186,-187,-188,-189,-190,-191,-203,135,135,81,176,135,135,135,135,135,-36,-37,-38,-39,-40,-41,135,33,-157,-159,33,-128,-130,153,-6,135,-196,-202,-197,81,81,81,-204,135,135,135,135,135,-213,-214,-215,135,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,135,135,135,135,271,272,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,135,293,33,33,135,-120,135,-127,-129,-136,153,135,-198,-192,81,-194,135,135,-212,-216,135,-119,33,135,-137,135,-193,81,81,81,135,135,135,135,-205,-207,-208,81,81,-210,81,-206,-209,-211,]),'L_PAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,41,45,46,47,48,49,50,51,52,53,55,56,57,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,131,134,135,137,141,142,143,144,148,149,150,155,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,227,231,232,233,234,236,241,242,243,244,246,250,251,252,253,256,257,260,261,262,263,268,271,272,274,294,295,297,300,302,304,305,309,311,312,313,315,316,317,318,319,320,321,322,325,326,327,329,331,332,333,338,339,340,342,346,347,348,350,351,352,353,354,],[34,34,-2,-4,-5,34,-92,-94,-96,34,54,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-154,-147,34,-3,-90,-9,-199,86,34,-93,-95,-97,54,134,-155,-156,-158,-121,-138,-7,86,-91,34,-8,-200,-195,86,86,-201,-186,-187,-188,-189,-190,-191,-203,-10,134,169,86,172,173,86,175,86,196,202,202,134,206,-20,-36,-37,-38,-39,-40,-41,-11,-12,-13,-14,-15,-16,-17,-18,-150,86,-10,-153,233,-157,-159,-148,34,-128,-130,-6,86,-196,-202,-197,86,86,86,-204,86,86,86,86,86,-213,-214,-215,86,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,86,134,86,86,-26,-27,86,86,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-149,-151,-152,233,296,233,134,-120,134,-127,-129,-136,134,-198,-192,86,-194,-19,134,317,86,-212,-216,-22,-24,-25,326,296,134,-177,-173,-119,34,134,-137,86,-193,86,86,86,86,86,134,-21,-23,86,326,326,-175,-179,-172,-178,-174,-205,-207,-208,86,-176,-180,86,-210,86,-206,-209,-211,]),'ENUM':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[36,36,-2,-4,-5,36,36,36,36,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,36,-90,36,-9,-199,36,-145,36,-121,36,-138,36,-7,-91,-8,-200,-195,36,36,-150,36,-153,-148,36,36,-124,36,36,-6,-196,-197,36,-149,-151,36,-152,36,36,-120,-125,-136,-198,36,-119,-126,-137,36,]),'STRUCT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[37,37,-2,-4,-5,37,37,37,37,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,37,-90,37,-9,-199,37,-145,37,-121,37,-138,37,-7,-91,-8,-200,-195,37,37,-150,37,-153,-148,37,37,-124,37,37,-6,-196,-197,37,-149,-151,37,-152,37,37,-120,-125,-136,-198,37,-119,-126,-137,37,]),'UNION':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,131,134,137,144,145,146,147,149,150,155,160,162,206,224,225,226,227,233,235,236,237,244,250,296,302,303,309,326,],[38,38,-2,-4,-5,38,38,38,38,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-3,38,-90,38,-9,-199,38,-145,38,-121,38,-138,38,-7,-91,-8,-200,-195,38,38,-150,38,-153,-148,38,38,-124,38,38,-6,-196,-197,38,-149,-151,38,-152,38,38,-120,-125,-136,-198,38,-119,-126,-137,38,]),'$end':([1,2,3,4,5,39,41,45,64,66,68,70,155,160,162,250,],[0,-1,-2,-4,-5,-3,-90,-9,-7,-91,-8,-195,-6,-196,-197,-198,]),'SEMI_COLON':([6,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,40,41,42,43,46,47,48,49,50,51,52,59,62,66,69,70,71,72,73,74,75,76,77,78,79,80,81,84,89,92,93,94,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,135,137,144,156,157,159,160,161,162,163,164,166,167,175,176,177,178,179,180,199,200,201,203,204,205,224,225,227,236,238,239,240,244,250,251,252,253,254,256,261,262,263,264,266,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,302,306,309,310,312,313,314,315,316,320,321,323,334,335,336,338,339,340,342,344,348,349,350,351,352,353,354,],[41,-92,-94,-96,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-100,-90,66,-98,-199,80,41,-93,-95,-97,-145,-121,-138,-91,-200,-195,80,80,-201,-186,-187,-188,-189,-190,-191,-203,-10,167,80,177,178,179,-87,-74,-42,-72,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-100,-150,-89,-42,-10,-153,-148,-101,-181,-99,-196,-202,-197,80,80,80,-204,80,262,-213,-214,-215,263,-26,-27,-31,-32,-33,-34,-149,-151,-152,-120,303,-131,-133,-136,-198,-192,80,-194,-88,-19,80,-212,-216,-75,-71,-22,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-119,-134,-137,-182,-193,80,-43,80,80,-21,-23,-35,-132,-135,-183,-205,-207,-208,80,-73,80,353,-210,80,-206,-209,-211,]),'L_BRACES':([7,12,33,35,36,37,38,40,41,44,46,47,52,59,62,63,65,66,69,70,71,72,73,74,75,76,77,78,79,80,89,131,137,144,158,160,161,162,163,164,166,167,177,178,179,224,225,227,250,251,252,253,262,263,311,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[47,-146,-147,60,61,-122,-123,47,-90,47,-199,47,-145,145,154,47,158,-91,-200,-195,47,47,-201,-186,-187,-188,-189,-190,-191,-203,47,-150,-153,-148,158,-196,-202,-197,47,47,47,-204,-213,-214,-215,-149,-151,-152,-198,-192,47,-194,-212,-216,158,-193,47,47,47,-205,-207,-208,47,47,-210,47,-206,-209,-211,]),'L_SQBR':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,50,51,52,55,56,57,59,62,81,99,106,114,115,116,117,118,119,120,121,131,135,137,141,142,143,144,149,150,199,200,224,225,227,231,232,233,236,242,243,244,256,268,271,272,274,294,297,300,302,309,320,321,325,326,327,329,331,332,333,346,347,],[-92,-94,-96,53,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-154,-147,-93,-95,-97,53,-155,-156,-158,-121,-138,-10,195,-20,-11,-12,-13,-14,-15,-16,-17,-18,-150,-10,-153,234,-157,-159,-148,-128,-130,-26,-27,-149,-151,-152,234,295,234,-120,-127,-129,-136,-19,-22,-24,-25,234,295,-177,-173,-119,-137,-21,-23,234,234,-175,-179,-172,-178,-174,-176,-180,]),'R_PAREN':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,50,51,52,54,55,56,57,58,59,62,80,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,133,135,136,137,138,139,140,141,142,143,144,149,150,167,170,171,196,199,200,201,203,204,205,224,225,227,229,230,231,232,233,236,242,243,244,254,255,256,258,259,264,266,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,296,297,298,299,300,302,309,314,318,320,321,323,324,325,326,327,329,330,331,332,333,341,343,344,345,346,347,],[-92,-94,-96,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-154,-147,-93,-95,-97,-145,137,-155,-156,-158,144,-121,-138,-203,-87,-74,-42,-72,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-150,-42,-10,225,-153,227,-160,-165,-164,-157,-159,-148,-128,-130,-204,256,257,268,-26,-27,-31,-32,-33,-34,-149,-151,-152,-162,-163,-169,-170,297,-120,-127,-129,-136,-88,313,-19,315,316,-75,-71,-22,321,-28,-24,-25,323,-167,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-161,-166,-171,329,-177,331,332,-173,-119,-137,-43,342,-21,-23,-35,-168,-169,297,-175,-179,347,-172,-178,-174,349,351,-73,-29,-176,-180,]),'COMMA':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,40,42,43,49,50,51,52,55,56,57,59,62,81,84,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,131,132,133,135,136,137,138,139,140,141,142,143,144,151,152,153,156,157,159,170,180,199,200,201,203,204,205,224,225,227,229,230,231,232,236,238,239,240,244,247,248,249,254,255,256,258,259,264,265,266,267,268,269,270,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,297,299,300,302,306,307,308,309,310,314,320,321,323,327,329,330,331,332,333,334,335,336,337,341,343,344,345,346,347,],[-92,-94,-96,-146,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-154,-147,-100,67,-98,-93,-95,-97,-145,-155,-156,-158,-121,-138,-10,168,-87,-74,-42,-72,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-100,-150,-89,-42,-10,226,-153,228,-160,-165,-164,-157,-159,-148,245,-139,-141,-101,-181,-99,168,168,-26,-27,-31,-32,-33,-34,-149,-151,-152,-162,-163,-169,-170,-120,304,-131,-133,-136,245,311,-184,-88,168,-19,168,168,-75,168,-71,168,-22,322,-28,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-161,-166,-171,-177,226,-173,-119,-134,-140,-142,-137,-182,-43,-21,-23,-35,-175,-179,226,-172,-178,-174,-132,-135,-183,-185,168,168,-73,-29,-176,-180,]),'ASSIGNMENT':([12,33,40,52,81,97,99,106,114,115,116,117,118,119,120,121,129,131,133,135,137,144,153,199,200,201,203,204,205,224,225,227,256,268,271,272,314,320,321,323,],[-146,-147,65,-145,-10,182,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,65,-150,-42,-10,-153,-148,246,-26,-27,-31,-32,-33,-34,-149,-151,-152,-19,-22,-24,-25,-43,-21,-23,-35,]),'COLON':([12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,52,59,62,81,83,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,131,132,133,135,137,144,148,149,150,165,199,200,201,203,204,205,224,225,227,236,240,242,243,244,254,256,264,265,266,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,302,304,309,314,320,321,323,344,],[-146,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-143,-144,-147,-145,-121,-138,164,166,-87,-74,-42,-72,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-150,-89,-42,-10,-153,-148,241,-128,-130,252,-26,-27,-31,-32,-33,-34,-149,-151,-152,-120,305,-127,-129,-136,-88,-19,-75,319,-71,-22,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-119,241,-137,-43,-21,-23,-35,-73,]),'R_BRACES':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,132,133,135,146,147,151,152,153,157,160,161,162,163,167,177,178,179,199,200,201,203,204,205,235,237,247,248,249,250,251,253,256,262,263,264,266,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,303,307,308,310,311,312,314,320,321,323,336,337,338,339,340,344,350,352,353,354,],[-90,-199,70,-91,-200,-195,160,162,-201,-186,-187,-188,-189,-190,-191,-203,-74,-42,-72,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-89,-42,-10,236,-124,244,-139,-141,-181,-196,-202,-197,250,-204,-213,-214,-215,-26,-27,-31,-32,-33,-34,302,-125,309,310,-184,-198,-192,-194,-19,-212,-216,-75,-71,-22,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-126,-140,-142,-182,336,-193,-43,-21,-23,-35,-183,-185,-205,-207,-208,-73,-210,-206,-209,-211,]),'CASE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,82,-91,-200,-195,82,82,-201,-186,-187,-188,-189,-190,-191,-203,82,-196,-202,-197,82,82,82,-204,-213,-214,-215,-198,-192,82,-194,-212,-216,-193,82,82,82,-205,-207,-208,82,82,-210,82,-206,-209,-211,]),'DEFAULT':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,83,-91,-200,-195,83,83,-201,-186,-187,-188,-189,-190,-191,-203,83,-196,-202,-197,83,83,83,-204,-213,-214,-215,-198,-192,83,-194,-212,-216,-193,83,83,83,-205,-207,-208,83,83,-210,83,-206,-209,-211,]),'IF':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,85,-91,-200,-195,85,85,-201,-186,-187,-188,-189,-190,-191,-203,85,-196,-202,-197,85,85,85,-204,-213,-214,-215,-198,-192,85,-194,-212,-216,-193,85,85,85,-205,-207,-208,85,85,-210,85,-206,-209,-211,]),'SWITCH':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,87,-91,-200,-195,87,87,-201,-186,-187,-188,-189,-190,-191,-203,87,-196,-202,-197,87,87,87,-204,-213,-214,-215,-198,-192,87,-194,-212,-216,-193,87,87,87,-205,-207,-208,87,87,-210,87,-206,-209,-211,]),'WHILE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,174,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,88,-91,-200,-195,88,88,-201,-186,-187,-188,-189,-190,-191,-203,88,-196,-202,-197,88,88,88,-204,260,-213,-214,-215,-198,-192,88,-194,-212,-216,-193,88,88,88,-205,-207,-208,88,88,-210,88,-206,-209,-211,]),'DO':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,89,-91,-200,-195,89,89,-201,-186,-187,-188,-189,-190,-191,-203,89,-196,-202,-197,89,89,89,-204,-213,-214,-215,-198,-192,89,-194,-212,-216,-193,89,89,89,-205,-207,-208,89,89,-210,89,-206,-209,-211,]),'FOR':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,90,-91,-200,-195,90,90,-201,-186,-187,-188,-189,-190,-191,-203,90,-196,-202,-197,90,90,90,-204,-213,-214,-215,-198,-192,90,-194,-212,-216,-193,90,90,90,-205,-207,-208,90,90,-210,90,-206,-209,-211,]),'GOTO':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,91,-91,-200,-195,91,91,-201,-186,-187,-188,-189,-190,-191,-203,91,-196,-202,-197,91,91,91,-204,-213,-214,-215,-198,-192,91,-194,-212,-216,-193,91,91,91,-205,-207,-208,91,91,-210,91,-206,-209,-211,]),'CONTINUE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,92,-91,-200,-195,92,92,-201,-186,-187,-188,-189,-190,-191,-203,92,-196,-202,-197,92,92,92,-204,-213,-214,-215,-198,-192,92,-194,-212,-216,-193,92,92,92,-205,-207,-208,92,92,-210,92,-206,-209,-211,]),'BREAK':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,93,-91,-200,-195,93,93,-201,-186,-187,-188,-189,-190,-191,-203,93,-196,-202,-197,93,93,93,-204,-213,-214,-215,-198,-192,93,-194,-212,-216,-193,93,93,93,-205,-207,-208,93,93,-210,93,-206,-209,-211,]),'RETURN':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,160,161,162,163,164,166,167,177,178,179,250,251,252,253,262,263,312,313,315,316,338,339,340,342,348,350,351,352,353,354,],[-90,-199,94,-91,-200,-195,94,94,-201,-186,-187,-188,-189,-190,-191,-203,94,-196,-202,-197,94,94,94,-204,-213,-214,-215,-198,-192,94,-194,-212,-216,-193,94,94,94,-205,-207,-208,94,94,-210,94,-206,-209,-211,]),'INCREMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,134,135,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,256,257,261,262,263,268,271,272,295,305,311,312,313,315,316,317,318,319,320,321,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,100,100,100,-91,-200,-195,100,100,-201,-186,-187,-188,-189,-190,-191,-203,-10,100,100,100,100,199,100,100,100,100,-20,-36,-37,-38,-39,-40,-41,-11,-12,-13,-14,-15,-16,-17,-18,100,-10,100,-196,-202,-197,100,100,100,-204,100,100,100,100,100,-213,-214,-215,100,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,100,100,100,100,-26,-27,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-198,-192,100,-194,-19,100,100,-212,-216,-22,-24,-25,100,100,100,-193,100,100,100,100,100,100,-21,-23,100,-205,-207,-208,100,100,-210,100,-206,-209,-211,]),'DECREMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,134,135,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,256,257,261,262,263,268,271,272,295,305,311,312,313,315,316,317,318,319,320,321,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,101,101,101,-91,-200,-195,101,101,-201,-186,-187,-188,-189,-190,-191,-203,-10,101,101,101,101,200,101,101,101,101,-20,-36,-37,-38,-39,-40,-41,-11,-12,-13,-14,-15,-16,-17,-18,101,-10,101,-196,-202,-197,101,101,101,-204,101,101,101,101,101,-213,-214,-215,101,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,101,101,101,101,-26,-27,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-198,-192,101,-194,-19,101,101,-212,-216,-22,-24,-25,101,101,101,-193,101,101,101,101,101,101,-21,-23,101,-205,-207,-208,101,101,-210,101,-206,-209,-211,]),'SIZEOF':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,104,104,104,-91,-200,-195,104,104,-201,-186,-187,-188,-189,-190,-191,-203,104,104,104,104,104,104,104,104,-36,-37,-38,-39,-40,-41,104,104,-196,-202,-197,104,104,104,-204,104,104,104,104,104,-213,-214,-215,104,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-198,-192,104,-194,104,104,-212,-216,104,104,104,-193,104,104,104,104,104,104,104,-205,-207,-208,104,104,-210,104,-206,-209,-211,]),'BITWISE_AND':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,123,124,125,126,127,128,133,134,135,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,256,257,261,262,263,268,271,272,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,295,305,311,312,313,314,315,316,317,318,319,320,321,322,323,338,339,340,342,348,350,351,352,353,354,],[-90,-199,107,107,107,-91,-200,-195,107,107,-201,-186,-187,-188,-189,-190,-191,-203,-10,107,107,107,107,-42,-30,107,107,107,-44,107,-20,-36,-37,-38,-39,-40,-41,-11,-12,-13,-14,-15,-16,-17,-18,210,-62,-59,-54,-51,-48,-42,107,-10,107,-196,-202,-197,107,107,107,-204,107,107,107,107,107,-213,-214,-215,107,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,107,107,107,107,-26,-27,-31,107,-32,-33,-34,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-198,-192,107,-194,-19,107,107,-212,-216,-22,-24,-25,210,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,107,107,107,-193,107,-43,107,107,107,107,107,-21,-23,107,-35,-205,-207,-208,107,107,-210,107,-206,-209,-211,]),'ADD':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,127,128,133,134,135,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,256,257,261,262,263,268,271,272,285,286,287,288,289,290,291,295,305,311,312,313,314,315,316,317,318,319,320,321,322,323,338,339,340,342,348,350,351,352,353,354,],[-90,-199,109,109,109,-91,-200,-195,109,109,-201,-186,-187,-188,-189,-190,-191,-203,-10,109,109,109,109,-42,-30,109,109,109,-44,109,-20,-36,-37,-38,-39,-40,-41,-11,-12,-13,-14,-15,-16,-17,-18,219,-48,-42,109,-10,109,-196,-202,-197,109,109,109,-204,109,109,109,109,109,-213,-214,-215,109,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,109,109,109,109,-26,-27,-31,109,-32,-33,-34,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-198,-192,109,-194,-19,109,109,-212,-216,-22,-24,-25,219,219,-49,-50,-45,-46,-47,109,109,109,-193,109,-43,109,109,109,109,109,-21,-23,109,-35,-205,-207,-208,109,109,-210,109,-206,-209,-211,]),'SUBSTRACT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,121,127,128,133,134,135,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,256,257,261,262,263,268,271,272,285,286,287,288,289,290,291,295,305,311,312,313,314,315,316,317,318,319,320,321,322,323,338,339,340,342,348,350,351,352,353,354,],[-90,-199,110,110,110,-91,-200,-195,110,110,-201,-186,-187,-188,-189,-190,-191,-203,-10,110,110,110,110,-42,-30,110,110,110,-44,110,-20,-36,-37,-38,-39,-40,-41,-11,-12,-13,-14,-15,-16,-17,-18,220,-48,-42,110,-10,110,-196,-202,-197,110,110,110,-204,110,110,110,110,110,-213,-214,-215,110,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,110,110,110,110,-26,-27,-31,110,-32,-33,-34,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-198,-192,110,-194,-19,110,110,-212,-216,-22,-24,-25,220,220,-49,-50,-45,-46,-47,110,110,110,-193,110,-43,110,110,110,110,110,-21,-23,110,-35,-205,-207,-208,110,110,-210,110,-206,-209,-211,]),'BITWISE_ONE_COMPLEMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,111,111,111,-91,-200,-195,111,111,-201,-186,-187,-188,-189,-190,-191,-203,111,111,111,111,111,111,111,111,-36,-37,-38,-39,-40,-41,111,111,-196,-202,-197,111,111,111,-204,111,111,111,111,111,-213,-214,-215,111,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-198,-192,111,-194,111,111,-212,-216,111,111,111,-193,111,111,111,111,111,111,111,-205,-207,-208,111,111,-210,111,-206,-209,-211,]),'LOGICAL_NOT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,112,112,112,-91,-200,-195,112,112,-201,-186,-187,-188,-189,-190,-191,-203,112,112,112,112,112,112,112,112,-36,-37,-38,-39,-40,-41,112,112,-196,-202,-197,112,112,112,-204,112,112,112,112,112,-213,-214,-215,112,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-198,-192,112,-194,112,112,-212,-216,112,112,112,-193,112,112,112,112,112,112,112,-205,-207,-208,112,112,-210,112,-206,-209,-211,]),'NULL':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,114,114,114,-91,-200,-195,114,114,-201,-186,-187,-188,-189,-190,-191,-203,114,114,114,114,114,114,114,114,-36,-37,-38,-39,-40,-41,114,114,-196,-202,-197,114,114,114,-204,114,114,114,114,114,-213,-214,-215,114,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-198,-192,114,-194,114,114,-212,-216,114,114,114,-193,114,114,114,114,114,114,114,-205,-207,-208,114,114,-210,114,-206,-209,-211,]),'INT_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,115,115,115,-91,-200,-195,115,115,-201,-186,-187,-188,-189,-190,-191,-203,115,115,115,115,115,115,115,115,-36,-37,-38,-39,-40,-41,115,115,-196,-202,-197,115,115,115,-204,115,115,115,115,115,-213,-214,-215,115,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-198,-192,115,-194,115,115,-212,-216,115,115,115,-193,115,115,115,115,115,115,115,-205,-207,-208,115,115,-210,115,-206,-209,-211,]),'HEX_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,116,116,116,-91,-200,-195,116,116,-201,-186,-187,-188,-189,-190,-191,-203,116,116,116,116,116,116,116,116,-36,-37,-38,-39,-40,-41,116,116,-196,-202,-197,116,116,116,-204,116,116,116,116,116,-213,-214,-215,116,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-198,-192,116,-194,116,116,-212,-216,116,116,116,-193,116,116,116,116,116,116,116,-205,-207,-208,116,116,-210,116,-206,-209,-211,]),'OCTAL_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,117,117,117,-91,-200,-195,117,117,-201,-186,-187,-188,-189,-190,-191,-203,117,117,117,117,117,117,117,117,-36,-37,-38,-39,-40,-41,117,117,-196,-202,-197,117,117,117,-204,117,117,117,117,117,-213,-214,-215,117,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-198,-192,117,-194,117,117,-212,-216,117,117,117,-193,117,117,117,117,117,117,117,-205,-207,-208,117,117,-210,117,-206,-209,-211,]),'EXPONENT_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,118,118,118,-91,-200,-195,118,118,-201,-186,-187,-188,-189,-190,-191,-203,118,118,118,118,118,118,118,118,-36,-37,-38,-39,-40,-41,118,118,-196,-202,-197,118,118,118,-204,118,118,118,118,118,-213,-214,-215,118,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-198,-192,118,-194,118,118,-212,-216,118,118,118,-193,118,118,118,118,118,118,118,-205,-207,-208,118,118,-210,118,-206,-209,-211,]),'REAL_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,119,119,119,-91,-200,-195,119,119,-201,-186,-187,-188,-189,-190,-191,-203,119,119,119,119,119,119,119,119,-36,-37,-38,-39,-40,-41,119,119,-196,-202,-197,119,119,119,-204,119,119,119,119,119,-213,-214,-215,119,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-198,-192,119,-194,119,119,-212,-216,119,119,119,-193,119,119,119,119,119,119,119,-205,-207,-208,119,119,-210,119,-206,-209,-211,]),'CHAR_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,120,120,120,-91,-200,-195,120,120,-201,-186,-187,-188,-189,-190,-191,-203,120,120,120,120,120,120,120,120,-36,-37,-38,-39,-40,-41,120,120,-196,-202,-197,120,120,120,-204,120,120,120,120,120,-213,-214,-215,120,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-198,-192,120,-194,120,120,-212,-216,120,120,120,-193,120,120,120,120,120,120,120,-205,-207,-208,120,120,-210,120,-206,-209,-211,]),'STR_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,134,158,160,161,162,163,164,166,167,168,169,172,173,175,177,178,179,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,250,251,252,253,257,261,262,263,295,305,311,312,313,315,316,317,318,319,322,338,339,340,342,348,350,351,352,353,354,],[-90,-199,121,121,121,-91,-200,-195,121,121,-201,-186,-187,-188,-189,-190,-191,-203,121,121,121,121,121,121,121,121,-36,-37,-38,-39,-40,-41,121,121,-196,-202,-197,121,121,121,-204,121,121,121,121,121,-213,-214,-215,121,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,-198,-192,121,-194,121,121,-212,-216,121,121,121,-193,121,121,121,121,121,121,121,-205,-207,-208,121,121,-210,121,-206,-209,-211,]),'R_SQBR':([53,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,132,133,135,199,200,201,203,204,205,234,254,256,264,266,267,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,295,301,314,320,321,323,328,344,],[131,-87,-74,-42,-72,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,224,-89,-42,-10,-26,-27,-31,-32,-33,-34,300,-88,-19,-75,-71,320,-22,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,327,333,-43,-21,-23,-35,346,-73,]),'ELSE':([70,74,75,76,77,78,79,80,160,162,167,177,178,179,250,251,253,262,263,312,338,339,340,350,352,353,354,],[-195,-186,-187,-188,-189,-190,-191,-203,-196,-197,-204,-213,-214,-215,-198,-192,-194,-212,-216,-193,348,-207,-208,-210,-206,-209,-211,]),'DOT':([81,99,106,114,115,116,117,118,119,120,121,135,199,200,256,268,271,272,320,321,],[-10,197,-20,-11,-12,-13,-14,-15,-16,-17,-18,-10,-26,-27,-19,-22,-24,-25,-21,-23,]),'ARROW':([81,99,106,114,115,116,117,118,119,120,121,135,199,200,256,268,271,272,320,321,],[-10,198,-20,-11,-12,-13,-14,-15,-16,-17,-18,-10,-26,-27,-19,-22,-24,-25,-21,-23,]),'MULTIPLY_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,183,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'DIVIDE_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,184,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'MODULUS_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,185,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'ADD_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,186,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'SUBSTRACT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,187,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'LEFT_SHIFT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,188,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'RIGHT_SHIFT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,189,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'BITWISE_AND_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,190,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'BITWISE_XOR_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,191,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'BITWISE_OR_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,121,133,135,199,200,201,203,204,205,256,268,271,272,314,320,321,323,],[-10,192,-30,-20,-11,-12,-13,-14,-15,-16,-17,-18,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,-43,-21,-23,-35,]),'DIVIDE':([81,97,99,103,106,114,115,116,117,118,119,120,121,128,133,135,199,200,201,203,204,205,256,268,271,272,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,222,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,222,222,-45,-46,-47,-43,-21,-23,-35,]),'MODULUS':([81,97,99,103,106,114,115,116,117,118,119,120,121,128,133,135,199,200,201,203,204,205,256,268,271,272,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,223,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,223,223,-45,-46,-47,-43,-21,-23,-35,]),'LEFT_SHIFT':([81,97,99,103,106,114,115,116,117,118,119,120,121,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,217,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,217,217,217,217,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'RIGHT_SHIFT':([81,97,99,103,106,114,115,116,117,118,119,120,121,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,218,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,218,218,218,218,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'LESS':([81,97,99,103,106,114,115,116,117,118,119,120,121,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,213,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,213,213,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'GREATER':([81,97,99,103,106,114,115,116,117,118,119,120,121,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,214,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,214,214,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'LESS_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,215,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,215,215,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'GREATER_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,216,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,216,216,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,124,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,278,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,211,-59,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,211,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'NOT_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,121,124,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,278,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,212,-59,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,212,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'BITWISE_XOR':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,-11,-12,-13,-14,-15,-16,-17,-18,209,-64,-62,-59,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,209,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'BITWISE_OR':([81,97,99,103,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,133,135,199,200,201,203,204,205,256,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,-20,208,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-22,-24,-25,208,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'LOGICAL_AND':([81,97,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,133,135,199,200,201,203,204,205,256,266,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,-30,-44,207,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,207,-22,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'QUES_MARK':([81,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,133,135,199,200,201,203,204,205,256,266,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,193,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-71,-22,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),'LOGICAL_OR':([81,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,133,135,199,200,201,203,204,205,256,266,268,271,272,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,314,320,321,323,],[-10,-42,194,-30,-44,-70,-20,-68,-11,-12,-13,-14,-15,-16,-17,-18,-66,-64,-62,-59,-54,-51,-48,-42,-10,-26,-27,-31,-32,-33,-34,-19,-71,-22,-24,-25,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-43,-21,-23,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,39,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,7,40,44,47,63,72,],[5,5,46,46,69,46,69,69,]),'declaration_specifiers':([0,2,7,8,9,10,40,44,47,54,63,72,226,233,296,326,],[6,6,48,49,50,51,48,48,48,141,48,48,141,141,141,141,]),'declarator':([0,2,6,34,48,67,141,148,233,304,],[7,7,40,58,129,129,229,240,58,240,]),'storage_class_specifier':([0,2,7,8,9,10,40,44,47,54,63,72,226,233,296,326,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'type_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,134,145,146,149,150,206,226,233,235,296,326,],[9,9,9,9,9,9,9,9,9,9,149,9,9,171,171,149,149,149,149,149,9,9,149,9,9,]),'type_qualifier':([0,2,7,8,9,10,32,40,44,47,54,55,60,63,72,145,146,149,150,206,226,233,235,296,326,],[10,10,10,10,10,10,57,10,10,10,10,143,150,10,10,150,150,150,150,150,10,10,150,10,10,]),'pointer':([0,2,6,32,34,48,55,67,141,148,233,274,304,326,],[11,11,11,56,11,11,142,11,231,11,231,325,11,325,]),'direct_declarator':([0,2,6,11,34,48,67,141,148,231,233,304,],[12,12,12,52,12,12,12,12,12,52,12,12,]),'struct_or_union_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,134,145,146,149,150,206,226,233,235,296,326,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'enum_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,134,145,146,149,150,206,226,233,235,296,326,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'struct_or_union':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,134,145,146,149,150,206,226,233,235,296,326,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'init_declarator_list':([6,48,],[42,42,]),'init_declarator':([6,48,67,],[43,43,159,]),'declaration_list':([7,40,47,],[44,63,72,]),'compound_statement':([7,40,44,47,63,71,72,89,163,164,166,252,313,315,316,342,348,351,],[45,64,68,75,155,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'type_qualifier_list':([32,],[55,]),'statement_list':([47,72,],[71,163,]),'statement':([47,71,72,89,163,164,166,252,313,315,316,342,348,351,],[73,161,73,174,161,251,253,312,338,339,340,350,352,354,]),'labeled_statement':([47,71,72,89,163,164,166,252,313,315,316,342,348,351,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'expression_statement':([47,71,72,89,163,164,166,175,252,261,313,315,316,342,348,351,],[76,76,76,76,76,76,76,261,76,318,76,76,76,76,76,76,]),'selection_statement':([47,71,72,89,163,164,166,252,313,315,316,342,348,351,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'iteration_statement':([47,71,72,89,163,164,166,252,313,315,316,342,348,351,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'jump_statement':([47,71,72,89,163,164,166,252,313,315,316,342,348,351,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'expression':([47,71,72,86,89,94,134,163,164,166,169,172,173,175,193,195,202,206,252,261,313,315,316,317,318,342,348,351,],[84,84,84,170,84,180,170,84,84,84,255,258,259,84,265,267,170,170,84,84,84,84,84,341,343,84,84,84,]),'assignment_expression':([47,65,71,72,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,195,196,202,206,252,261,311,313,315,316,317,318,322,342,348,351,],[95,157,95,95,95,95,95,95,157,95,95,95,254,95,95,95,95,264,95,95,270,95,95,95,95,157,95,95,95,95,95,345,95,95,95,]),'conditional_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,195,196,202,206,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[96,132,96,96,96,132,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,132,132,132,96,96,132,132,96,96,96,96,96,96,344,96,96,96,96,]),'unary_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,252,257,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[97,133,97,97,97,133,97,97,97,201,203,133,205,97,97,97,97,97,97,97,97,97,97,97,97,133,97,97,97,97,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,97,133,97,133,133,97,97,97,97,97,97,133,97,97,97,97,]),'logical_or_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,195,196,202,206,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'postfix_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,252,257,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'unary_operator':([47,53,65,71,72,82,86,89,94,100,101,102,104,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,252,257,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'cast_expression':([47,53,65,71,72,82,86,89,94,102,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,252,257,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[103,103,103,103,103,103,103,103,103,204,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,289,290,291,103,103,103,103,314,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'logical_and_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,266,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'primary_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,234,241,246,252,257,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'inclusive_or_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,275,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'exclusive_or_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,276,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'and_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,277,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'equality_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,278,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'relational_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,279,280,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'shift_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,281,282,283,284,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'additive_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,285,286,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'multiplicative_expression':([47,53,65,71,72,82,86,89,94,134,158,163,164,166,168,169,172,173,175,181,193,194,195,196,202,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,234,241,246,252,261,295,305,311,313,315,316,317,318,319,322,342,348,351,],[128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,287,288,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,]),'constant_expression':([53,82,234,241,246,295,305,],[130,165,301,306,308,328,335,]),'parameter_type_list':([54,233,296,326,],[136,299,330,299,]),'identifier_list':([54,],[138,]),'parameter_declaration':([54,226,233,296,326,],[139,292,139,139,139,]),'struct_declaration_list':([60,145,],[146,235,]),'struct_declaration':([60,145,146,235,],[147,147,237,237,]),'specifier_qualifier_list':([60,145,146,149,150,206,235,],[148,148,148,242,243,274,148,]),'enumerator_list':([61,154,],[151,247,]),'enumerator':([61,154,245,],[152,152,307,]),'initializer':([65,158,311,],[156,249,337,]),'assignment_operator':([97,],[181,]),'abstract_declarator':([141,233,274,326,],[230,298,324,298,]),'direct_abstract_declarator':([141,231,233,274,325,326,],[232,294,232,232,294,232,]),'struct_declarator_list':([148,],[238,]),'struct_declarator':([148,304,],[239,334,]),'initializer_list':([158,],[248,]),'argument_expression_list':([196,],[269,]),'type_name':([206,],[273,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',49),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',54),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',55),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',61),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',62),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition_1','cparser.py',68),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition_1','cparser.py',69),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition_2','cparser.py',79),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition_2','cparser.py',80),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',91),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',92),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',93),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',94),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',95),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',96),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',97),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',98),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',99),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',100),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',109),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',110),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',111),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',112),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',113),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',114),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',115),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',116),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',132),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',133),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',143),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',144),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',145),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',146),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',147),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',148),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',157),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',158),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',159),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',160),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',161),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',162),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',168),
  ('cast_expression -> L_PAREN type_specifier R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',169),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',178),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',179),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',180),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',181),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',192),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',193),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',194),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',203),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',204),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',205),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',216),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',217),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',218),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',219),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',220),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',231),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',232),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',233),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',244),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',245),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',256),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',257),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',268),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',269),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',279),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',280),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',291),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',292),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',303),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',304),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',314),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',315),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',325),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',326),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',327),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',328),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',329),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',330),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',331),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',332),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',333),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',334),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',335),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',341),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',342),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',356),
  ('declaration -> declaration_specifiers SEMI_COLON','declaration',2,'p_declaration','cparser.py',363),
  ('declaration -> declaration_specifiers init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',364),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',373),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',374),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',375),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',376),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',377),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',378),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',386),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',387),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',399),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',400),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',409),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',410),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',411),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',412),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',413),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',419),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',420),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',421),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',422),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',423),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',424),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',425),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','cparser.py',426),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','cparser.py',427),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','cparser.py',428),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','cparser.py',429),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',430),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES','struct_or_union_specifier',5,'p_struct_or_union_specifier','cparser.py',437),
  ('struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES','struct_or_union_specifier',4,'p_struct_or_union_specifier','cparser.py',438),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','cparser.py',439),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','cparser.py',445),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','cparser.py',446),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',453),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',454),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',459),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','cparser.py',464),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',465),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','cparser.py',466),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',467),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',476),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',477),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','cparser.py',482),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','cparser.py',483),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','cparser.py',484),
  ('enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES','enum_specifier',4,'p_enum_specifier','cparser.py',489),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',490),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','cparser.py',491),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',496),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',497),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',502),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',503),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','cparser.py',508),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','cparser.py',509),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',515),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','cparser.py',516),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',525),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',526),
  ('direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',527),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',528),
  ('direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',529),
  ('direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',530),
  ('direct_declarator -> direct_declarator L_PAREN R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',531),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',545),
  ('pointer -> MULTIPLY type_qualifier_list','pointer',2,'p_pointer','cparser.py',546),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer','cparser.py',547),
  ('pointer -> MULTIPLY type_qualifier_list pointer','pointer',3,'p_pointer','cparser.py',548),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','cparser.py',556),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','cparser.py',557),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',563),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',564),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',577),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',578),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','cparser.py',579),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','cparser.py',591),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','cparser.py',592),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','cparser.py',607),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','cparser.py',608),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','cparser.py',617),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','cparser.py',618),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','cparser.py',619),
  ('direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',627),
  ('direct_abstract_declarator -> L_SQBR R_SQBR','direct_abstract_declarator',2,'p_direct_abstract_declarator','cparser.py',628),
  ('direct_abstract_declarator -> L_SQBR constant_expression R_SQBR','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',629),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',630),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR','direct_abstract_declarator',4,'p_direct_abstract_declarator','cparser.py',631),
  ('direct_abstract_declarator -> L_PAREN R_PAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','cparser.py',632),
  ('direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',633),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',634),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','cparser.py',635),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',648),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',649),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',650),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',659),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',660),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',666),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',667),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',668),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',669),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',670),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',671),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement_1','cparser.py',677),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement_2','cparser.py',683),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement_2','cparser.py',684),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',693),
  ('compound_statement -> L_BRACES statement_list R_BRACES','compound_statement',3,'p_compound_statement','cparser.py',694),
  ('compound_statement -> L_BRACES declaration_list R_BRACES','compound_statement',3,'p_compound_statement','cparser.py',695),
  ('compound_statement -> L_BRACES declaration_list statement_list R_BRACES','compound_statement',4,'p_compound_statement','cparser.py',696),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','cparser.py',708),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','cparser.py',709),
  ('statement_list -> statement','statement_list',1,'p_statement_list','cparser.py',715),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','cparser.py',716),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',723),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',724),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',733),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',734),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',735),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',745),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',746),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',747),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',748),
  ('jump_statement -> GOTO IDENTIFIER SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',764),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',765),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',766),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',767),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',768),
]
