
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    function_definition  : type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym\n                         | type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR expression R_SQBR\n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES\n    \n    add_sym_struct : L_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement_list : labeled_statement_list labeled_statement\n                           | labeled_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[9,9,-2,-4,-5,-3,-94,-95,9,-10,-96,9,-111,9,9,-112,9,-171,9,-171,9,9,-113,-171,-171,-7,-170,-151,9,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,9,-152,-154,-158,-166,-167,-168,9,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'CHAR':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[10,10,-2,-4,-5,-3,-94,-95,10,-10,-96,10,-111,10,10,-112,10,-171,10,-171,10,10,-113,-171,-171,-7,-170,-151,10,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,10,-152,-154,-158,-166,-167,-168,10,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'INT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[11,11,-2,-4,-5,-3,-94,-95,11,-10,-96,11,-111,11,11,-112,11,-171,11,-171,11,11,-113,-171,-171,-7,-170,-151,11,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,11,-152,-154,-158,-166,-167,-168,11,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'LONG':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[12,12,-2,-4,-5,-3,-94,-95,12,-10,-96,12,-111,12,12,-112,12,-171,12,-171,12,12,-113,-171,-171,-7,-170,-151,12,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,12,-152,-154,-158,-166,-167,-168,12,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'FLOAT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[13,13,-2,-4,-5,-3,-94,-95,13,-10,-96,13,-111,13,13,-112,13,-171,13,-171,13,13,-113,-171,-171,-7,-170,-151,13,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,13,-152,-154,-158,-166,-167,-168,13,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'DOUBLE':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[14,14,-2,-4,-5,-3,-94,-95,14,-10,-96,14,-111,14,14,-112,14,-171,14,-171,14,14,-113,-171,-171,-7,-170,-151,14,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,14,-152,-154,-158,-166,-167,-168,14,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'STRUCT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[15,15,-2,-4,-5,-3,-94,-95,47,-10,-96,47,-111,47,47,-112,47,-171,193,-171,47,47,-113,-171,-171,-7,-170,-151,193,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,193,-152,-154,-158,-166,-167,-168,193,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'ENUM':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[16,16,-2,-4,-5,-3,-94,-95,48,-10,-96,48,-111,48,48,-112,48,-171,194,-171,48,48,-113,-171,-171,-7,-170,-151,194,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,194,-152,-154,-158,-166,-167,-168,194,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'BOOL':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,101,102,103,104,134,136,161,167,168,170,171,172,173,174,175,176,177,178,179,180,181,182,195,231,236,237,238,239,240,241,242,248,249,250,264,270,279,280,282,289,291,296,297,302,],[17,17,-2,-4,-5,-3,-94,-95,17,-10,-96,17,-111,17,17,-112,17,-171,17,-171,17,17,-113,-171,-171,-7,-170,-151,17,-153,-155,-156,-140,-141,-142,-143,-144,-157,-9,-114,-6,-8,-149,17,-152,-154,-158,-166,-167,-168,17,-169,-150,-159,-162,-164,-160,-163,-165,-161,]),'$end':([1,2,3,4,5,18,25,26,32,102,104,167,168,170,172,195,236,237,240,],[0,-1,-2,-4,-5,-3,-94,-95,-96,-171,-171,-171,-171,-7,-151,-9,-6,-8,-152,]),'MULTIPLY':([6,9,10,11,12,13,14,17,21,24,25,26,27,28,30,32,33,35,37,42,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,87,94,103,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,132,133,134,135,136,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,183,188,192,197,202,205,206,208,209,210,211,224,225,226,227,228,232,238,239,241,242,243,244,245,247,248,249,250,252,253,256,257,258,259,260,262,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[24,-101,-102,-103,-104,-105,-106,-109,35,-127,-94,-95,-107,-108,66,-96,24,-128,24,24,66,-46,-34,66,66,66,-48,66,66,-24,-13,-40,-41,-42,-43,-44,-45,-14,-15,-16,-17,-18,-19,-20,-22,-23,155,24,66,-107,-108,66,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,66,66,-25,-26,66,66,-35,66,-36,-37,-46,66,-38,66,24,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-170,66,-153,-155,-156,-140,-141,-142,-143,-144,-157,24,66,66,66,-28,-30,-31,-21,66,66,35,155,155,-49,-50,-51,24,-149,66,-154,-158,66,66,66,66,-166,-167,-168,-107,-108,66,-27,-29,66,-39,-47,66,66,-169,66,66,66,66,-150,-159,-162,66,66,-164,66,-160,66,-163,-165,66,-161,66,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,21,22,24,25,26,27,28,30,32,33,35,37,41,42,47,48,51,56,57,58,60,61,65,66,67,68,69,70,94,103,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,166,171,173,174,175,176,177,178,179,180,181,182,183,188,192,193,194,197,209,210,232,238,239,241,242,243,244,245,247,248,249,250,252,253,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-129,-101,-102,-103,-104,-105,-106,27,28,-109,36,36,-127,-94,-95,-107,-108,64,-96,-129,-128,-129,95,-129,105,106,64,64,64,64,64,64,-40,-41,-42,-43,-44,-45,-129,64,-107,-108,64,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,64,64,64,64,205,206,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,95,-170,64,-153,-155,-156,-140,-141,-142,-143,-144,-157,-129,64,64,252,253,64,64,64,-129,-149,64,-154,-158,64,64,64,64,-166,-167,-168,-107,-108,64,64,64,64,-169,64,64,64,64,-150,-159,-162,64,64,-164,64,-160,64,-163,-165,64,-161,64,]),'L_PAREN':([6,9,10,11,12,13,14,17,19,21,22,24,25,26,27,28,30,32,33,34,35,36,37,38,42,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,94,103,105,106,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,159,164,171,173,174,175,176,177,178,179,180,181,182,183,185,186,187,188,189,192,197,202,205,206,208,209,210,229,232,238,239,241,242,243,244,245,247,248,249,250,252,253,256,257,258,259,264,268,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-129,-101,-102,-103,-104,-105,-106,-109,31,37,37,-127,-94,-95,-107,-108,61,-96,-129,-122,-128,-124,-129,-123,-129,61,126,130,130,134,136,61,-24,-13,-40,-41,-42,-43,-44,-45,-14,-15,-16,-17,-18,-19,-20,-22,-23,-129,61,-107,-108,61,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,61,134,-25,-26,61,61,61,61,61,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,-125,134,-170,61,-153,-155,-156,-140,-141,-142,-143,-144,-157,-129,243,244,245,61,247,61,61,-28,-30,-31,-21,61,134,-126,-129,-149,61,-154,-158,61,61,61,61,-166,-167,-168,-107,-108,134,-27,-29,61,61,277,61,-169,61,61,61,61,-150,-159,-162,61,61,-164,61,-160,134,-163,-165,61,-161,61,]),'SEMI_COLON':([7,8,19,20,23,25,26,32,34,36,38,45,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,100,103,123,124,129,131,132,133,135,139,159,162,163,165,171,173,174,175,176,177,178,179,180,181,182,184,188,190,191,192,196,198,200,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,238,239,241,242,247,248,249,250,251,254,257,258,260,261,262,263,264,269,270,271,274,276,279,280,282,284,286,288,289,290,291,296,297,301,302,303,],[25,26,-99,32,-97,-94,-95,-96,-122,-124,-123,104,-100,-135,-78,-46,-76,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-98,-99,168,182,-25,-26,-35,-36,-37,-46,-38,-91,-125,231,-115,-117,-170,182,-153,-155,-156,-140,-141,-142,-143,-144,-157,242,182,248,249,250,-136,-79,-75,-28,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-126,-110,-149,182,-154,-158,182,-166,-167,-168,270,-137,-27,-29,-39,-92,-47,-116,182,182,-169,-77,182,182,-150,-159,-162,182,182,296,-164,182,-160,-163,-165,182,-161,182,]),'R_PAREN':([9,10,11,12,13,14,17,24,29,31,34,35,36,38,43,46,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,98,105,106,123,124,126,129,131,132,133,135,137,138,139,140,159,169,182,198,200,202,203,204,205,206,207,208,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,242,257,258,260,261,262,265,266,267,271,272,278,283,285,],[-101,-102,-103,-104,-105,-106,-109,-127,45,-10,-122,-128,-124,-123,100,-130,-78,-46,-76,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,159,-132,-107,-108,-25,-26,202,-35,-36,-37,-46,-38,208,210,-91,-133,-125,-131,-157,-79,-75,-28,258,-32,-30,-31,260,-21,-134,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-126,-158,-27,-29,-39,-92,-47,274,275,276,-77,-33,284,288,290,]),'COMMA':([19,20,23,34,36,38,43,46,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,98,107,108,123,124,129,131,132,133,135,137,139,159,162,163,169,184,196,198,199,200,201,202,203,204,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,233,234,235,251,254,255,257,258,260,261,262,263,265,266,267,271,272,283,285,],[-99,33,-97,-122,-124,-123,101,-130,-100,-135,-78,-46,-76,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-98,-99,-120,166,-118,-132,197,-138,-25,-26,-35,-36,-37,-46,-38,209,-91,-125,232,-115,-131,209,-136,-79,209,-75,209,-28,259,-32,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-126,-121,-93,-119,209,-137,-139,-27,-29,-39,-92,-47,-116,209,209,209,-77,-33,209,209,]),'ASSIGNMENT':([19,34,36,38,53,55,63,64,72,73,74,75,76,77,78,79,80,89,95,123,124,129,131,132,133,135,159,202,205,206,208,229,257,258,260,262,],[30,-122,-124,-123,110,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,30,164,-25,-26,-35,-36,-37,-46,-38,-125,-28,-30,-31,-21,-126,-27,-29,-39,-47,]),'R_BRACES':([25,26,32,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,93,95,96,97,103,107,108,123,124,129,131,132,133,135,160,161,171,173,174,175,176,177,178,179,180,181,182,196,197,198,200,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,231,233,234,235,238,241,242,248,249,250,254,255,257,258,260,262,264,270,271,273,279,280,282,289,291,292,293,296,297,298,299,302,304,305,],[-94,-95,-96,-135,-78,-46,-76,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-171,-112,-120,165,-118,172,196,-138,-25,-26,-35,-36,-37,-46,-38,230,-113,238,240,-153,-155,-156,-140,-141,-142,-143,-144,-157,-136,254,-79,-75,-28,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-114,-121,-93,-119,-149,-154,-158,-166,-167,-168,-137,-139,-27,-29,-39,-47,-171,-169,-77,279,-150,-159,-162,-164,-160,-171,-146,-163,-165,302,-145,-161,-148,-147,]),'L_BRACES':([25,26,27,28,30,32,44,45,51,99,100,103,171,173,174,175,176,177,178,179,180,181,182,188,197,238,239,241,242,248,249,250,252,253,264,270,274,275,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,40,41,51,-96,103,-12,51,103,-11,171,-170,171,-153,-155,-156,-140,-141,-142,-143,-144,-157,171,51,-149,171,-154,-158,-166,-167,-168,40,41,171,-169,171,281,171,-150,-159,-162,171,171,-164,171,-160,-163,-165,171,-161,171,]),'IF':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,185,-170,185,-153,-155,-156,-140,-141,-142,-143,-144,-157,185,-149,185,-154,-158,-166,-167,-168,185,-169,185,185,-150,-159,-162,185,185,-164,185,-160,-163,-165,185,-161,185,]),'SWITCH':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,186,-170,186,-153,-155,-156,-140,-141,-142,-143,-144,-157,186,-149,186,-154,-158,-166,-167,-168,186,-169,186,186,-150,-159,-162,186,186,-164,186,-160,-163,-165,186,-161,186,]),'WHILE':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,246,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,187,-170,187,-153,-155,-156,-140,-141,-142,-143,-144,-157,187,-149,187,-154,-158,268,-166,-167,-168,187,-169,187,187,-150,-159,-162,187,187,-164,187,-160,-163,-165,187,-161,187,]),'DO':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,188,-170,188,-153,-155,-156,-140,-141,-142,-143,-144,-157,188,-149,188,-154,-158,-166,-167,-168,188,-169,188,188,-150,-159,-162,188,188,-164,188,-160,-163,-165,188,-161,188,]),'FOR':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,189,-170,189,-153,-155,-156,-140,-141,-142,-143,-144,-157,189,-149,189,-154,-158,-166,-167,-168,189,-169,189,189,-150,-159,-162,189,189,-164,189,-160,-163,-165,189,-161,189,]),'CONTINUE':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,190,-170,190,-153,-155,-156,-140,-141,-142,-143,-144,-157,190,-149,190,-154,-158,-166,-167,-168,190,-169,190,190,-150,-159,-162,190,190,-164,190,-160,-163,-165,190,-161,190,]),'BREAK':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,191,-170,191,-153,-155,-156,-140,-141,-142,-143,-144,-157,191,-149,191,-154,-158,-166,-167,-168,191,-169,191,191,-150,-159,-162,191,191,-164,191,-160,-163,-165,191,-161,191,]),'RETURN':([25,26,32,103,171,173,174,175,176,177,178,179,180,181,182,188,238,239,241,242,248,249,250,264,270,274,276,279,280,282,284,286,289,290,291,296,297,301,302,303,],[-94,-95,-96,192,-170,192,-153,-155,-156,-140,-141,-142,-143,-144,-157,192,-149,192,-154,-158,-166,-167,-168,192,-169,192,192,-150,-159,-162,192,192,-164,192,-160,-163,-165,192,-161,192,]),'INCREMENT':([25,26,30,32,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,202,205,206,208,209,210,238,239,241,242,243,244,245,247,248,249,250,256,257,258,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,56,-96,56,123,56,56,56,56,56,-24,-13,-40,-41,-42,-43,-44,-45,-14,-15,-16,-17,-18,-19,-20,-22,-23,56,56,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,56,56,-25,-26,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-170,56,-153,-155,-156,-140,-141,-142,-143,-144,-157,56,56,56,-28,-30,-31,-21,56,56,-149,56,-154,-158,56,56,56,56,-166,-167,-168,56,-27,-29,56,56,56,-169,56,56,56,56,-150,-159,-162,56,56,-164,56,-160,56,-163,-165,56,-161,56,]),'DECREMENT':([25,26,30,32,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,202,205,206,208,209,210,238,239,241,242,243,244,245,247,248,249,250,256,257,258,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,57,-96,57,124,57,57,57,57,57,-24,-13,-40,-41,-42,-43,-44,-45,-14,-15,-16,-17,-18,-19,-20,-22,-23,57,57,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,57,57,-25,-26,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-170,57,-153,-155,-156,-140,-141,-142,-143,-144,-157,57,57,57,-28,-30,-31,-21,57,57,-149,57,-154,-158,57,57,57,57,-166,-167,-168,57,-27,-29,57,57,57,-169,57,57,57,57,-150,-159,-162,57,57,-164,57,-160,57,-163,-165,57,-161,57,]),'SIZEOF':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,60,-96,60,60,60,60,60,60,-40,-41,-42,-43,-44,-45,60,60,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-170,60,-153,-155,-156,-140,-141,-142,-143,-144,-157,60,60,60,60,60,-149,60,-154,-158,60,60,60,60,-166,-167,-168,60,60,60,60,-169,60,60,60,60,-150,-159,-162,60,60,-164,60,-160,60,-163,-165,60,-161,60,]),'BITWISE_AND':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,132,133,134,135,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,202,205,206,208,209,210,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,238,239,241,242,243,244,245,247,248,249,250,256,257,258,259,260,262,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,65,-96,65,-46,-34,65,65,65,-48,65,65,-24,-13,-40,-41,-42,-43,-44,-45,-14,-15,-16,-17,-18,-19,-20,-22,-23,144,-66,-63,-58,-55,-52,65,65,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,65,65,-25,-26,65,65,-35,65,-36,-37,-46,65,-38,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-170,65,-153,-155,-156,-140,-141,-142,-143,-144,-157,65,65,65,-28,-30,-31,-21,65,65,144,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-149,65,-154,-158,65,65,65,65,-166,-167,-168,65,-27,-29,65,-39,-47,65,65,-169,65,65,65,65,-150,-159,-162,65,65,-164,65,-160,65,-163,-165,65,-161,65,]),'ADD':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,86,87,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,132,133,134,135,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,202,205,206,208,209,210,222,223,224,225,226,227,228,238,239,241,242,243,244,245,247,248,249,250,256,257,258,259,260,262,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,67,-96,67,-46,-34,67,67,67,-48,67,67,-24,-13,-40,-41,-42,-43,-44,-45,-14,-15,-16,-17,-18,-19,-20,-22,-23,153,-52,67,67,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,67,67,-25,-26,67,67,-35,67,-36,-37,-46,67,-38,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-170,67,-153,-155,-156,-140,-141,-142,-143,-144,-157,67,67,67,-28,-30,-31,-21,67,67,153,153,-53,-54,-49,-50,-51,-149,67,-154,-158,67,67,67,67,-166,-167,-168,67,-27,-29,67,-39,-47,67,67,-169,67,67,67,67,-150,-159,-162,67,67,-164,67,-160,67,-163,-165,67,-161,67,]),'SUBSTRACT':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,86,87,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,129,130,131,132,133,134,135,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,202,205,206,208,209,210,222,223,224,225,226,227,228,238,239,241,242,243,244,245,247,248,249,250,256,257,258,259,260,262,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,68,-96,68,-46,-34,68,68,68,-48,68,68,-24,-13,-40,-41,-42,-43,-44,-45,-14,-15,-16,-17,-18,-19,-20,-22,-23,154,-52,68,68,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,68,68,-25,-26,68,68,-35,68,-36,-37,-46,68,-38,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-170,68,-153,-155,-156,-140,-141,-142,-143,-144,-157,68,68,68,-28,-30,-31,-21,68,68,154,154,-53,-54,-49,-50,-51,-149,68,-154,-158,68,68,68,68,-166,-167,-168,68,-27,-29,68,-39,-47,68,68,-169,68,68,68,68,-150,-159,-162,68,68,-164,68,-160,68,-163,-165,68,-161,68,]),'BITWISE_ONE_COMPLEMENT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,69,-96,69,69,69,69,69,69,-40,-41,-42,-43,-44,-45,69,69,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-170,69,-153,-155,-156,-140,-141,-142,-143,-144,-157,69,69,69,69,69,-149,69,-154,-158,69,69,69,69,-166,-167,-168,69,69,69,69,-169,69,69,69,69,-150,-159,-162,69,69,-164,69,-160,69,-163,-165,69,-161,69,]),'LOGICAL_NOT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,70,-96,70,70,70,70,70,70,-40,-41,-42,-43,-44,-45,70,70,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-170,70,-153,-155,-156,-140,-141,-142,-143,-144,-157,70,70,70,70,70,-149,70,-154,-158,70,70,70,70,-166,-167,-168,70,70,70,70,-169,70,70,70,70,-150,-159,-162,70,70,-164,70,-160,70,-163,-165,70,-161,70,]),'INT_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,90,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,72,-96,72,72,72,72,72,72,-40,-41,-42,-43,-44,-45,158,72,72,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-170,72,-153,-155,-156,-140,-141,-142,-143,-144,-157,72,72,72,72,72,-149,72,-154,-158,72,72,72,72,-166,-167,-168,72,72,72,72,-169,72,72,72,72,-150,-159,-162,72,72,-164,72,-160,72,-163,-165,72,-161,72,]),'HEX_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,73,-96,73,73,73,73,73,73,-40,-41,-42,-43,-44,-45,73,73,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-170,73,-153,-155,-156,-140,-141,-142,-143,-144,-157,73,73,73,73,73,-149,73,-154,-158,73,73,73,73,-166,-167,-168,73,73,73,73,-169,73,73,73,73,-150,-159,-162,73,73,-164,73,-160,73,-163,-165,73,-161,73,]),'OCTAL_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,74,-96,74,74,74,74,74,74,-40,-41,-42,-43,-44,-45,74,74,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-170,74,-153,-155,-156,-140,-141,-142,-143,-144,-157,74,74,74,74,74,-149,74,-154,-158,74,74,74,74,-166,-167,-168,74,74,74,74,-169,74,74,74,74,-150,-159,-162,74,74,-164,74,-160,74,-163,-165,74,-161,74,]),'EXPONENT_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,75,-96,75,75,75,75,75,75,-40,-41,-42,-43,-44,-45,75,75,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-170,75,-153,-155,-156,-140,-141,-142,-143,-144,-157,75,75,75,75,75,-149,75,-154,-158,75,75,75,75,-166,-167,-168,75,75,75,75,-169,75,75,75,75,-150,-159,-162,75,75,-164,75,-160,75,-163,-165,75,-161,75,]),'REAL_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,76,-96,76,76,76,76,76,76,-40,-41,-42,-43,-44,-45,76,76,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-170,76,-153,-155,-156,-140,-141,-142,-143,-144,-157,76,76,76,76,76,-149,76,-154,-158,76,76,76,76,-166,-167,-168,76,76,76,76,-169,76,76,76,76,-150,-159,-162,76,76,-164,76,-160,76,-163,-165,76,-161,76,]),'CHAR_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,77,-96,77,77,77,77,77,77,-40,-41,-42,-43,-44,-45,77,77,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-170,77,-153,-155,-156,-140,-141,-142,-143,-144,-157,77,77,77,77,77,-149,77,-154,-158,77,77,77,77,-166,-167,-168,77,77,77,77,-169,77,77,77,77,-150,-159,-162,77,77,-164,77,-160,77,-163,-165,77,-161,77,]),'STR_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,78,-96,78,78,78,78,78,78,-40,-41,-42,-43,-44,-45,78,78,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-170,78,-153,-155,-156,-140,-141,-142,-143,-144,-157,78,78,78,78,78,-149,78,-154,-158,78,78,78,78,-166,-167,-168,78,78,78,78,-169,78,78,78,78,-150,-159,-162,78,78,-164,78,-160,78,-163,-165,78,-161,78,]),'TRUE':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,79,-96,79,79,79,79,79,79,-40,-41,-42,-43,-44,-45,79,79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-170,79,-153,-155,-156,-140,-141,-142,-143,-144,-157,79,79,79,79,79,-149,79,-154,-158,79,79,79,79,-166,-167,-168,79,79,79,79,-169,79,79,79,79,-150,-159,-162,79,79,-164,79,-160,79,-163,-165,79,-161,79,]),'FALSE':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,171,173,174,175,176,177,178,179,180,181,182,188,192,197,209,210,238,239,241,242,243,244,245,247,248,249,250,256,259,264,269,270,274,276,277,278,279,280,282,284,286,289,290,291,294,296,297,301,302,303,],[-94,-95,80,-96,80,80,80,80,80,80,-40,-41,-42,-43,-44,-45,80,80,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-170,80,-153,-155,-156,-140,-141,-142,-143,-144,-157,80,80,80,80,80,-149,80,-154,-158,80,80,80,80,-166,-167,-168,80,80,80,80,-169,80,80,80,80,-150,-159,-162,80,80,-164,80,-160,80,-163,-165,80,-161,80,]),'L_SQBR':([34,36,38,55,63,64,72,73,74,75,76,77,78,79,80,123,124,159,202,205,206,208,229,257,258,],[90,-124,90,125,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-125,-28,-30,-31,-21,-126,-27,-29,]),'COLON':([52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,129,131,132,133,135,139,198,199,200,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,234,257,258,260,261,262,271,295,300,],[-78,-46,-76,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-91,-79,256,-75,-28,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-93,-27,-29,-39,-92,-47,-77,301,303,]),'R_SQBR':([52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,129,131,132,133,135,139,158,198,200,201,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,261,262,271,],[-78,-46,-76,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-91,229,-79,-75,257,-28,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-92,-47,-77,]),'DIVIDE':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,87,123,124,129,131,132,133,135,202,205,206,208,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,156,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,156,156,-49,-50,-51,-27,-29,-39,-47,]),'MODULUS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,87,123,124,129,131,132,133,135,202,205,206,208,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,157,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,157,157,-49,-50,-51,-27,-29,-39,-47,]),'LEFT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,85,86,87,123,124,129,131,132,133,135,202,205,206,208,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,151,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,151,151,151,151,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'RIGHT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,85,86,87,123,124,129,131,132,133,135,202,205,206,208,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,152,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,152,152,152,152,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'LESS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,147,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,147,147,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'GREATER':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,148,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,148,148,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'LESS_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,149,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,149,149,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'GREATER_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,150,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,150,150,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,83,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,145,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,145,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'NOT_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,83,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,146,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,146,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'BITWISE_XOR':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,143,-68,-66,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,143,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'BITWISE_OR':([53,55,59,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,129,131,132,133,135,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,-24,-13,142,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,142,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'LOGICAL_AND':([53,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,129,131,132,133,135,200,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,-34,-48,141,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,141,-28,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'QUES_MARK':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,129,131,132,133,135,200,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,121,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-75,-28,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'LOGICAL_OR':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,129,131,132,133,135,200,202,205,206,208,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,257,258,260,262,],[-46,122,-34,-48,-74,-24,-13,-72,-14,-15,-16,-17,-18,-19,-20,-22,-23,-70,-68,-66,-63,-58,-55,-52,-25,-26,-35,-36,-37,-46,-38,-75,-28,-30,-31,-21,-73,-71,-69,-67,-64,-65,-59,-60,-61,-62,-56,-57,-53,-54,-49,-50,-51,-27,-29,-39,-47,]),'MULTIPLY_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[111,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'DIVIDE_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[112,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'MODULUS_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[113,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'ADD_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[114,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'SUBSTRACT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[115,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'LEFT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[116,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'RIGHT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[117,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'BITWISE_AND_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[118,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'BITWISE_XOR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[119,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'BITWISE_OR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,123,124,129,131,132,133,135,202,205,206,208,257,258,260,262,],[120,-34,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-35,-36,-37,-46,-38,-28,-30,-31,-21,-27,-29,-39,-47,]),'DOT':([55,63,64,72,73,74,75,76,77,78,79,80,123,124,202,205,206,208,257,258,],[127,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-28,-30,-31,-21,-27,-29,]),'ARROW':([55,63,64,72,73,74,75,76,77,78,79,80,123,124,202,205,206,208,257,258,],[128,-24,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-25,-26,-28,-30,-31,-21,-27,-29,]),'ELSE':([177,178,179,180,181,182,238,242,248,249,250,270,279,280,282,289,291,296,297,302,],[-140,-141,-142,-143,-144,-157,-149,-158,-166,-167,-168,-169,-150,286,-162,-164,-160,-163,-165,-161,]),'CASE':([177,178,179,180,181,182,238,242,248,249,250,270,279,280,281,282,287,289,291,292,293,296,297,299,302,304,305,],[-140,-141,-142,-143,-144,-157,-149,-158,-166,-167,-168,-169,-150,-159,-170,-162,294,-164,-160,294,-146,-163,-165,-145,-161,-148,-147,]),'DEFAULT':([177,178,179,180,181,182,238,242,248,249,250,270,279,280,281,282,287,289,291,292,293,296,297,299,302,304,305,],[-140,-141,-142,-143,-144,-157,-149,-158,-166,-167,-168,-169,-150,-159,-170,-162,295,-164,-160,295,-146,-163,-165,-145,-161,-148,-147,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,18,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,103,173,239,264,],[5,5,176,176,176,176,]),'type_specifier':([0,2,29,39,61,92,101,103,134,136,173,239,264,],[6,6,42,94,140,94,42,183,140,140,183,183,183,]),'struct_specifier':([0,2,103,173,239,264,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,103,173,239,264,],[8,8,8,8,8,8,]),'declarator':([6,33,37,42,94,183,232,],[19,89,91,98,163,89,263,]),'init_declarator_list':([6,183,],[20,20,]),'pointer':([6,33,37,42,94,140,183,232,],[21,21,21,21,21,211,21,21,]),'no_pointer':([6,33,37,42,94,183,232,],[22,22,22,22,22,22,22,]),'init_declarator':([6,33,183,],[23,88,23,]),'func_scope':([19,],[29,]),'direct_declarator':([21,22,],[34,38,]),'add_sym_struct':([27,252,],[39,39,]),'parameter_type_list':([29,],[43,]),'func_rparen_2':([29,],[44,]),'parameter_declaration':([29,101,],[46,169,]),'initializer':([30,51,197,],[49,108,255,]),'assignment_expression':([30,51,61,103,109,121,125,126,130,134,136,173,188,192,197,209,239,243,244,245,247,259,264,269,274,276,277,278,284,286,290,301,303,],[50,50,139,139,198,139,139,204,139,139,139,139,139,139,50,261,139,139,139,139,139,272,139,139,139,139,139,139,139,139,139,139,139,]),'conditional_expression':([30,51,61,103,109,121,125,126,130,134,136,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[52,52,52,52,52,52,52,52,52,52,52,234,52,52,52,52,52,52,52,52,52,52,271,52,52,52,52,52,52,52,52,52,52,234,52,52,]),'unary_expression':([30,51,56,57,58,60,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,173,188,192,197,209,210,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[53,53,129,131,133,135,53,53,53,53,133,53,53,53,53,53,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,53,53,53,53,53,133,53,53,53,53,53,133,53,53,53,53,53,53,53,53,53,53,133,53,53,]),'logical_or_expression':([30,51,61,103,109,121,125,126,130,134,136,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'postfix_expression':([30,51,56,57,58,60,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,173,188,192,197,209,210,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'unary_operator':([30,51,56,57,58,60,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,173,188,192,197,209,210,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'cast_expression':([30,51,58,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,173,188,192,197,209,210,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[59,59,132,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,226,227,228,59,59,59,59,59,59,262,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'logical_and_expression':([30,51,61,103,109,121,122,125,126,130,134,136,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[62,62,62,62,62,62,200,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'primary_expression':([30,51,56,57,58,60,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,164,173,188,192,197,209,210,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'inclusive_or_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[71,71,71,71,71,71,71,71,71,71,71,71,212,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'exclusive_or_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,142,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[81,81,81,81,81,81,81,81,81,81,81,81,81,213,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'and_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,142,143,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,214,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'equality_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,142,143,144,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,215,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'relational_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,216,217,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'shift_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,218,219,220,221,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'additive_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,222,223,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'multiplicative_expression':([30,51,61,103,109,121,122,125,126,130,134,136,141,142,143,144,145,146,147,148,149,150,151,152,153,154,164,173,188,192,197,209,239,243,244,245,247,256,259,264,269,274,276,277,278,284,286,290,294,301,303,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,224,225,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'struct_declaration_list':([39,],[92,]),'struct_declaration':([39,92,],[93,161,]),'enumerator_list':([41,],[96,]),'enumerator':([41,166,],[97,235,]),'func_rparen_1':([43,],[99,]),'function_body':([44,99,],[102,167,]),'initializer_list':([51,],[107,]),'assignment_operator':([53,],[109,]),'expression':([61,103,121,125,130,134,136,173,188,192,239,243,244,245,247,264,269,274,276,277,278,284,286,290,301,303,],[137,184,199,201,137,137,137,184,184,251,184,265,266,267,184,184,184,184,184,283,285,184,184,184,184,184,]),'type_name':([61,134,136,],[138,138,207,]),'pop_sym':([92,102,104,167,168,264,292,],[160,170,195,236,237,273,298,]),'struct_declarator_list':([94,],[162,]),'block_item_list':([103,239,],[173,264,]),'block_item':([103,173,239,264,],[174,241,174,241,]),'statement':([103,173,188,239,264,274,276,284,286,290,301,303,],[175,175,246,175,175,280,282,289,291,297,304,305,]),'compound_statement':([103,173,188,239,264,274,276,284,286,290,301,303,],[177,177,177,177,177,177,177,177,177,177,177,177,]),'expression_statement':([103,173,188,239,247,264,269,274,276,284,286,290,301,303,],[178,178,178,178,269,178,278,178,178,178,178,178,178,178,]),'selection_statement':([103,173,188,239,264,274,276,284,286,290,301,303,],[179,179,179,179,179,179,179,179,179,179,179,179,]),'iteration_statement':([103,173,188,239,264,274,276,284,286,290,301,303,],[180,180,180,180,180,180,180,180,180,180,180,180,]),'jump_statement':([103,173,188,239,264,274,276,284,286,290,301,303,],[181,181,181,181,181,181,181,181,181,181,181,181,]),'argument_expression_list':([126,],[203,]),'constant_expression':([164,294,],[233,300,]),'add_sym':([171,281,],[239,287,]),'labeled_statement_list':([287,],[292,]),'labeled_statement':([287,292,],[293,299,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',28),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',34),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',35),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',42),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',43),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',57),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',58),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym','function_definition',7,'p_function_definition_1','cparser.py',69),
  ('function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym','function_definition',6,'p_function_definition_1','cparser.py',70),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',96),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',116),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',149),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',182),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',183),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',184),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',185),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',186),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',187),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',188),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',189),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',190),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',191),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',192),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',226),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',227),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',228),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',254),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',292),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',293),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',342),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',377),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',415),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',416),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',430),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',437),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',438),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',445),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',452),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',453),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',463),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',464),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',465),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',466),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',467),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',468),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',475),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',476),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',497),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',498),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',499),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',509),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',517),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',518),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',519),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',529),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',530),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',531),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',542),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',543),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',544),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',545),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',546),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',557),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',558),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',559),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',569),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',570),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',582),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',583),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',596),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',597),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',609),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',610),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',621),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',622),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',634),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',635),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',667),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',668),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',680),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',681),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',682),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',683),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',684),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',685),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',686),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',687),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',688),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',689),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',690),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',697),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',698),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',714),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',722),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',723),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',724),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',737),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',738),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',746),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',747),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',772),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',773),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',774),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',775),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',776),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',777),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',778),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',779),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',780),
  ('struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES','struct_specifier',6,'p_struct_specifier','cparser.py',803),
  ('add_sym_struct -> L_BRACES','add_sym_struct',1,'p_add_sym_struct','cparser.py',812),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',821),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',822),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',833),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',841),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',842),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',867),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',874),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',875),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',882),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',883),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',891),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',892),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',902),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',903),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',904),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',939),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',940),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',971),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1008),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1009),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1019),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1033),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1034),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',1046),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',1047),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',1048),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',1058),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',1059),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1073),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1074),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1075),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1076),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1077),
  ('labeled_statement_list -> labeled_statement_list labeled_statement','labeled_statement_list',2,'p_labeled_statement_list','cparser.py',1085),
  ('labeled_statement_list -> labeled_statement','labeled_statement_list',1,'p_labeled_statement_list','cparser.py',1086),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1095),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1096),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1113),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1114),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1124),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1125),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1135),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1136),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1143),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1144),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1156),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1157),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1167),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1168),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES','selection_statement',9,'p_selection_statement','cparser.py',1169),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1194),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1195),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1196),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1197),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1225),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1226),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1232),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1233),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1272),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1283),
]
