
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    function_definition  : type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym\n                         | type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n                       | NULL\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR expression R_SQBR\n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n                | AUTO auto_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT assignment_expression\n    \n    auto_declarator_list : auto_declarator\n                         | auto_declarator_list COMMA auto_declarator\n    \n    auto_declarator : IDENTIFIER ASSIGNMENT assignment_expression\n                    | IDENTIFIER\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES\n    \n    add_sym_struct : L_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    statement : compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement_list : labeled_statement_list labeled_statement\n                           | labeled_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'AUTO':([0,2,3,4,5,17,24,32,39,101,102,103,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[8,8,-2,-4,-5,-3,-95,-96,-97,-165,8,-165,-165,-165,-7,-164,-145,8,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-6,-8,-143,8,-146,-148,-152,-160,-161,-162,8,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'VOID':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[9,9,-2,-4,-5,-3,-95,9,-10,-96,-97,9,-115,9,9,-116,9,-165,9,-165,9,9,-117,-165,-165,-7,-164,-145,9,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,9,-146,-148,-152,-160,-161,-162,9,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'CHAR':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[10,10,-2,-4,-5,-3,-95,10,-10,-96,-97,10,-115,10,10,-116,10,-165,10,-165,10,10,-117,-165,-165,-7,-164,-145,10,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,10,-146,-148,-152,-160,-161,-162,10,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'INT':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[11,11,-2,-4,-5,-3,-95,11,-10,-96,-97,11,-115,11,11,-116,11,-165,11,-165,11,11,-117,-165,-165,-7,-164,-145,11,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,11,-146,-148,-152,-160,-161,-162,11,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'LONG':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[12,12,-2,-4,-5,-3,-95,12,-10,-96,-97,12,-115,12,12,-116,12,-165,12,-165,12,12,-117,-165,-165,-7,-164,-145,12,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,12,-146,-148,-152,-160,-161,-162,12,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'FLOAT':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[13,13,-2,-4,-5,-3,-95,13,-10,-96,-97,13,-115,13,13,-116,13,-165,13,-165,13,13,-117,-165,-165,-7,-164,-145,13,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,13,-146,-148,-152,-160,-161,-162,13,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'DOUBLE':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[14,14,-2,-4,-5,-3,-95,14,-10,-96,-97,14,-115,14,14,-116,14,-165,14,-165,14,14,-117,-165,-165,-7,-164,-145,14,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,14,-146,-148,-152,-160,-161,-162,14,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'STRUCT':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[15,15,-2,-4,-5,-3,-95,49,-10,-96,-97,49,-115,49,49,-116,49,-165,186,-165,49,49,-117,-165,-165,-7,-164,-145,186,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,186,-146,-148,-152,-160,-161,-162,186,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'BOOL':([0,2,3,4,5,17,24,29,31,32,39,42,43,60,94,95,100,101,102,103,130,132,157,160,161,163,164,165,166,167,168,169,170,171,172,173,174,175,187,221,223,224,225,226,227,228,229,235,236,237,248,254,263,264,266,273,275,280,281,287,],[16,16,-2,-4,-5,-3,-95,16,-10,-96,-97,16,-115,16,16,-116,16,-165,16,-165,16,16,-117,-165,-165,-7,-164,-145,16,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,16,-146,-148,-152,-160,-161,-162,16,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'$end':([1,2,3,4,5,17,24,32,39,101,103,160,161,163,165,187,223,224,227,],[0,-1,-2,-4,-5,-3,-95,-96,-97,-165,-165,-165,-165,-7,-145,-9,-6,-8,-146,]),'MULTIPLY':([6,9,10,11,12,13,14,16,20,23,24,28,30,32,33,35,37,39,41,44,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,87,96,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,176,181,185,192,195,196,198,199,200,201,214,215,216,217,218,222,225,226,228,229,230,231,232,234,235,236,237,239,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[23,-106,-107,-108,-109,-110,-111,-113,35,-126,-95,-112,65,-96,23,-127,23,-97,65,23,-47,-35,65,65,65,-49,65,65,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,151,23,65,-112,65,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,65,65,-26,-27,65,65,-36,65,-37,-38,-47,65,-39,65,23,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-164,65,-147,-149,-150,-134,-135,-136,-137,-138,-151,23,65,65,-29,-31,-32,-21,65,65,35,151,151,-50,-51,-52,23,-143,65,-148,-152,65,65,65,65,-160,-161,-162,-112,65,-28,-30,65,-40,-48,65,65,-163,65,65,65,65,-144,-153,-156,65,65,-158,65,-154,65,-157,-159,65,-155,65,]),'IDENTIFIER':([6,8,9,10,11,12,13,14,15,16,20,21,23,24,28,30,32,33,35,37,39,40,41,44,49,55,56,57,59,60,64,65,66,67,68,69,96,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,123,124,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,176,181,185,186,199,200,222,225,226,228,229,230,231,232,234,235,236,237,239,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-128,27,-106,-107,-108,-109,-110,-111,28,-113,36,36,-126,-95,-112,63,-96,-128,-127,-128,-97,27,63,-128,104,63,63,63,63,63,-41,-42,-43,-44,-45,-46,-128,63,-112,63,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,63,63,63,63,195,196,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-164,63,-147,-149,-150,-134,-135,-136,-137,-138,-151,-128,63,63,239,63,63,-128,-143,63,-148,-152,63,63,63,63,-160,-161,-162,-112,63,63,63,63,-163,63,63,63,63,-144,-153,-156,63,63,-158,63,-154,63,-157,-159,63,-155,63,]),'L_PAREN':([6,9,10,11,12,13,14,16,18,20,21,23,24,28,30,32,33,34,35,36,37,38,39,41,44,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,96,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,164,166,167,168,169,170,171,172,173,174,175,176,178,179,180,181,182,185,192,195,196,198,199,200,219,222,225,226,228,229,230,231,232,234,235,236,237,239,240,241,242,243,248,252,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-128,-106,-107,-108,-109,-110,-111,-113,31,37,37,-126,-95,-112,60,-96,-128,-121,-127,-123,-128,-122,-97,60,-128,122,126,126,130,132,60,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-128,60,-112,60,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,60,130,-26,-27,60,60,60,60,60,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,-124,-164,60,-147,-149,-150,-134,-135,-136,-137,-138,-151,-128,230,231,232,60,234,60,-29,-31,-32,-21,60,130,-125,-128,-143,60,-148,-152,60,60,60,60,-160,-161,-162,-112,130,-28,-30,60,60,261,60,-163,60,60,60,60,-144,-153,-156,60,60,-158,60,-154,130,-157,-159,60,-155,60,]),'SEMI_COLON':([7,18,19,22,24,25,26,27,32,34,36,38,39,47,50,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,99,102,119,120,125,127,128,129,131,135,155,158,159,164,166,167,168,169,170,171,172,173,174,175,177,181,183,184,185,188,190,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,225,226,228,229,234,235,236,237,238,241,242,244,245,246,247,248,253,254,255,258,260,263,264,266,268,270,272,273,274,275,280,281,286,287,288,],[24,-100,32,-98,-95,39,-102,-105,-96,-121,-123,-122,-97,103,-101,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-99,-100,-103,-104,161,175,-26,-27,-36,-37,-38,-47,-39,-92,-124,221,-119,-164,175,-147,-149,-150,-134,-135,-136,-137,-138,-151,229,175,235,236,237,-80,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-125,-114,-143,175,-148,-152,175,-160,-161,-162,254,-28,-30,-40,-93,-48,-120,175,175,-163,-78,175,175,-144,-153,-156,175,175,280,-158,175,-154,-157,-159,175,-155,175,]),'R_PAREN':([9,10,11,12,13,14,16,23,29,31,34,35,36,38,45,48,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,97,104,119,120,122,125,127,128,129,131,133,134,135,136,155,162,175,188,190,192,193,194,195,196,197,198,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,229,241,242,244,245,246,249,250,251,255,256,262,267,269,],[-106,-107,-108,-109,-110,-111,-113,-126,47,-10,-121,-127,-123,-122,99,-129,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,155,-131,-112,-26,-27,192,-36,-37,-38,-47,-39,198,200,-92,-132,-124,-130,-151,-80,-76,-29,242,-33,-31,-32,244,-21,-133,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-125,-152,-28,-30,-40,-93,-48,258,259,260,-78,-34,268,272,274,]),'COMMA':([18,19,22,25,26,27,34,36,38,45,48,50,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,97,119,120,125,127,128,129,131,133,135,155,158,159,162,177,188,189,190,191,192,193,194,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,238,241,242,244,245,246,247,249,250,251,255,256,267,269,],[-100,33,-98,40,-102,-105,-121,-123,-122,100,-129,-101,-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-99,-100,-103,-104,-131,-26,-27,-36,-37,-38,-47,-39,199,-92,-124,222,-119,-130,199,-80,199,-76,199,-29,243,-33,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-125,199,-28,-30,-40,-93,-48,-120,199,199,199,-78,-34,199,199,]),'ASSIGNMENT':([18,27,34,36,38,52,54,62,63,71,72,73,74,75,76,77,78,79,80,89,119,120,125,127,128,129,131,155,192,195,196,198,219,241,242,244,246,],[30,41,-121,-123,-122,106,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,30,-26,-27,-36,-37,-38,-47,-39,-124,-29,-31,-32,-21,-125,-28,-30,-40,-48,]),'R_BRACES':([24,32,39,94,95,102,156,157,164,166,167,168,169,170,171,172,173,174,175,221,225,228,229,235,236,237,248,254,257,263,264,266,273,275,276,277,280,281,282,283,287,289,290,],[-95,-96,-97,-165,-116,165,220,-117,225,227,-147,-149,-150,-134,-135,-136,-137,-138,-151,-118,-143,-148,-152,-160,-161,-162,-165,-163,263,-144,-153,-156,-158,-154,-165,-140,-157,-159,287,-139,-155,-142,-141,]),'L_BRACES':([24,28,32,39,46,47,98,99,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,239,248,254,258,259,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,43,-96,-97,102,-12,102,-11,164,-164,164,-147,-149,-150,-134,-135,-136,-137,-138,-151,164,-143,164,-148,-152,-160,-161,-162,43,164,-163,164,265,164,-144,-153,-156,164,164,-158,164,-154,-157,-159,164,-155,164,]),'IF':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,178,-164,178,-147,-149,-150,-134,-135,-136,-137,-138,-151,178,-143,178,-148,-152,-160,-161,-162,178,-163,178,178,-144,-153,-156,178,178,-158,178,-154,-157,-159,178,-155,178,]),'SWITCH':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,179,-164,179,-147,-149,-150,-134,-135,-136,-137,-138,-151,179,-143,179,-148,-152,-160,-161,-162,179,-163,179,179,-144,-153,-156,179,179,-158,179,-154,-157,-159,179,-155,179,]),'WHILE':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,233,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,180,-164,180,-147,-149,-150,-134,-135,-136,-137,-138,-151,180,-143,180,-148,-152,252,-160,-161,-162,180,-163,180,180,-144,-153,-156,180,180,-158,180,-154,-157,-159,180,-155,180,]),'DO':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,181,-164,181,-147,-149,-150,-134,-135,-136,-137,-138,-151,181,-143,181,-148,-152,-160,-161,-162,181,-163,181,181,-144,-153,-156,181,181,-158,181,-154,-157,-159,181,-155,181,]),'FOR':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,182,-164,182,-147,-149,-150,-134,-135,-136,-137,-138,-151,182,-143,182,-148,-152,-160,-161,-162,182,-163,182,182,-144,-153,-156,182,182,-158,182,-154,-157,-159,182,-155,182,]),'CONTINUE':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,183,-164,183,-147,-149,-150,-134,-135,-136,-137,-138,-151,183,-143,183,-148,-152,-160,-161,-162,183,-163,183,183,-144,-153,-156,183,183,-158,183,-154,-157,-159,183,-155,183,]),'BREAK':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,184,-164,184,-147,-149,-150,-134,-135,-136,-137,-138,-151,184,-143,184,-148,-152,-160,-161,-162,184,-163,184,184,-144,-153,-156,184,184,-158,184,-154,-157,-159,184,-155,184,]),'RETURN':([24,32,39,102,164,166,167,168,169,170,171,172,173,174,175,181,225,226,228,229,235,236,237,248,254,258,260,263,264,266,268,270,273,274,275,280,281,286,287,288,],[-95,-96,-97,185,-164,185,-147,-149,-150,-134,-135,-136,-137,-138,-151,185,-143,185,-148,-152,-160,-161,-162,185,-163,185,185,-144,-153,-156,185,185,-158,185,-154,-157,-159,185,-155,185,]),'INCREMENT':([24,30,32,39,41,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,192,195,196,198,199,200,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,55,-96,-97,55,119,55,55,55,55,55,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,55,55,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,55,55,-26,-27,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-164,55,-147,-149,-150,-134,-135,-136,-137,-138,-151,55,55,-29,-31,-32,-21,55,55,-143,55,-148,-152,55,55,55,55,-160,-161,-162,55,-28,-30,55,55,55,-163,55,55,55,55,-144,-153,-156,55,55,-158,55,-154,55,-157,-159,55,-155,55,]),'DECREMENT':([24,30,32,39,41,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,192,195,196,198,199,200,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,56,-96,-97,56,120,56,56,56,56,56,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,56,56,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,56,56,-26,-27,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-164,56,-147,-149,-150,-134,-135,-136,-137,-138,-151,56,56,-29,-31,-32,-21,56,56,-143,56,-148,-152,56,56,56,56,-160,-161,-162,56,-28,-30,56,56,56,-163,56,56,56,56,-144,-153,-156,56,56,-158,56,-154,56,-157,-159,56,-155,56,]),'SIZEOF':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,59,-96,-97,59,59,59,59,59,59,-41,-42,-43,-44,-45,-46,59,59,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-164,59,-147,-149,-150,-134,-135,-136,-137,-138,-151,59,59,59,59,-143,59,-148,-152,59,59,59,59,-160,-161,-162,59,59,59,59,-163,59,59,59,59,-144,-153,-156,59,59,-158,59,-154,59,-157,-159,59,-155,59,]),'BITWISE_AND':([24,30,32,39,41,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,192,195,196,198,199,200,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,64,-96,-97,64,-47,-35,64,64,64,-49,64,64,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,140,-67,-64,-59,-56,-53,64,64,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,64,64,-26,-27,64,64,-36,64,-37,-38,-47,64,-39,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-164,64,-147,-149,-150,-134,-135,-136,-137,-138,-151,64,64,-29,-31,-32,-21,64,64,140,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-143,64,-148,-152,64,64,64,64,-160,-161,-162,64,-28,-30,64,-40,-48,64,64,-163,64,64,64,64,-144,-153,-156,64,64,-158,64,-154,64,-157,-159,64,-155,64,]),'ADD':([24,30,32,39,41,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,86,87,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,192,195,196,198,199,200,212,213,214,215,216,217,218,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,66,-96,-97,66,-47,-35,66,66,66,-49,66,66,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,149,-53,66,66,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,66,66,-26,-27,66,66,-36,66,-37,-38,-47,66,-39,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-164,66,-147,-149,-150,-134,-135,-136,-137,-138,-151,66,66,-29,-31,-32,-21,66,66,149,149,-54,-55,-50,-51,-52,-143,66,-148,-152,66,66,66,66,-160,-161,-162,66,-28,-30,66,-40,-48,66,66,-163,66,66,66,66,-144,-153,-156,66,66,-158,66,-154,66,-157,-159,66,-155,66,]),'SUBSTRACT':([24,30,32,39,41,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,86,87,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,192,195,196,198,199,200,212,213,214,215,216,217,218,225,226,228,229,230,231,232,234,235,236,237,240,241,242,243,244,246,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,67,-96,-97,67,-47,-35,67,67,67,-49,67,67,-25,-13,-41,-42,-43,-44,-45,-46,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,150,-53,67,67,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,67,67,-26,-27,67,67,-36,67,-37,-38,-47,67,-39,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-164,67,-147,-149,-150,-134,-135,-136,-137,-138,-151,67,67,-29,-31,-32,-21,67,67,150,150,-54,-55,-50,-51,-52,-143,67,-148,-152,67,67,67,67,-160,-161,-162,67,-28,-30,67,-40,-48,67,67,-163,67,67,67,67,-144,-153,-156,67,67,-158,67,-154,67,-157,-159,67,-155,67,]),'BITWISE_ONE_COMPLEMENT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,68,-96,-97,68,68,68,68,68,68,-41,-42,-43,-44,-45,-46,68,68,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-164,68,-147,-149,-150,-134,-135,-136,-137,-138,-151,68,68,68,68,-143,68,-148,-152,68,68,68,68,-160,-161,-162,68,68,68,68,-163,68,68,68,68,-144,-153,-156,68,68,-158,68,-154,68,-157,-159,68,-155,68,]),'LOGICAL_NOT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,69,-96,-97,69,69,69,69,69,69,-41,-42,-43,-44,-45,-46,69,69,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-164,69,-147,-149,-150,-134,-135,-136,-137,-138,-151,69,69,69,69,-143,69,-148,-152,69,69,69,69,-160,-161,-162,69,69,69,69,-163,69,69,69,69,-144,-153,-156,69,69,-158,69,-154,69,-157,-159,69,-155,69,]),'INT_CONSTANT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,90,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,71,-96,-97,71,71,71,71,71,71,-41,-42,-43,-44,-45,-46,154,71,71,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-164,71,-147,-149,-150,-134,-135,-136,-137,-138,-151,71,71,71,71,-143,71,-148,-152,71,71,71,71,-160,-161,-162,71,71,71,71,-163,71,71,71,71,-144,-153,-156,71,71,-158,71,-154,71,-157,-159,71,-155,71,]),'HEX_CONSTANT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,72,-96,-97,72,72,72,72,72,72,-41,-42,-43,-44,-45,-46,72,72,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-164,72,-147,-149,-150,-134,-135,-136,-137,-138,-151,72,72,72,72,-143,72,-148,-152,72,72,72,72,-160,-161,-162,72,72,72,72,-163,72,72,72,72,-144,-153,-156,72,72,-158,72,-154,72,-157,-159,72,-155,72,]),'OCTAL_CONSTANT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,73,-96,-97,73,73,73,73,73,73,-41,-42,-43,-44,-45,-46,73,73,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-164,73,-147,-149,-150,-134,-135,-136,-137,-138,-151,73,73,73,73,-143,73,-148,-152,73,73,73,73,-160,-161,-162,73,73,73,73,-163,73,73,73,73,-144,-153,-156,73,73,-158,73,-154,73,-157,-159,73,-155,73,]),'EXPONENT_CONSTANT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,74,-96,-97,74,74,74,74,74,74,-41,-42,-43,-44,-45,-46,74,74,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-164,74,-147,-149,-150,-134,-135,-136,-137,-138,-151,74,74,74,74,-143,74,-148,-152,74,74,74,74,-160,-161,-162,74,74,74,74,-163,74,74,74,74,-144,-153,-156,74,74,-158,74,-154,74,-157,-159,74,-155,74,]),'REAL_CONSTANT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,75,-96,-97,75,75,75,75,75,75,-41,-42,-43,-44,-45,-46,75,75,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-164,75,-147,-149,-150,-134,-135,-136,-137,-138,-151,75,75,75,75,-143,75,-148,-152,75,75,75,75,-160,-161,-162,75,75,75,75,-163,75,75,75,75,-144,-153,-156,75,75,-158,75,-154,75,-157,-159,75,-155,75,]),'CHAR_CONSTANT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,76,-96,-97,76,76,76,76,76,76,-41,-42,-43,-44,-45,-46,76,76,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-164,76,-147,-149,-150,-134,-135,-136,-137,-138,-151,76,76,76,76,-143,76,-148,-152,76,76,76,76,-160,-161,-162,76,76,76,76,-163,76,76,76,76,-144,-153,-156,76,76,-158,76,-154,76,-157,-159,76,-155,76,]),'STR_CONSTANT':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,77,-96,-97,77,77,77,77,77,77,-41,-42,-43,-44,-45,-46,77,77,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-164,77,-147,-149,-150,-134,-135,-136,-137,-138,-151,77,77,77,77,-143,77,-148,-152,77,77,77,77,-160,-161,-162,77,77,77,77,-163,77,77,77,77,-144,-153,-156,77,77,-158,77,-154,77,-157,-159,77,-155,77,]),'TRUE':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,78,-96,-97,78,78,78,78,78,78,-41,-42,-43,-44,-45,-46,78,78,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-164,78,-147,-149,-150,-134,-135,-136,-137,-138,-151,78,78,78,78,-143,78,-148,-152,78,78,78,78,-160,-161,-162,78,78,78,78,-163,78,78,78,78,-144,-153,-156,78,78,-158,78,-154,78,-157,-159,78,-155,78,]),'FALSE':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,79,-96,-97,79,79,79,79,79,79,-41,-42,-43,-44,-45,-46,79,79,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-164,79,-147,-149,-150,-134,-135,-136,-137,-138,-151,79,79,79,79,-143,79,-148,-152,79,79,79,79,-160,-161,-162,79,79,79,79,-163,79,79,79,79,-144,-153,-156,79,79,-158,79,-154,79,-157,-159,79,-155,79,]),'NULL':([24,30,32,39,41,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,166,167,168,169,170,171,172,173,174,175,181,185,199,200,225,226,228,229,230,231,232,234,235,236,237,240,243,248,253,254,258,260,261,262,263,264,266,268,270,273,274,275,278,280,281,286,287,288,],[-95,80,-96,-97,80,80,80,80,80,80,-41,-42,-43,-44,-45,-46,80,80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-164,80,-147,-149,-150,-134,-135,-136,-137,-138,-151,80,80,80,80,-143,80,-148,-152,80,80,80,80,-160,-161,-162,80,80,80,80,-163,80,80,80,80,-144,-153,-156,80,80,-158,80,-154,80,-157,-159,80,-155,80,]),'L_SQBR':([34,36,38,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,155,192,195,196,198,219,241,242,],[90,-123,90,121,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-124,-29,-31,-32,-21,-125,-28,-30,]),'COLON':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,119,120,125,127,128,129,131,135,188,189,190,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,245,246,255,279,284,285,],[-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-92,-80,240,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-93,-48,-78,286,288,-94,]),'R_SQBR':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,119,120,125,127,128,129,131,135,154,188,190,191,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,245,246,255,],[-79,-47,-77,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-92,219,-80,-76,241,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-93,-48,-78,]),'DIVIDE':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,87,119,120,125,127,128,129,131,192,195,196,198,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,152,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,152,152,-50,-51,-52,-28,-30,-40,-48,]),'MODULUS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,87,119,120,125,127,128,129,131,192,195,196,198,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,153,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,153,153,-50,-51,-52,-28,-30,-40,-48,]),'LEFT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,85,86,87,119,120,125,127,128,129,131,192,195,196,198,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,147,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,147,147,147,147,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'RIGHT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,85,86,87,119,120,125,127,128,129,131,192,195,196,198,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,148,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,148,148,148,148,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,143,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,143,143,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,144,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,144,144,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LESS_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,145,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,145,145,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'GREATER_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,146,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,146,146,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,83,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,141,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,141,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'NOT_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,83,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,142,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,142,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_XOR':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,139,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,139,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'BITWISE_OR':([52,54,58,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,119,120,125,127,128,129,131,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,-25,-13,138,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,138,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_AND':([52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,119,120,125,127,128,129,131,190,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,-35,-49,137,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,137,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'QUES_MARK':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,119,120,125,127,128,129,131,190,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,117,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'LOGICAL_OR':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,119,120,125,127,128,129,131,190,192,195,196,198,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,241,242,244,246,],[-47,118,-35,-49,-75,-25,-13,-73,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-71,-69,-67,-64,-59,-56,-53,-26,-27,-36,-37,-38,-47,-39,-76,-29,-31,-32,-21,-74,-72,-70,-68,-65,-66,-60,-61,-62,-63,-57,-58,-54,-55,-50,-51,-52,-28,-30,-40,-48,]),'MULTIPLY_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[107,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'DIVIDE_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[108,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'MODULUS_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[109,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'ADD_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[110,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'SUBSTRACT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[111,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'LEFT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[112,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'RIGHT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[113,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_AND_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[114,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_XOR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[115,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'BITWISE_OR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,125,127,128,129,131,192,195,196,198,241,242,244,246,],[116,-35,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-36,-37,-38,-47,-39,-29,-31,-32,-21,-28,-30,-40,-48,]),'DOT':([54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,192,195,196,198,241,242,],[123,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ARROW':([54,62,63,71,72,73,74,75,76,77,78,79,80,119,120,192,195,196,198,241,242,],[124,-25,-13,-14,-15,-16,-17,-18,-19,-20,-22,-23,-24,-26,-27,-29,-31,-32,-21,-28,-30,]),'ELSE':([170,171,172,173,174,175,225,229,235,236,237,254,263,264,266,273,275,280,281,287,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,270,-156,-158,-154,-157,-159,-155,]),'CASE':([170,171,172,173,174,175,225,229,235,236,237,254,263,264,265,266,271,273,275,276,277,280,281,283,287,289,290,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,-153,-164,-156,278,-158,-154,278,-140,-157,-159,-139,-155,-142,-141,]),'DEFAULT':([170,171,172,173,174,175,225,229,235,236,237,254,263,264,265,266,271,273,275,276,277,280,281,283,287,289,290,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,-153,-164,-156,279,-158,-154,279,-140,-157,-159,-139,-155,-142,-141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,17,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,102,166,226,248,],[5,5,169,169,169,169,]),'type_specifier':([0,2,29,42,60,94,100,102,130,132,166,226,248,],[6,6,44,96,136,96,44,176,136,136,176,176,176,]),'struct_specifier':([0,2,102,166,226,248,],[7,7,7,7,7,7,]),'declarator':([6,33,37,44,96,176,222,],[18,89,91,97,159,89,247,]),'init_declarator_list':([6,176,],[19,19,]),'pointer':([6,33,37,44,96,136,176,222,],[20,20,20,20,20,201,20,20,]),'no_pointer':([6,33,37,44,96,176,222,],[21,21,21,21,21,21,21,]),'init_declarator':([6,33,176,],[22,88,22,]),'auto_declarator_list':([8,],[25,]),'auto_declarator':([8,40,],[26,92,]),'func_scope':([18,],[29,]),'direct_declarator':([20,21,],[34,38,]),'add_sym_struct':([28,239,],[42,42,]),'parameter_type_list':([29,],[45,]),'func_rparen_2':([29,],[46,]),'parameter_declaration':([29,100,],[48,162,]),'assignment_expression':([30,41,60,102,105,117,121,122,126,130,132,166,181,185,199,226,230,231,232,234,243,248,253,258,260,261,262,268,270,274,286,288,],[50,93,135,135,188,135,135,194,135,135,135,135,135,135,245,135,135,135,135,135,256,135,135,135,135,135,135,135,135,135,135,135,]),'conditional_expression':([30,41,60,102,105,117,121,122,126,130,132,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,255,51,51,51,51,51,51,51,51,51,51,285,51,51,]),'unary_expression':([30,41,55,56,57,59,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,166,181,185,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[52,52,125,127,129,131,52,52,52,52,129,52,52,52,52,52,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,52,52,52,52,129,52,52,52,52,52,129,52,52,52,52,52,52,52,52,52,52,129,52,52,]),'logical_or_expression':([30,41,60,102,105,117,121,122,126,130,132,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'postfix_expression':([30,41,55,56,57,59,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,166,181,185,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([30,41,55,56,57,59,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,166,181,185,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'cast_expression':([30,41,57,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,166,181,185,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[58,58,128,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,216,217,218,58,58,58,58,246,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'logical_and_expression':([30,41,60,102,105,117,118,121,122,126,130,132,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[61,61,61,61,61,61,190,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'primary_expression':([30,41,55,56,57,59,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,166,181,185,199,200,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'inclusive_or_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[70,70,70,70,70,70,70,70,70,70,70,70,202,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'exclusive_or_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,138,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[81,81,81,81,81,81,81,81,81,81,81,81,81,203,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'and_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,138,139,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,204,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'equality_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,138,139,140,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,205,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'relational_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,206,207,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'shift_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,208,209,210,211,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'additive_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,212,213,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'multiplicative_expression':([30,41,60,102,105,117,118,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,166,181,185,199,226,230,231,232,234,240,243,248,253,258,260,261,262,268,270,274,278,286,288,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,214,215,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'struct_declaration_list':([42,],[94,]),'struct_declaration':([42,94,],[95,157,]),'func_rparen_1':([45,],[98,]),'function_body':([46,98,],[101,160,]),'assignment_operator':([52,],[105,]),'expression':([60,102,117,121,126,130,132,166,181,185,226,230,231,232,234,248,253,258,260,261,262,268,270,274,286,288,],[133,177,189,191,133,133,133,177,177,238,177,249,250,251,177,177,177,177,177,267,269,177,177,177,177,177,]),'type_name':([60,130,132,],[134,134,197,]),'pop_sym':([94,101,103,160,161,248,276,],[156,163,187,223,224,257,282,]),'struct_declarator_list':([96,],[158,]),'block_item_list':([102,226,],[166,248,]),'block_item':([102,166,226,248,],[167,228,167,228,]),'statement':([102,166,181,226,248,258,260,268,270,274,286,288,],[168,168,233,168,168,264,266,273,275,281,289,290,]),'compound_statement':([102,166,181,226,248,258,260,268,270,274,286,288,],[170,170,170,170,170,170,170,170,170,170,170,170,]),'expression_statement':([102,166,181,226,234,248,253,258,260,268,270,274,286,288,],[171,171,171,171,253,171,262,171,171,171,171,171,171,171,]),'selection_statement':([102,166,181,226,248,258,260,268,270,274,286,288,],[172,172,172,172,172,172,172,172,172,172,172,172,]),'iteration_statement':([102,166,181,226,248,258,260,268,270,274,286,288,],[173,173,173,173,173,173,173,173,173,173,173,173,]),'jump_statement':([102,166,181,226,248,258,260,268,270,274,286,288,],[174,174,174,174,174,174,174,174,174,174,174,174,]),'argument_expression_list':([122,],[193,]),'add_sym':([164,265,],[226,271,]),'labeled_statement_list':([271,],[276,]),'labeled_statement':([271,276,],[277,283,]),'constant_expression':([278,],[284,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',28),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',37),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',38),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',45),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',46),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',60),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',61),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym','function_definition',7,'p_function_definition_1','cparser.py',91),
  ('function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym','function_definition',6,'p_function_definition_1','cparser.py',92),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',114),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',132),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',167),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',201),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',202),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',203),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',204),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',205),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',206),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',207),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',208),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',209),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',210),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',211),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',212),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',259),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',260),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',261),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',297),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',350),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',351),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',424),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',467),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',509),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',510),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',528),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',535),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',536),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',543),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',550),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',551),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',561),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',562),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',563),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',564),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',565),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',566),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',573),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',574),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',595),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',596),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',597),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',607),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',615),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',616),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',617),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',627),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',628),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',629),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',640),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',641),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',642),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',643),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',644),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',655),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',656),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',657),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',667),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',668),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',680),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',681),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',694),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',695),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',707),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',708),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',719),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',720),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',733),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',734),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',781),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',782),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',794),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',795),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',796),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',797),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',798),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',799),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',800),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',801),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',802),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',803),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',804),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',811),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',812),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',828),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',836),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',837),
  ('declaration -> AUTO auto_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',838),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',851),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',852),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',860),
  ('init_declarator -> declarator ASSIGNMENT assignment_expression','init_declarator',3,'p_init_declarator','cparser.py',861),
  ('auto_declarator_list -> auto_declarator','auto_declarator_list',1,'p_auto_declarator_list','cparser.py',895),
  ('auto_declarator_list -> auto_declarator_list COMMA auto_declarator','auto_declarator_list',3,'p_auto_declarator_list','cparser.py',896),
  ('auto_declarator -> IDENTIFIER ASSIGNMENT assignment_expression','auto_declarator',3,'p_auto_declarator','cparser.py',903),
  ('auto_declarator -> IDENTIFIER','auto_declarator',1,'p_auto_declarator','cparser.py',904),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',928),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',929),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',930),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',931),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',932),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',933),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',934),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',935),
  ('struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES','struct_specifier',6,'p_struct_specifier','cparser.py',957),
  ('add_sym_struct -> L_BRACES','add_sym_struct',1,'p_add_sym_struct','cparser.py',966),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',974),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',975),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',986),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',994),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',995),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1065),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1066),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',1076),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',1077),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',1078),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',1113),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',1114),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',1141),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1159),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1160),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1170),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1184),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1185),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1224),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1225),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1226),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1227),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1228),
  ('labeled_statement_list -> labeled_statement_list labeled_statement','labeled_statement_list',2,'p_labeled_statement_list','cparser.py',1236),
  ('labeled_statement_list -> labeled_statement','labeled_statement_list',1,'p_labeled_statement_list','cparser.py',1237),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1246),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1247),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1279),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1280),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1293),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1294),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1308),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1309),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1316),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1317),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1329),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1330),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1340),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1341),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES','selection_statement',9,'p_selection_statement','cparser.py',1342),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1413),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1414),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1415),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1416),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1507),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1508),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1517),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1518),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1562),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1573),
]
