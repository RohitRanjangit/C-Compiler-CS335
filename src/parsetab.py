
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BLOCK_COMMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INLINE_COMMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : declaration_specifiers declarator declaration_list compound_statement\n\t\t\t            | declaration_specifiers declarator compound_statement\n    \n    \n    function_definition : declarator declaration_list compound_statement\n\t\t\t            | declarator compound_statement\n    \n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_specifier R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : declaration_specifiers SEMI_COLON\n\t            | declaration_specifiers init_declarator_list SEMI_COLON\n    \n    declaration_specifiers : storage_class_specifier\n                           | storage_class_specifier declaration_specifiers\n                           | type_specifier\n                           | type_specifier declaration_specifiers\n                           | type_qualifier\n                           | type_qualifier declaration_specifiers\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    storage_class_specifier : TYPEDEF\n                            | EXTERN\n                            | STATIC\n                            | AUTO\n                            | REGISTER\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | SIGNED\n                   | UNSIGNED\n                   | struct_or_union_specifier\n                   | enum_specifier\n                   | BOOL\n    \n    struct_or_union_specifier : struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES\n\t                          | struct_or_union L_BRACES struct_declaration_list R_BRACES\n\t                          | struct_or_union IDENTIFIER\n    \n    struct_or_union : STRUCT\n\t                | UNION\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI_COLON\n    \n    specifier_qualifier_list : type_specifier specifier_qualifier_list\n                             | type_specifier\n                             | type_qualifier specifier_qualifier_list\n                             | type_qualifier\n    \n    struct_declarator_list : struct_declarator\n\t                       | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n                      | COLON constant_expression\n                      | declarator COLON constant_expression\n    \n    enum_specifier : ENUM L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    type_qualifier : CONST\n\t               | VOLATILE\n    \n    declarator : pointer direct_declarator\n\t           | direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR constant_expression R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n                      | direct_declarator L_PAREN parameter_type_list R_PAREN\n                      | direct_declarator L_PAREN identifier_list R_PAREN\n                      | direct_declarator L_PAREN R_PAREN\n    \n    pointer : MULTIPLY\n\t        | MULTIPLY type_qualifier_list\n            | MULTIPLY pointer\n            | MULTIPLY type_qualifier_list pointer\n    \n    type_qualifier_list : type_qualifier\n\t                    | type_qualifier_list type_qualifier\n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n\t                      | declaration_specifiers abstract_declarator\n\t                      | declaration_specifiers\n    \n    identifier_list : IDENTIFIER\n\t                | identifier_list COMMA IDENTIFIER\n    \n    type_name : specifier_qualifier_list\n\t          | specifier_qualifier_list abstract_declarator\n    \n    abstract_declarator : pointer\n\t                    | direct_abstract_declarator\n\t                    | pointer direct_abstract_declarator\n    \n    direct_abstract_declarator : L_PAREN abstract_declarator R_PAREN\n\t                           | L_SQBR R_SQBR\n\t                           | L_SQBR constant_expression R_SQBR\n\t                           | direct_abstract_declarator L_SQBR R_SQBR\n                               | direct_abstract_declarator L_SQBR constant_expression R_SQBR\n                               | L_PAREN R_PAREN\n                               | L_PAREN parameter_type_list R_PAREN\n                               | direct_abstract_declarator L_PAREN R_PAREN\n                               | direct_abstract_declarator L_PAREN parameter_type_list R_PAREN\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES statement_list R_BRACES\n\t                   | L_BRACES declaration_list R_BRACES\n\t                   | L_BRACES declaration_list statement_list R_BRACES\n    \n    declaration_list : declaration\n\t                 | declaration_list declaration\n    \n    statement_list : statement\n\t               | statement_list statement\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : GOTO IDENTIFIER SEMI_COLON\n\t               | CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    '
    
_lr_action_items = {'TYPEDEF':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,130,136,143,154,159,161,223,224,225,226,232,235,243,249,295,301,308,325,],[13,13,-2,-4,-5,13,13,13,13,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,13,-89,13,-9,-198,13,-144,13,-120,-137,13,-7,-90,-8,-199,-194,13,-149,-152,-147,-6,-195,-196,-148,-150,13,-151,13,-119,-135,-197,13,-118,-136,13,]),'EXTERN':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,130,136,143,154,159,161,223,224,225,226,232,235,243,249,295,301,308,325,],[14,14,-2,-4,-5,14,14,14,14,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,14,-89,14,-9,-198,14,-144,14,-120,-137,14,-7,-90,-8,-199,-194,14,-149,-152,-147,-6,-195,-196,-148,-150,14,-151,14,-119,-135,-197,14,-118,-136,14,]),'STATIC':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,130,136,143,154,159,161,223,224,225,226,232,235,243,249,295,301,308,325,],[15,15,-2,-4,-5,15,15,15,15,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,15,-89,15,-9,-198,15,-144,15,-120,-137,15,-7,-90,-8,-199,-194,15,-149,-152,-147,-6,-195,-196,-148,-150,15,-151,15,-119,-135,-197,15,-118,-136,15,]),'AUTO':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,130,136,143,154,159,161,223,224,225,226,232,235,243,249,295,301,308,325,],[16,16,-2,-4,-5,16,16,16,16,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,16,-89,16,-9,-198,16,-144,16,-120,-137,16,-7,-90,-8,-199,-194,16,-149,-152,-147,-6,-195,-196,-148,-150,16,-151,16,-119,-135,-197,16,-118,-136,16,]),'REGISTER':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,62,63,64,66,68,69,70,72,130,136,143,154,159,161,223,224,225,226,232,235,243,249,295,301,308,325,],[17,17,-2,-4,-5,17,17,17,17,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,17,-89,17,-9,-198,17,-144,17,-120,-137,17,-7,-90,-8,-199,-194,17,-149,-152,-147,-6,-195,-196,-148,-150,17,-151,17,-119,-135,-197,17,-118,-136,17,]),'VOID':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[18,18,-2,-4,-5,18,18,18,18,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,18,-89,18,-9,-198,18,-144,18,-120,18,-137,18,-7,-90,-8,-199,-194,18,18,-149,18,-152,-147,18,18,-123,18,18,-6,-195,-196,18,-148,-150,18,-151,18,18,-119,-124,-135,-197,18,-118,-125,-136,18,]),'CHAR':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[19,19,-2,-4,-5,19,19,19,19,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,19,-89,19,-9,-198,19,-144,19,-120,19,-137,19,-7,-90,-8,-199,-194,19,19,-149,19,-152,-147,19,19,-123,19,19,-6,-195,-196,19,-148,-150,19,-151,19,19,-119,-124,-135,-197,19,-118,-125,-136,19,]),'SHORT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[20,20,-2,-4,-5,20,20,20,20,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,20,-89,20,-9,-198,20,-144,20,-120,20,-137,20,-7,-90,-8,-199,-194,20,20,-149,20,-152,-147,20,20,-123,20,20,-6,-195,-196,20,-148,-150,20,-151,20,20,-119,-124,-135,-197,20,-118,-125,-136,20,]),'INT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[21,21,-2,-4,-5,21,21,21,21,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,21,-89,21,-9,-198,21,-144,21,-120,21,-137,21,-7,-90,-8,-199,-194,21,21,-149,21,-152,-147,21,21,-123,21,21,-6,-195,-196,21,-148,-150,21,-151,21,21,-119,-124,-135,-197,21,-118,-125,-136,21,]),'LONG':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[22,22,-2,-4,-5,22,22,22,22,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,22,-89,22,-9,-198,22,-144,22,-120,22,-137,22,-7,-90,-8,-199,-194,22,22,-149,22,-152,-147,22,22,-123,22,22,-6,-195,-196,22,-148,-150,22,-151,22,22,-119,-124,-135,-197,22,-118,-125,-136,22,]),'FLOAT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[23,23,-2,-4,-5,23,23,23,23,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,23,-89,23,-9,-198,23,-144,23,-120,23,-137,23,-7,-90,-8,-199,-194,23,23,-149,23,-152,-147,23,23,-123,23,23,-6,-195,-196,23,-148,-150,23,-151,23,23,-119,-124,-135,-197,23,-118,-125,-136,23,]),'DOUBLE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[24,24,-2,-4,-5,24,24,24,24,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,24,-89,24,-9,-198,24,-144,24,-120,24,-137,24,-7,-90,-8,-199,-194,24,24,-149,24,-152,-147,24,24,-123,24,24,-6,-195,-196,24,-148,-150,24,-151,24,24,-119,-124,-135,-197,24,-118,-125,-136,24,]),'SIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[25,25,-2,-4,-5,25,25,25,25,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,25,-89,25,-9,-198,25,-144,25,-120,25,-137,25,-7,-90,-8,-199,-194,25,25,-149,25,-152,-147,25,25,-123,25,25,-6,-195,-196,25,-148,-150,25,-151,25,25,-119,-124,-135,-197,25,-118,-125,-136,25,]),'UNSIGNED':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[26,26,-2,-4,-5,26,26,26,26,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,26,-89,26,-9,-198,26,-144,26,-120,26,-137,26,-7,-90,-8,-199,-194,26,26,-149,26,-152,-147,26,26,-123,26,26,-6,-195,-196,26,-148,-150,26,-151,26,26,-119,-124,-135,-197,26,-118,-125,-136,26,]),'BOOL':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[29,29,-2,-4,-5,29,29,29,29,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,29,-89,29,-9,-198,29,-144,29,-120,29,-137,29,-7,-90,-8,-199,-194,29,29,-149,29,-152,-147,29,29,-123,29,29,-6,-195,-196,29,-148,-150,29,-151,29,29,-119,-124,-135,-197,29,-118,-125,-136,29,]),'CONST':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,44,45,46,47,52,54,55,57,59,60,62,63,64,66,68,69,70,72,130,136,142,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[30,30,-2,-4,-5,30,30,30,30,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,30,-146,-3,30,-89,30,-9,-198,30,-144,30,30,-157,-120,30,-137,30,-7,-90,-8,-199,-194,30,-149,-152,-158,-147,30,30,-123,30,30,-6,-195,-196,30,-148,-150,30,-151,30,30,-119,-124,-135,-197,30,-118,-125,-136,30,]),'VOLATILE':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,39,40,41,44,45,46,47,52,54,55,57,59,60,62,63,64,66,68,69,70,72,130,136,142,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[31,31,-2,-4,-5,31,31,31,31,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,31,-146,-3,31,-89,31,-9,-198,31,-144,31,31,-157,-120,31,-137,31,-7,-90,-8,-199,-194,31,-149,-152,-158,-147,31,31,-123,31,31,-6,-195,-196,31,-148,-150,31,-151,31,31,-119,-124,-135,-197,31,-118,-125,-136,31,]),'MULTIPLY':([0,2,3,4,5,6,8,9,10,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,39,41,45,46,47,48,49,50,51,53,55,57,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,127,132,133,134,140,142,147,148,149,154,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,232,233,235,240,241,242,243,245,249,250,251,252,255,256,260,261,262,267,270,271,273,286,287,288,289,290,294,301,303,304,308,310,311,312,313,314,315,316,317,318,319,320,321,322,325,337,338,339,341,347,349,350,351,352,353,],[32,32,-2,-4,-5,32,-91,-93,-95,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,32,32,-3,-89,-9,-198,108,32,-92,-94,-96,108,32,-157,-120,-137,-7,108,-90,32,-8,-199,-194,108,108,-200,-185,-186,-187,-188,-189,-190,-202,-10,108,108,108,108,-41,-29,108,108,108,-43,108,-19,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-15,-16,-17,220,-41,108,-10,32,-158,32,-127,-129,-6,108,-195,-201,-196,108,108,108,-203,108,108,108,108,108,-212,-213,-214,108,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,108,108,108,108,-25,-26,-30,108,-31,-32,-33,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,108,32,108,-119,108,-126,-128,-135,108,-197,-191,108,-193,-18,108,108,-211,-215,-21,-23,-24,32,220,220,-44,-45,-46,108,-118,32,108,-136,108,-192,108,-42,108,108,108,108,108,-20,-22,108,-34,32,-204,-206,-207,108,108,-209,108,-205,-208,-210,]),'IDENTIFIER':([0,2,3,4,5,6,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,34,35,36,37,38,39,41,45,46,47,48,49,50,51,53,54,55,56,57,59,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,91,94,100,101,102,104,107,108,109,110,111,112,133,140,141,142,147,148,149,153,154,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,227,230,232,233,235,240,241,242,243,244,245,249,250,251,252,256,260,261,262,294,301,303,304,308,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[33,33,-2,-4,-5,33,-91,-93,-95,33,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-153,33,59,62,-121,-122,-3,-89,-9,-198,81,33,-92,-94,-96,134,139,-154,-155,-157,-120,152,-137,-7,134,-90,33,-8,-199,-194,81,81,-200,-185,-186,-187,-188,-189,-190,-202,134,134,81,175,134,134,134,134,134,-35,-36,-37,-38,-39,-40,134,33,-156,-158,33,-127,-129,152,-6,134,-195,-201,-196,81,81,81,-203,134,134,134,134,134,-212,-213,-214,134,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,134,134,134,134,270,271,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,134,292,33,33,134,-119,134,-126,-128,-135,152,134,-197,-191,81,-193,134,134,-211,-215,134,-118,33,134,-136,134,-192,81,81,81,134,134,134,134,-204,-206,-207,81,81,-209,81,-205,-208,-210,]),'L_PAREN':([0,2,3,4,5,6,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,39,41,45,46,47,48,49,50,51,52,53,55,56,57,59,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,86,87,88,89,90,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,130,133,134,136,140,141,142,143,147,148,149,154,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,226,230,231,232,233,235,240,241,242,243,245,249,250,251,252,255,256,259,260,261,262,267,270,271,273,293,294,296,299,301,303,304,308,310,311,312,314,315,316,317,318,319,320,321,324,325,326,328,330,331,332,337,338,339,341,345,346,347,349,350,351,352,353,],[34,34,-2,-4,-5,34,-91,-93,-95,34,54,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-153,-146,34,-3,-89,-9,-198,86,34,-92,-94,-96,54,133,-154,-155,-157,-120,-137,-7,86,-90,34,-8,-199,-194,86,86,-200,-185,-186,-187,-188,-189,-190,-202,-10,133,168,86,171,172,86,174,86,195,201,201,133,205,-19,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-15,-16,-17,-149,86,-10,-152,232,-156,-158,-147,34,-127,-129,-6,86,-195,-201,-196,86,86,86,-203,86,86,86,86,86,-212,-213,-214,86,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,86,133,86,86,-25,-26,86,86,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,-148,-150,-151,232,295,232,133,-119,133,-126,-128,-135,133,-197,-191,86,-193,-18,133,316,86,-211,-215,-21,-23,-24,325,295,133,-176,-172,-118,34,133,-136,86,-192,86,86,86,86,86,133,-20,-22,86,325,325,-174,-178,-171,-177,-173,-204,-206,-207,86,-175,-179,86,-209,86,-205,-208,-210,]),'ENUM':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[36,36,-2,-4,-5,36,36,36,36,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,36,-89,36,-9,-198,36,-144,36,-120,36,-137,36,-7,-90,-8,-199,-194,36,36,-149,36,-152,-147,36,36,-123,36,36,-6,-195,-196,36,-148,-150,36,-151,36,36,-119,-124,-135,-197,36,-118,-125,-136,36,]),'STRUCT':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[37,37,-2,-4,-5,37,37,37,37,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,37,-89,37,-9,-198,37,-144,37,-120,37,-137,37,-7,-90,-8,-199,-194,37,37,-149,37,-152,-147,37,37,-123,37,37,-6,-195,-196,37,-148,-150,37,-151,37,37,-119,-124,-135,-197,37,-118,-125,-136,37,]),'UNION':([0,2,3,4,5,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,39,40,41,44,45,46,47,52,54,59,60,62,63,64,66,68,69,70,72,86,130,133,136,143,144,145,146,148,149,154,159,161,205,223,224,225,226,232,234,235,236,243,249,295,301,302,308,325,],[38,38,-2,-4,-5,38,38,38,38,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-3,38,-89,38,-9,-198,38,-144,38,-120,38,-137,38,-7,-90,-8,-199,-194,38,38,-149,38,-152,-147,38,38,-123,38,38,-6,-195,-196,38,-148,-150,38,-151,38,38,-119,-124,-135,-197,38,-118,-125,-136,38,]),'$end':([1,2,3,4,5,39,41,45,64,66,68,70,154,159,161,249,],[0,-1,-2,-4,-5,-3,-89,-9,-7,-90,-8,-194,-6,-195,-196,-197,]),'SEMI_COLON':([6,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,40,41,42,43,46,47,48,49,50,51,52,59,62,66,69,70,71,72,73,74,75,76,77,78,79,80,81,84,89,92,93,94,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,134,136,143,155,156,158,159,160,161,162,163,165,166,174,175,176,177,178,179,198,199,200,202,203,204,223,224,226,235,237,238,239,243,249,250,251,252,253,255,260,261,262,263,265,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,301,305,308,309,311,312,313,314,315,319,320,322,333,334,335,337,338,339,341,343,347,348,349,350,351,352,353,],[41,-91,-93,-95,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-99,-89,66,-97,-198,80,41,-92,-94,-96,-144,-120,-137,-90,-199,-194,80,80,-200,-185,-186,-187,-188,-189,-190,-202,-10,166,80,176,177,178,-86,-73,-41,-71,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-99,-149,-88,-41,-10,-152,-147,-100,-180,-98,-195,-201,-196,80,80,80,-203,80,261,-212,-213,-214,262,-25,-26,-30,-31,-32,-33,-148,-150,-151,-119,302,-130,-132,-135,-197,-191,80,-193,-87,-18,80,-211,-215,-74,-70,-21,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-118,-133,-136,-181,-192,80,-42,80,80,-20,-22,-34,-131,-134,-182,-204,-206,-207,80,-72,80,352,-209,80,-205,-208,-210,]),'L_BRACES':([7,12,33,35,36,37,38,40,41,44,46,47,52,59,62,63,65,66,69,70,71,72,73,74,75,76,77,78,79,80,89,130,136,143,157,159,160,161,162,163,165,166,176,177,178,223,224,226,249,250,251,252,261,262,310,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[47,-145,-146,60,61,-121,-122,47,-89,47,-198,47,-144,144,153,47,157,-90,-199,-194,47,47,-200,-185,-186,-187,-188,-189,-190,-202,47,-149,-152,-147,157,-195,-201,-196,47,47,47,-203,-212,-213,-214,-148,-150,-151,-197,-191,47,-193,-211,-215,157,-192,47,47,47,-204,-206,-207,47,47,-209,47,-205,-208,-210,]),'L_SQBR':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,50,51,52,55,56,57,59,62,81,99,106,114,115,116,117,118,119,120,130,134,136,140,141,142,143,148,149,198,199,223,224,226,230,231,232,235,241,242,243,255,267,270,271,273,293,296,299,301,308,319,320,324,325,326,328,330,331,332,345,346,],[-91,-93,-95,53,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-153,-146,-92,-94,-96,53,-154,-155,-157,-120,-137,-10,194,-19,-11,-12,-13,-14,-15,-16,-17,-149,-10,-152,233,-156,-158,-147,-127,-129,-25,-26,-148,-150,-151,233,294,233,-119,-126,-128,-135,-18,-21,-23,-24,233,294,-176,-172,-118,-136,-20,-22,233,233,-174,-178,-171,-177,-173,-175,-179,]),'R_PAREN':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,49,50,51,52,54,55,56,57,58,59,62,80,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,132,134,135,136,137,138,139,140,141,142,143,148,149,166,169,170,195,198,199,200,202,203,204,223,224,226,228,229,230,231,232,235,241,242,243,253,254,255,257,258,263,265,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,295,296,297,298,299,301,308,313,317,319,320,322,323,324,325,326,328,329,330,331,332,340,342,343,344,345,346,],[-91,-93,-95,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-153,-146,-92,-94,-96,-144,136,-154,-155,-157,143,-120,-137,-202,-86,-73,-41,-71,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-149,-41,-10,224,-152,226,-159,-164,-163,-156,-158,-147,-127,-129,-203,255,256,267,-25,-26,-30,-31,-32,-33,-148,-150,-151,-161,-162,-168,-169,296,-119,-126,-128,-135,-87,312,-18,314,315,-74,-70,-21,320,-27,-23,-24,322,-166,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-160,-165,-170,328,-176,330,331,-172,-118,-136,-42,341,-20,-22,-34,-167,-168,296,-174,-178,346,-171,-177,-173,348,350,-72,-28,-175,-179,]),'COMMA':([8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,40,42,43,49,50,51,52,55,56,57,59,62,81,84,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,130,131,132,134,135,136,137,138,139,140,141,142,143,150,151,152,155,156,158,169,179,198,199,200,202,203,204,223,224,226,228,229,230,231,235,237,238,239,243,246,247,248,253,254,255,257,258,263,264,265,266,267,268,269,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,296,298,299,301,305,306,307,308,309,313,319,320,322,326,328,329,330,331,332,333,334,335,336,340,342,343,344,345,346,],[-91,-93,-95,-145,-101,-102,-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-153,-146,-99,67,-97,-92,-94,-96,-144,-154,-155,-157,-120,-137,-10,167,-86,-73,-41,-71,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-99,-149,-88,-41,-10,225,-152,227,-159,-164,-163,-156,-158,-147,244,-138,-140,-100,-180,-98,167,167,-25,-26,-30,-31,-32,-33,-148,-150,-151,-161,-162,-168,-169,-119,303,-130,-132,-135,244,310,-183,-87,167,-18,167,167,-74,167,-70,167,-21,321,-27,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-160,-165,-170,-176,225,-172,-118,-133,-139,-141,-136,-181,-42,-20,-22,-34,-174,-178,225,-171,-177,-173,-131,-134,-182,-184,167,167,-72,-28,-175,-179,]),'ASSIGNMENT':([12,33,40,52,81,97,99,106,114,115,116,117,118,119,120,128,130,132,134,136,143,152,198,199,200,202,203,204,223,224,226,255,267,270,271,313,319,320,322,],[-145,-146,65,-144,-10,181,-29,-19,-11,-12,-13,-14,-15,-16,-17,65,-149,-41,-10,-152,-147,245,-25,-26,-30,-31,-32,-33,-148,-150,-151,-18,-21,-23,-24,-42,-20,-22,-34,]),'COLON':([12,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,52,59,62,81,83,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,130,131,132,134,136,143,147,148,149,164,198,199,200,202,203,204,223,224,226,235,239,241,242,243,253,255,263,264,265,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,301,303,308,313,319,320,322,343,],[-145,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-142,-143,-146,-144,-120,-137,163,165,-86,-73,-41,-71,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-149,-88,-41,-10,-152,-147,240,-127,-129,251,-25,-26,-30,-31,-32,-33,-148,-150,-151,-119,304,-126,-128,-135,-87,-18,-74,318,-70,-21,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-118,240,-136,-42,-20,-22,-34,-72,]),'R_BRACES':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,131,132,134,145,146,150,151,152,156,159,160,161,162,166,176,177,178,198,199,200,202,203,204,234,236,246,247,248,249,250,252,255,261,262,263,265,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,302,306,307,309,310,311,313,319,320,322,335,336,337,338,339,343,349,351,352,353,],[-89,-198,70,-90,-199,-194,159,161,-200,-185,-186,-187,-188,-189,-190,-202,-73,-41,-71,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-88,-41,-10,235,-123,243,-138,-140,-180,-195,-201,-196,249,-203,-212,-213,-214,-25,-26,-30,-31,-32,-33,301,-124,308,309,-183,-197,-191,-193,-18,-211,-215,-74,-70,-21,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-125,-139,-141,-181,335,-192,-42,-20,-22,-34,-182,-184,-204,-206,-207,-72,-209,-205,-208,-210,]),'CASE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,82,-90,-199,-194,82,82,-200,-185,-186,-187,-188,-189,-190,-202,82,-195,-201,-196,82,82,82,-203,-212,-213,-214,-197,-191,82,-193,-211,-215,-192,82,82,82,-204,-206,-207,82,82,-209,82,-205,-208,-210,]),'DEFAULT':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,83,-90,-199,-194,83,83,-200,-185,-186,-187,-188,-189,-190,-202,83,-195,-201,-196,83,83,83,-203,-212,-213,-214,-197,-191,83,-193,-211,-215,-192,83,83,83,-204,-206,-207,83,83,-209,83,-205,-208,-210,]),'IF':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,85,-90,-199,-194,85,85,-200,-185,-186,-187,-188,-189,-190,-202,85,-195,-201,-196,85,85,85,-203,-212,-213,-214,-197,-191,85,-193,-211,-215,-192,85,85,85,-204,-206,-207,85,85,-209,85,-205,-208,-210,]),'SWITCH':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,87,-90,-199,-194,87,87,-200,-185,-186,-187,-188,-189,-190,-202,87,-195,-201,-196,87,87,87,-203,-212,-213,-214,-197,-191,87,-193,-211,-215,-192,87,87,87,-204,-206,-207,87,87,-209,87,-205,-208,-210,]),'WHILE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,173,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,88,-90,-199,-194,88,88,-200,-185,-186,-187,-188,-189,-190,-202,88,-195,-201,-196,88,88,88,-203,259,-212,-213,-214,-197,-191,88,-193,-211,-215,-192,88,88,88,-204,-206,-207,88,88,-209,88,-205,-208,-210,]),'DO':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,89,-90,-199,-194,89,89,-200,-185,-186,-187,-188,-189,-190,-202,89,-195,-201,-196,89,89,89,-203,-212,-213,-214,-197,-191,89,-193,-211,-215,-192,89,89,89,-204,-206,-207,89,89,-209,89,-205,-208,-210,]),'FOR':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,90,-90,-199,-194,90,90,-200,-185,-186,-187,-188,-189,-190,-202,90,-195,-201,-196,90,90,90,-203,-212,-213,-214,-197,-191,90,-193,-211,-215,-192,90,90,90,-204,-206,-207,90,90,-209,90,-205,-208,-210,]),'GOTO':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,91,-90,-199,-194,91,91,-200,-185,-186,-187,-188,-189,-190,-202,91,-195,-201,-196,91,91,91,-203,-212,-213,-214,-197,-191,91,-193,-211,-215,-192,91,91,91,-204,-206,-207,91,91,-209,91,-205,-208,-210,]),'CONTINUE':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,92,-90,-199,-194,92,92,-200,-185,-186,-187,-188,-189,-190,-202,92,-195,-201,-196,92,92,92,-203,-212,-213,-214,-197,-191,92,-193,-211,-215,-192,92,92,92,-204,-206,-207,92,92,-209,92,-205,-208,-210,]),'BREAK':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,93,-90,-199,-194,93,93,-200,-185,-186,-187,-188,-189,-190,-202,93,-195,-201,-196,93,93,93,-203,-212,-213,-214,-197,-191,93,-193,-211,-215,-192,93,93,93,-204,-206,-207,93,93,-209,93,-205,-208,-210,]),'RETURN':([41,46,47,66,69,70,71,72,73,74,75,76,77,78,79,80,89,159,160,161,162,163,165,166,176,177,178,249,250,251,252,261,262,311,312,314,315,337,338,339,341,347,349,350,351,352,353,],[-89,-198,94,-90,-199,-194,94,94,-200,-185,-186,-187,-188,-189,-190,-202,94,-195,-201,-196,94,94,94,-203,-212,-213,-214,-197,-191,94,-193,-211,-215,-192,94,94,94,-204,-206,-207,94,94,-209,94,-205,-208,-210,]),'INCREMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,133,134,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,255,256,260,261,262,267,270,271,294,304,310,311,312,314,315,316,317,318,319,320,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,100,100,100,-90,-199,-194,100,100,-200,-185,-186,-187,-188,-189,-190,-202,-10,100,100,100,100,198,100,100,100,100,-19,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-15,-16,-17,100,-10,100,-195,-201,-196,100,100,100,-203,100,100,100,100,100,-212,-213,-214,100,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,100,100,100,100,-25,-26,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,-197,-191,100,-193,-18,100,100,-211,-215,-21,-23,-24,100,100,100,-192,100,100,100,100,100,100,-20,-22,100,-204,-206,-207,100,100,-209,100,-205,-208,-210,]),'DECREMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,99,100,101,102,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,133,134,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,255,256,260,261,262,267,270,271,294,304,310,311,312,314,315,316,317,318,319,320,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,101,101,101,-90,-199,-194,101,101,-200,-185,-186,-187,-188,-189,-190,-202,-10,101,101,101,101,199,101,101,101,101,-19,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-15,-16,-17,101,-10,101,-195,-201,-196,101,101,101,-203,101,101,101,101,101,-212,-213,-214,101,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,101,101,101,101,-25,-26,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,-197,-191,101,-193,-18,101,101,-211,-215,-21,-23,-24,101,101,101,-192,101,101,101,101,101,101,-20,-22,101,-204,-206,-207,101,101,-209,101,-205,-208,-210,]),'SIZEOF':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,104,104,104,-90,-199,-194,104,104,-200,-185,-186,-187,-188,-189,-190,-202,104,104,104,104,104,104,104,104,-35,-36,-37,-38,-39,-40,104,104,-195,-201,-196,104,104,104,-203,104,104,104,104,104,-212,-213,-214,104,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,104,-197,-191,104,-193,104,104,-211,-215,104,104,104,-192,104,104,104,104,104,104,104,-204,-206,-207,104,104,-209,104,-205,-208,-210,]),'BITWISE_AND':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,122,123,124,125,126,127,132,133,134,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,255,256,260,261,262,267,270,271,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,304,310,311,312,313,314,315,316,317,318,319,320,321,322,337,338,339,341,347,349,350,351,352,353,],[-89,-198,107,107,107,-90,-199,-194,107,107,-200,-185,-186,-187,-188,-189,-190,-202,-10,107,107,107,107,-41,-29,107,107,107,-43,107,-19,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-15,-16,-17,209,-61,-58,-53,-50,-47,-41,107,-10,107,-195,-201,-196,107,107,107,-203,107,107,107,107,107,-212,-213,-214,107,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,107,107,107,107,-25,-26,-30,107,-31,-32,-33,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,107,-197,-191,107,-193,-18,107,107,-211,-215,-21,-23,-24,209,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,107,107,107,-192,107,-42,107,107,107,107,107,-20,-22,107,-34,-204,-206,-207,107,107,-209,107,-205,-208,-210,]),'ADD':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,126,127,132,133,134,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,255,256,260,261,262,267,270,271,284,285,286,287,288,289,290,294,304,310,311,312,313,314,315,316,317,318,319,320,321,322,337,338,339,341,347,349,350,351,352,353,],[-89,-198,109,109,109,-90,-199,-194,109,109,-200,-185,-186,-187,-188,-189,-190,-202,-10,109,109,109,109,-41,-29,109,109,109,-43,109,-19,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-15,-16,-17,218,-47,-41,109,-10,109,-195,-201,-196,109,109,109,-203,109,109,109,109,109,-212,-213,-214,109,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,109,109,109,109,-25,-26,-30,109,-31,-32,-33,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,109,-197,-191,109,-193,-18,109,109,-211,-215,-21,-23,-24,218,218,-48,-49,-44,-45,-46,109,109,109,-192,109,-42,109,109,109,109,109,-20,-22,109,-34,-204,-206,-207,109,109,-209,109,-205,-208,-210,]),'SUBSTRACT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,89,94,97,99,100,101,102,103,104,106,107,108,109,110,111,112,114,115,116,117,118,119,120,126,127,132,133,134,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,255,256,260,261,262,267,270,271,284,285,286,287,288,289,290,294,304,310,311,312,313,314,315,316,317,318,319,320,321,322,337,338,339,341,347,349,350,351,352,353,],[-89,-198,110,110,110,-90,-199,-194,110,110,-200,-185,-186,-187,-188,-189,-190,-202,-10,110,110,110,110,-41,-29,110,110,110,-43,110,-19,-35,-36,-37,-38,-39,-40,-11,-12,-13,-14,-15,-16,-17,219,-47,-41,110,-10,110,-195,-201,-196,110,110,110,-203,110,110,110,110,110,-212,-213,-214,110,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,110,110,110,110,-25,-26,-30,110,-31,-32,-33,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,110,-197,-191,110,-193,-18,110,110,-211,-215,-21,-23,-24,219,219,-48,-49,-44,-45,-46,110,110,110,-192,110,-42,110,110,110,110,110,-20,-22,110,-34,-204,-206,-207,110,110,-209,110,-205,-208,-210,]),'BITWISE_ONE_COMPLEMENT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,111,111,111,-90,-199,-194,111,111,-200,-185,-186,-187,-188,-189,-190,-202,111,111,111,111,111,111,111,111,-35,-36,-37,-38,-39,-40,111,111,-195,-201,-196,111,111,111,-203,111,111,111,111,111,-212,-213,-214,111,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,111,-197,-191,111,-193,111,111,-211,-215,111,111,111,-192,111,111,111,111,111,111,111,-204,-206,-207,111,111,-209,111,-205,-208,-210,]),'LOGICAL_NOT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,112,112,112,-90,-199,-194,112,112,-200,-185,-186,-187,-188,-189,-190,-202,112,112,112,112,112,112,112,112,-35,-36,-37,-38,-39,-40,112,112,-195,-201,-196,112,112,112,-203,112,112,112,112,112,-212,-213,-214,112,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,112,-197,-191,112,-193,112,112,-211,-215,112,112,112,-192,112,112,112,112,112,112,112,-204,-206,-207,112,112,-209,112,-205,-208,-210,]),'INT_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,114,114,114,-90,-199,-194,114,114,-200,-185,-186,-187,-188,-189,-190,-202,114,114,114,114,114,114,114,114,-35,-36,-37,-38,-39,-40,114,114,-195,-201,-196,114,114,114,-203,114,114,114,114,114,-212,-213,-214,114,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,-197,-191,114,-193,114,114,-211,-215,114,114,114,-192,114,114,114,114,114,114,114,-204,-206,-207,114,114,-209,114,-205,-208,-210,]),'HEX_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,115,115,115,-90,-199,-194,115,115,-200,-185,-186,-187,-188,-189,-190,-202,115,115,115,115,115,115,115,115,-35,-36,-37,-38,-39,-40,115,115,-195,-201,-196,115,115,115,-203,115,115,115,115,115,-212,-213,-214,115,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,-197,-191,115,-193,115,115,-211,-215,115,115,115,-192,115,115,115,115,115,115,115,-204,-206,-207,115,115,-209,115,-205,-208,-210,]),'OCTAL_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,116,116,116,-90,-199,-194,116,116,-200,-185,-186,-187,-188,-189,-190,-202,116,116,116,116,116,116,116,116,-35,-36,-37,-38,-39,-40,116,116,-195,-201,-196,116,116,116,-203,116,116,116,116,116,-212,-213,-214,116,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,116,-197,-191,116,-193,116,116,-211,-215,116,116,116,-192,116,116,116,116,116,116,116,-204,-206,-207,116,116,-209,116,-205,-208,-210,]),'EXPONENT_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,117,117,117,-90,-199,-194,117,117,-200,-185,-186,-187,-188,-189,-190,-202,117,117,117,117,117,117,117,117,-35,-36,-37,-38,-39,-40,117,117,-195,-201,-196,117,117,117,-203,117,117,117,117,117,-212,-213,-214,117,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,117,-197,-191,117,-193,117,117,-211,-215,117,117,117,-192,117,117,117,117,117,117,117,-204,-206,-207,117,117,-209,117,-205,-208,-210,]),'REAL_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,118,118,118,-90,-199,-194,118,118,-200,-185,-186,-187,-188,-189,-190,-202,118,118,118,118,118,118,118,118,-35,-36,-37,-38,-39,-40,118,118,-195,-201,-196,118,118,118,-203,118,118,118,118,118,-212,-213,-214,118,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,118,-197,-191,118,-193,118,118,-211,-215,118,118,118,-192,118,118,118,118,118,118,118,-204,-206,-207,118,118,-209,118,-205,-208,-210,]),'CHAR_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,119,119,119,-90,-199,-194,119,119,-200,-185,-186,-187,-188,-189,-190,-202,119,119,119,119,119,119,119,119,-35,-36,-37,-38,-39,-40,119,119,-195,-201,-196,119,119,119,-203,119,119,119,119,119,-212,-213,-214,119,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,119,-197,-191,119,-193,119,119,-211,-215,119,119,119,-192,119,119,119,119,119,119,119,-204,-206,-207,119,119,-209,119,-205,-208,-210,]),'STR_CONSTANT':([41,46,47,53,65,66,69,70,71,72,73,74,75,76,77,78,79,80,82,86,89,94,100,101,102,104,107,108,109,110,111,112,133,157,159,160,161,162,163,165,166,167,168,171,172,174,176,177,178,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,249,250,251,252,256,260,261,262,294,304,310,311,312,314,315,316,317,318,321,337,338,339,341,347,349,350,351,352,353,],[-89,-198,120,120,120,-90,-199,-194,120,120,-200,-185,-186,-187,-188,-189,-190,-202,120,120,120,120,120,120,120,120,-35,-36,-37,-38,-39,-40,120,120,-195,-201,-196,120,120,120,-203,120,120,120,120,120,-212,-213,-214,120,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,-197,-191,120,-193,120,120,-211,-215,120,120,120,-192,120,120,120,120,120,120,120,-204,-206,-207,120,120,-209,120,-205,-208,-210,]),'R_SQBR':([53,95,96,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,129,131,132,134,198,199,200,202,203,204,233,253,255,263,265,266,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,294,300,313,319,320,322,327,343,],[130,-86,-73,-41,-71,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,223,-88,-41,-10,-25,-26,-30,-31,-32,-33,299,-87,-18,-74,-70,319,-21,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,326,332,-42,-20,-22,-34,345,-72,]),'ELSE':([70,74,75,76,77,78,79,80,159,161,166,176,177,178,249,250,252,261,262,311,337,338,339,349,351,352,353,],[-194,-185,-186,-187,-188,-189,-190,-202,-195,-196,-203,-212,-213,-214,-197,-191,-193,-211,-215,-192,347,-206,-207,-209,-205,-208,-210,]),'DOT':([81,99,106,114,115,116,117,118,119,120,134,198,199,255,267,270,271,319,320,],[-10,196,-19,-11,-12,-13,-14,-15,-16,-17,-10,-25,-26,-18,-21,-23,-24,-20,-22,]),'ARROW':([81,99,106,114,115,116,117,118,119,120,134,198,199,255,267,270,271,319,320,],[-10,197,-19,-11,-12,-13,-14,-15,-16,-17,-10,-25,-26,-18,-21,-23,-24,-20,-22,]),'MULTIPLY_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,182,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'DIVIDE_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,183,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'MODULUS_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,184,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'ADD_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,185,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'SUBSTRACT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,186,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'LEFT_SHIFT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,187,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'RIGHT_SHIFT_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,188,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'BITWISE_AND_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,189,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'BITWISE_XOR_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,190,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'BITWISE_OR_ASSIGNMENT':([81,97,99,106,114,115,116,117,118,119,120,132,134,198,199,200,202,203,204,255,267,270,271,313,319,320,322,],[-10,191,-29,-19,-11,-12,-13,-14,-15,-16,-17,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,-42,-20,-22,-34,]),'DIVIDE':([81,97,99,103,106,114,115,116,117,118,119,120,127,132,134,198,199,200,202,203,204,255,267,270,271,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,221,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,221,221,-44,-45,-46,-42,-20,-22,-34,]),'MODULUS':([81,97,99,103,106,114,115,116,117,118,119,120,127,132,134,198,199,200,202,203,204,255,267,270,271,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,222,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,222,222,-44,-45,-46,-42,-20,-22,-34,]),'LEFT_SHIFT':([81,97,99,103,106,114,115,116,117,118,119,120,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,216,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,216,216,216,216,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'RIGHT_SHIFT':([81,97,99,103,106,114,115,116,117,118,119,120,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,217,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,217,217,217,217,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'LESS':([81,97,99,103,106,114,115,116,117,118,119,120,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,212,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,212,212,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'GREATER':([81,97,99,103,106,114,115,116,117,118,119,120,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,213,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,213,213,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'LESS_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,214,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,214,214,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'GREATER_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,215,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,215,215,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,123,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,277,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,210,-58,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,210,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'NOT_EQUALS':([81,97,99,103,106,114,115,116,117,118,119,120,123,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,277,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,211,-58,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,211,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'BITWISE_XOR':([81,97,99,103,106,114,115,116,117,118,119,120,121,122,123,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,-11,-12,-13,-14,-15,-16,-17,208,-63,-61,-58,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,208,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'BITWISE_OR':([81,97,99,103,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,132,134,198,199,200,202,203,204,255,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,-19,207,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-21,-23,-24,207,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'LOGICAL_AND':([81,97,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,132,134,198,199,200,202,203,204,255,265,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,-29,-43,206,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,206,-21,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'QUES_MARK':([81,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,132,134,198,199,200,202,203,204,255,265,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,192,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-70,-21,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),'LOGICAL_OR':([81,97,98,99,103,105,106,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,132,134,198,199,200,202,203,204,255,265,267,270,271,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,313,319,320,322,],[-10,-41,193,-29,-43,-69,-19,-67,-11,-12,-13,-14,-15,-16,-17,-65,-63,-61,-58,-53,-50,-47,-41,-10,-25,-26,-30,-31,-32,-33,-18,-70,-21,-23,-24,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-42,-20,-22,-34,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,39,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,7,40,44,47,63,72,],[5,5,46,46,69,46,69,69,]),'declaration_specifiers':([0,2,7,8,9,10,40,44,47,54,63,72,225,232,295,325,],[6,6,48,49,50,51,48,48,48,140,48,48,140,140,140,140,]),'declarator':([0,2,6,34,48,67,140,147,232,303,],[7,7,40,58,128,128,228,239,58,239,]),'storage_class_specifier':([0,2,7,8,9,10,40,44,47,54,63,72,225,232,295,325,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'type_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,133,144,145,148,149,205,225,232,234,295,325,],[9,9,9,9,9,9,9,9,9,9,148,9,9,170,170,148,148,148,148,148,9,9,148,9,9,]),'type_qualifier':([0,2,7,8,9,10,32,40,44,47,54,55,60,63,72,144,145,148,149,205,225,232,234,295,325,],[10,10,10,10,10,10,57,10,10,10,10,142,149,10,10,149,149,149,149,149,10,10,149,10,10,]),'pointer':([0,2,6,32,34,48,55,67,140,147,232,273,303,325,],[11,11,11,56,11,11,141,11,230,11,230,324,11,324,]),'direct_declarator':([0,2,6,11,34,48,67,140,147,230,232,303,],[12,12,12,52,12,12,12,12,12,52,12,12,]),'struct_or_union_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,133,144,145,148,149,205,225,232,234,295,325,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'enum_specifier':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,133,144,145,148,149,205,225,232,234,295,325,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'struct_or_union':([0,2,7,8,9,10,40,44,47,54,60,63,72,86,133,144,145,148,149,205,225,232,234,295,325,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'init_declarator_list':([6,48,],[42,42,]),'init_declarator':([6,48,67,],[43,43,158,]),'declaration_list':([7,40,47,],[44,63,72,]),'compound_statement':([7,40,44,47,63,71,72,89,162,163,165,251,312,314,315,341,347,350,],[45,64,68,75,154,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'type_qualifier_list':([32,],[55,]),'statement_list':([47,72,],[71,162,]),'statement':([47,71,72,89,162,163,165,251,312,314,315,341,347,350,],[73,160,73,173,160,250,252,311,337,338,339,349,351,353,]),'labeled_statement':([47,71,72,89,162,163,165,251,312,314,315,341,347,350,],[74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'expression_statement':([47,71,72,89,162,163,165,174,251,260,312,314,315,341,347,350,],[76,76,76,76,76,76,76,260,76,317,76,76,76,76,76,76,]),'selection_statement':([47,71,72,89,162,163,165,251,312,314,315,341,347,350,],[77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'iteration_statement':([47,71,72,89,162,163,165,251,312,314,315,341,347,350,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'jump_statement':([47,71,72,89,162,163,165,251,312,314,315,341,347,350,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'expression':([47,71,72,86,89,94,133,162,163,165,168,171,172,174,192,194,201,205,251,260,312,314,315,316,317,341,347,350,],[84,84,84,169,84,179,169,84,84,84,254,257,258,84,264,266,169,169,84,84,84,84,84,340,342,84,84,84,]),'assignment_expression':([47,65,71,72,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,194,195,201,205,251,260,310,312,314,315,316,317,321,341,347,350,],[95,156,95,95,95,95,95,95,156,95,95,95,253,95,95,95,95,263,95,95,269,95,95,95,95,156,95,95,95,95,95,344,95,95,95,]),'conditional_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,194,195,201,205,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[96,131,96,96,96,131,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,131,131,131,96,96,131,131,96,96,96,96,96,96,343,96,96,96,96,]),'unary_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,251,256,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[97,132,97,97,97,132,97,97,97,200,202,132,204,97,97,97,97,97,97,97,97,97,97,97,97,132,97,97,97,97,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,97,132,97,132,132,97,97,97,97,97,97,132,97,97,97,97,]),'logical_or_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,194,195,201,205,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'postfix_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,251,256,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'unary_operator':([47,53,65,71,72,82,86,89,94,100,101,102,104,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,251,256,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'cast_expression':([47,53,65,71,72,82,86,89,94,102,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,251,256,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[103,103,103,103,103,103,103,103,103,203,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,103,288,289,290,103,103,103,103,313,103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'logical_and_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,265,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,105,]),'primary_expression':([47,53,65,71,72,82,86,89,94,100,101,102,104,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,233,240,245,251,256,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,106,]),'inclusive_or_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,274,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,113,]),'exclusive_or_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,275,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,121,]),'and_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,276,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,122,]),'equality_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,277,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'relational_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,278,279,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,124,]),'shift_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,280,281,282,283,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,125,]),'additive_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,284,285,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,126,]),'multiplicative_expression':([47,53,65,71,72,82,86,89,94,133,157,162,163,165,167,168,171,172,174,180,192,193,194,195,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,233,240,245,251,260,294,304,310,312,314,315,316,317,318,321,341,347,350,],[127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,286,287,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,]),'constant_expression':([53,82,233,240,245,294,304,],[129,164,300,305,307,327,334,]),'parameter_type_list':([54,232,295,325,],[135,298,329,298,]),'identifier_list':([54,],[137,]),'parameter_declaration':([54,225,232,295,325,],[138,291,138,138,138,]),'struct_declaration_list':([60,144,],[145,234,]),'struct_declaration':([60,144,145,234,],[146,146,236,236,]),'specifier_qualifier_list':([60,144,145,148,149,205,234,],[147,147,147,241,242,273,147,]),'enumerator_list':([61,153,],[150,246,]),'enumerator':([61,153,244,],[151,151,306,]),'initializer':([65,157,310,],[155,248,336,]),'assignment_operator':([97,],[180,]),'abstract_declarator':([140,232,273,325,],[229,297,323,297,]),'direct_abstract_declarator':([140,230,232,273,324,325,],[231,293,231,231,293,231,]),'struct_declarator_list':([147,],[237,]),'struct_declarator':([147,303,],[238,333,]),'initializer_list':([157,],[247,]),'argument_expression_list':([195,],[268,]),'type_name':([205,],[272,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',49),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',54),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',55),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',61),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',62),
  ('function_definition -> declaration_specifiers declarator declaration_list compound_statement','function_definition',4,'p_function_definition_1','cparser.py',68),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition_1','cparser.py',69),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition_2','cparser.py',79),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition_2','cparser.py',80),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',91),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',92),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',93),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',94),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',95),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',96),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',97),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',98),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',99),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',108),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',109),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',110),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',111),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',112),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',113),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',114),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',115),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',131),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',132),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',142),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',143),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',144),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',145),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',146),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',147),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',156),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',157),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',158),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',159),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',160),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',161),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',167),
  ('cast_expression -> L_PAREN type_specifier R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',168),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',177),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',178),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',179),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',180),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',191),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',192),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',193),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',202),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',203),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',204),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',215),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',216),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',217),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',218),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',219),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',230),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',231),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',232),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',243),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',244),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',255),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',256),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',267),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',268),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',278),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',279),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',290),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',291),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',302),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',303),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',313),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',314),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',324),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',325),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',326),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',327),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',328),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',329),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',330),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',331),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',332),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',333),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',334),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',340),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',341),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',355),
  ('declaration -> declaration_specifiers SEMI_COLON','declaration',2,'p_declaration','cparser.py',362),
  ('declaration -> declaration_specifiers init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',363),
  ('declaration_specifiers -> storage_class_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',372),
  ('declaration_specifiers -> storage_class_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',373),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',374),
  ('declaration_specifiers -> type_specifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',375),
  ('declaration_specifiers -> type_qualifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',376),
  ('declaration_specifiers -> type_qualifier declaration_specifiers','declaration_specifiers',2,'p_declaration_specifiers','cparser.py',377),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',385),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',386),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',398),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',399),
  ('storage_class_specifier -> TYPEDEF','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',408),
  ('storage_class_specifier -> EXTERN','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',409),
  ('storage_class_specifier -> STATIC','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',410),
  ('storage_class_specifier -> AUTO','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',411),
  ('storage_class_specifier -> REGISTER','storage_class_specifier',1,'p_storage_class_specifier','cparser.py',412),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',418),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',419),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',420),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',421),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',422),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',423),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',424),
  ('type_specifier -> SIGNED','type_specifier',1,'p_type_specifier','cparser.py',425),
  ('type_specifier -> UNSIGNED','type_specifier',1,'p_type_specifier','cparser.py',426),
  ('type_specifier -> struct_or_union_specifier','type_specifier',1,'p_type_specifier','cparser.py',427),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','cparser.py',428),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',429),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER L_BRACES struct_declaration_list R_BRACES','struct_or_union_specifier',5,'p_struct_or_union_specifier','cparser.py',436),
  ('struct_or_union_specifier -> struct_or_union L_BRACES struct_declaration_list R_BRACES','struct_or_union_specifier',4,'p_struct_or_union_specifier','cparser.py',437),
  ('struct_or_union_specifier -> struct_or_union IDENTIFIER','struct_or_union_specifier',2,'p_struct_or_union_specifier','cparser.py',438),
  ('struct_or_union -> STRUCT','struct_or_union',1,'p_struct_or_union','cparser.py',444),
  ('struct_or_union -> UNION','struct_or_union',1,'p_struct_or_union','cparser.py',445),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',452),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',453),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',458),
  ('specifier_qualifier_list -> type_specifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','cparser.py',463),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',464),
  ('specifier_qualifier_list -> type_qualifier specifier_qualifier_list','specifier_qualifier_list',2,'p_specifier_qualifier_list','cparser.py',465),
  ('specifier_qualifier_list -> type_qualifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',466),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',475),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',476),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','cparser.py',481),
  ('struct_declarator -> COLON constant_expression','struct_declarator',2,'p_struct_declarator','cparser.py',482),
  ('struct_declarator -> declarator COLON constant_expression','struct_declarator',3,'p_struct_declarator','cparser.py',483),
  ('enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES','enum_specifier',4,'p_enum_specifier','cparser.py',488),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',489),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','cparser.py',490),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',495),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',496),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',501),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',502),
  ('type_qualifier -> CONST','type_qualifier',1,'p_type_qualifier','cparser.py',507),
  ('type_qualifier -> VOLATILE','type_qualifier',1,'p_type_qualifier','cparser.py',508),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',514),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','cparser.py',515),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',524),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',525),
  ('direct_declarator -> direct_declarator L_SQBR constant_expression R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',526),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',527),
  ('direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',528),
  ('direct_declarator -> direct_declarator L_PAREN identifier_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',529),
  ('direct_declarator -> direct_declarator L_PAREN R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',530),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',544),
  ('pointer -> MULTIPLY type_qualifier_list','pointer',2,'p_pointer','cparser.py',545),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer','cparser.py',546),
  ('pointer -> MULTIPLY type_qualifier_list pointer','pointer',3,'p_pointer','cparser.py',547),
  ('type_qualifier_list -> type_qualifier','type_qualifier_list',1,'p_type_qualifier_list','cparser.py',555),
  ('type_qualifier_list -> type_qualifier_list type_qualifier','type_qualifier_list',2,'p_type_qualifier_list','cparser.py',556),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',562),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',563),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',576),
  ('parameter_declaration -> declaration_specifiers abstract_declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',577),
  ('parameter_declaration -> declaration_specifiers','parameter_declaration',1,'p_parameter_declaration','cparser.py',578),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','cparser.py',590),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','cparser.py',591),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','cparser.py',606),
  ('type_name -> specifier_qualifier_list abstract_declarator','type_name',2,'p_type_name','cparser.py',607),
  ('abstract_declarator -> pointer','abstract_declarator',1,'p_abstract_declarator','cparser.py',616),
  ('abstract_declarator -> direct_abstract_declarator','abstract_declarator',1,'p_abstract_declarator','cparser.py',617),
  ('abstract_declarator -> pointer direct_abstract_declarator','abstract_declarator',2,'p_abstract_declarator','cparser.py',618),
  ('direct_abstract_declarator -> L_PAREN abstract_declarator R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',626),
  ('direct_abstract_declarator -> L_SQBR R_SQBR','direct_abstract_declarator',2,'p_direct_abstract_declarator','cparser.py',627),
  ('direct_abstract_declarator -> L_SQBR constant_expression R_SQBR','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',628),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQBR R_SQBR','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',629),
  ('direct_abstract_declarator -> direct_abstract_declarator L_SQBR constant_expression R_SQBR','direct_abstract_declarator',4,'p_direct_abstract_declarator','cparser.py',630),
  ('direct_abstract_declarator -> L_PAREN R_PAREN','direct_abstract_declarator',2,'p_direct_abstract_declarator','cparser.py',631),
  ('direct_abstract_declarator -> L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',632),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN R_PAREN','direct_abstract_declarator',3,'p_direct_abstract_declarator','cparser.py',633),
  ('direct_abstract_declarator -> direct_abstract_declarator L_PAREN parameter_type_list R_PAREN','direct_abstract_declarator',4,'p_direct_abstract_declarator','cparser.py',634),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',647),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',648),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',649),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',658),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',659),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',665),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',666),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',667),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',668),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',669),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',670),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement_1','cparser.py',676),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement_2','cparser.py',682),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement_2','cparser.py',683),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',692),
  ('compound_statement -> L_BRACES statement_list R_BRACES','compound_statement',3,'p_compound_statement','cparser.py',693),
  ('compound_statement -> L_BRACES declaration_list R_BRACES','compound_statement',3,'p_compound_statement','cparser.py',694),
  ('compound_statement -> L_BRACES declaration_list statement_list R_BRACES','compound_statement',4,'p_compound_statement','cparser.py',695),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','cparser.py',707),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','cparser.py',708),
  ('statement_list -> statement','statement_list',1,'p_statement_list','cparser.py',714),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','cparser.py',715),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',722),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',723),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',732),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',733),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',734),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',744),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',745),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',746),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',747),
  ('jump_statement -> GOTO IDENTIFIER SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',763),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',764),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',765),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',766),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',767),
]
