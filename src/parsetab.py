
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR expression R_SQBR\n    \n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES\n    \n    add_sym_struct : L_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[9,9,-2,-4,-5,-3,-92,-93,9,-8,-94,9,-109,9,9,-110,9,-169,9,9,9,-111,-169,-7,-168,-149,9,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,9,-150,-152,-156,-164,-165,-166,9,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'CHAR':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[10,10,-2,-4,-5,-3,-92,-93,10,-8,-94,10,-109,10,10,-110,10,-169,10,10,10,-111,-169,-7,-168,-149,10,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,10,-150,-152,-156,-164,-165,-166,10,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'INT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[11,11,-2,-4,-5,-3,-92,-93,11,-8,-94,11,-109,11,11,-110,11,-169,11,11,11,-111,-169,-7,-168,-149,11,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,11,-150,-152,-156,-164,-165,-166,11,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'LONG':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[12,12,-2,-4,-5,-3,-92,-93,12,-8,-94,12,-109,12,12,-110,12,-169,12,12,12,-111,-169,-7,-168,-149,12,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,12,-150,-152,-156,-164,-165,-166,12,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'FLOAT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[13,13,-2,-4,-5,-3,-92,-93,13,-8,-94,13,-109,13,13,-110,13,-169,13,13,13,-111,-169,-7,-168,-149,13,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,13,-150,-152,-156,-164,-165,-166,13,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'DOUBLE':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[14,14,-2,-4,-5,-3,-92,-93,14,-8,-94,14,-109,14,14,-110,14,-169,14,14,14,-111,-169,-7,-168,-149,14,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,14,-150,-152,-156,-164,-165,-166,14,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'STRUCT':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[15,15,-2,-4,-5,-3,-92,-93,47,-8,-94,47,-109,47,47,-110,47,-169,195,47,47,-111,-169,-7,-168,-149,195,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,195,-150,-152,-156,-164,-165,-166,195,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'ENUM':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[16,16,-2,-4,-5,-3,-92,-93,48,-8,-94,48,-109,48,48,-110,48,-169,196,48,48,-111,-169,-7,-168,-149,196,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,196,-150,-152,-156,-164,-165,-166,196,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'BOOL':([0,2,3,4,5,18,25,26,29,31,32,39,40,61,92,93,100,102,103,133,135,161,167,169,170,171,172,173,174,175,176,177,178,179,180,181,182,232,237,238,239,240,241,244,250,251,252,266,268,274,278,284,285,286,287,293,295,296,297,],[17,17,-2,-4,-5,-3,-92,-93,17,-8,-94,17,-109,17,17,-110,17,-169,17,17,17,-111,-169,-7,-168,-149,17,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-112,-6,-147,17,-150,-152,-156,-164,-165,-166,17,-146,-167,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'$end':([1,2,3,4,5,18,25,26,32,102,167,169,171,237,240,],[0,-1,-2,-4,-5,-3,-92,-93,-94,-169,-169,-7,-149,-6,-150,]),'MULTIPLY':([6,9,10,11,12,13,14,17,21,24,25,26,27,28,30,32,33,35,37,42,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,87,94,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,134,135,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,183,184,190,194,198,203,206,207,209,210,211,212,225,226,227,228,229,233,238,239,241,243,244,245,246,247,249,250,251,252,254,255,258,259,260,261,262,264,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[24,-99,-100,-101,-102,-103,-104,-107,35,-126,-92,-93,-105,-106,66,-94,24,-127,24,24,66,-44,-32,66,66,66,-46,66,66,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,154,24,66,-105,-106,66,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,66,66,-23,-24,66,66,-33,66,-34,-35,-44,66,-36,66,24,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-168,66,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,24,66,66,66,66,-26,-28,-29,-19,66,66,35,154,154,-47,-48,-49,24,-147,66,-152,66,-156,66,66,66,66,-164,-165,-166,-105,-106,66,-25,-27,66,-37,-45,66,66,-146,66,-167,-145,66,66,66,66,66,-148,-157,-159,-160,66,66,-162,66,-158,-161,-163,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,21,22,24,25,26,27,28,30,32,33,35,37,41,42,47,48,51,56,57,58,60,61,65,66,67,68,69,70,94,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,126,127,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,166,170,172,173,174,175,176,177,178,179,180,181,182,183,184,190,194,195,196,198,210,211,233,238,239,241,243,244,245,246,247,249,250,251,252,254,255,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-128,-99,-100,-101,-102,-103,-104,27,28,-107,36,36,-126,-92,-93,-105,-106,64,-94,-128,-127,-128,95,-128,104,105,64,64,64,64,64,64,-38,-39,-40,-41,-42,-43,-128,64,-105,-106,64,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,64,64,64,64,206,207,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,95,-168,64,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-128,64,64,64,254,255,64,64,64,-128,-147,64,-152,64,-156,64,64,64,64,-164,-165,-166,-105,-106,64,64,64,64,-146,64,-167,-145,64,64,64,64,64,-148,-157,-159,-160,64,64,-162,64,-158,-161,-163,]),'L_PAREN':([6,9,10,11,12,13,14,17,19,21,22,24,25,26,27,28,30,32,33,34,35,36,37,38,42,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,94,103,104,105,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,158,159,164,170,172,173,174,175,176,177,178,179,180,181,182,183,184,187,188,189,190,191,194,198,203,206,207,209,210,211,230,233,238,239,241,243,244,245,246,247,249,250,251,252,254,255,258,259,260,261,266,267,268,272,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-128,-99,-100,-101,-102,-103,-104,-107,31,37,37,-126,-92,-93,-105,-106,61,-94,-128,-120,-127,-122,-128,-121,-128,61,125,129,129,133,135,61,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,-128,61,-105,-106,61,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,61,133,-23,-24,61,61,61,61,61,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,133,-125,-123,133,-168,61,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-128,133,245,246,247,61,249,61,61,-26,-28,-29,-19,61,133,-124,-128,-147,61,-152,61,-156,61,61,61,61,-164,-165,-166,-105,-106,133,-25,-27,61,61,61,-146,282,61,-167,-145,61,61,61,61,61,-148,-157,-159,-160,61,61,-162,61,-158,-161,-163,]),'SEMI_COLON':([7,8,19,20,23,25,26,32,34,36,38,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,103,122,123,128,130,131,132,134,138,158,159,162,163,165,170,172,173,174,175,176,177,178,179,180,181,182,186,190,192,193,194,197,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,238,239,241,243,244,249,250,251,252,253,256,259,260,262,263,264,265,266,267,268,273,274,275,278,279,280,281,284,285,286,287,289,291,292,293,294,295,296,297,],[25,26,-97,32,-95,-92,-93,-94,-120,-122,-121,-98,-134,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-96,-97,182,-23,-24,-33,-34,-35,-44,-36,-89,-125,-123,232,-113,-115,-168,182,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,244,182,250,251,252,-135,-77,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-124,-108,-147,182,-152,182,-156,182,-164,-165,-166,274,-136,-25,-27,-37,-90,-45,-114,182,182,-146,182,-167,-75,-145,182,182,182,-148,-157,-159,-160,182,182,296,-162,182,-158,-161,-163,]),'R_PAREN':([9,10,11,12,13,14,17,24,29,31,34,35,36,38,43,45,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,98,104,105,122,123,125,128,130,131,132,134,136,137,138,139,158,159,168,182,199,201,203,204,205,206,207,208,209,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,244,259,260,262,263,264,269,270,271,275,276,283,288,290,],[-99,-100,-101,-102,-103,-104,-107,-126,46,-8,-120,-127,-122,-121,101,-129,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,159,-131,-105,-106,-23,-24,203,-33,-34,-35,-44,-36,209,211,-89,-132,-125,-123,-130,-155,-77,-73,-26,260,-30,-28,-29,262,-19,-133,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-124,-156,-25,-27,-37,-90,-45,279,280,281,-75,-31,289,292,294,]),'COMMA':([19,20,23,34,36,38,43,45,49,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,95,96,97,98,106,107,122,123,128,130,131,132,134,136,138,158,159,162,163,168,186,197,199,200,201,202,203,204,205,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,234,235,236,253,256,257,259,260,262,263,264,265,269,270,271,275,276,288,290,],[-97,33,-95,-120,-122,-121,100,-129,-98,-134,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-96,-97,-118,166,-116,-131,198,-137,-23,-24,-33,-34,-35,-44,-36,210,-89,-125,-123,233,-113,-130,210,-135,-77,210,-73,210,-26,261,-30,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-124,-119,-91,-117,210,-136,-138,-25,-27,-37,-90,-45,-114,210,210,210,-75,-31,210,210,]),'ASSIGNMENT':([19,34,36,38,53,55,63,64,72,73,74,75,76,77,78,79,80,89,95,122,123,128,130,131,132,134,158,159,203,206,207,209,230,259,260,262,264,],[30,-120,-122,-121,109,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,30,164,-23,-24,-33,-34,-35,-44,-36,-125,-123,-26,-28,-29,-19,-124,-25,-27,-37,-45,]),'R_BRACES':([25,26,32,50,52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,92,93,95,96,97,103,106,107,122,123,128,130,131,132,134,160,161,170,172,173,174,175,176,177,178,179,180,181,182,197,198,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,232,234,235,236,238,241,244,250,251,252,256,257,259,260,262,264,266,268,274,275,277,278,284,285,286,287,293,295,296,297,],[-92,-93,-94,-134,-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-169,-110,-118,165,-116,171,197,-137,-23,-24,-33,-34,-35,-44,-36,231,-111,238,240,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,-135,256,-77,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-112,-119,-91,-117,-147,-152,-156,-164,-165,-166,-136,-138,-25,-27,-37,-45,-169,-146,-167,-75,284,-145,-148,-157,-159,-160,-162,-158,-161,-163,]),'CASE':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,184,-168,184,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,184,-147,184,-152,184,-156,-164,-165,-166,184,184,-146,-167,-145,184,184,184,-148,-157,-159,-160,184,184,-162,184,-158,-161,-163,]),'DEFAULT':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,185,-168,185,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,185,-147,185,-152,185,-156,-164,-165,-166,185,185,-146,-167,-145,185,185,185,-148,-157,-159,-160,185,185,-162,185,-158,-161,-163,]),'L_BRACES':([25,26,27,28,30,32,44,46,51,99,101,103,170,172,173,174,175,176,177,178,179,180,181,182,190,198,238,239,241,243,244,250,251,252,254,255,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,40,41,51,-94,103,-10,51,103,-9,170,-168,170,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,170,51,-147,170,-152,170,-156,-164,-165,-166,40,41,170,170,-146,-167,-145,170,170,170,-148,-157,-159,-160,170,170,-162,170,-158,-161,-163,]),'IF':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,187,-168,187,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,187,-147,187,-152,187,-156,-164,-165,-166,187,187,-146,-167,-145,187,187,187,-148,-157,-159,-160,187,187,-162,187,-158,-161,-163,]),'SWITCH':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,188,-168,188,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,188,-147,188,-152,188,-156,-164,-165,-166,188,188,-146,-167,-145,188,188,188,-148,-157,-159,-160,188,188,-162,188,-158,-161,-163,]),'WHILE':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,248,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,189,-168,189,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,189,-147,189,-152,189,-156,272,-164,-165,-166,189,189,-146,-167,-145,189,189,189,-148,-157,-159,-160,189,189,-162,189,-158,-161,-163,]),'DO':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,190,-168,190,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,190,-147,190,-152,190,-156,-164,-165,-166,190,190,-146,-167,-145,190,190,190,-148,-157,-159,-160,190,190,-162,190,-158,-161,-163,]),'FOR':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,191,-168,191,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,191,-147,191,-152,191,-156,-164,-165,-166,191,191,-146,-167,-145,191,191,191,-148,-157,-159,-160,191,191,-162,191,-158,-161,-163,]),'CONTINUE':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,192,-168,192,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,192,-147,192,-152,192,-156,-164,-165,-166,192,192,-146,-167,-145,192,192,192,-148,-157,-159,-160,192,192,-162,192,-158,-161,-163,]),'BREAK':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,193,-168,193,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,193,-147,193,-152,193,-156,-164,-165,-166,193,193,-146,-167,-145,193,193,193,-148,-157,-159,-160,193,193,-162,193,-158,-161,-163,]),'RETURN':([25,26,32,103,170,172,173,174,175,176,177,178,179,180,181,182,190,238,239,241,243,244,250,251,252,266,267,268,274,278,279,280,281,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,-94,194,-168,194,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,194,-147,194,-152,194,-156,-164,-165,-166,194,194,-146,-167,-145,194,194,194,-148,-157,-159,-160,194,194,-162,194,-158,-161,-163,]),'INCREMENT':([25,26,30,32,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,203,206,207,209,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,259,260,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,56,-94,56,122,56,56,56,56,56,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,56,56,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,56,56,-23,-24,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-168,56,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,56,56,56,56,-26,-28,-29,-19,56,56,-147,56,-152,56,-156,56,56,56,56,-164,-165,-166,56,-25,-27,56,56,56,-146,56,-167,-145,56,56,56,56,56,-148,-157,-159,-160,56,56,-162,56,-158,-161,-163,]),'DECREMENT':([25,26,30,32,51,55,56,57,58,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,203,206,207,209,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,259,260,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,57,-94,57,123,57,57,57,57,57,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,57,57,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,57,57,-23,-24,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,-168,57,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,57,57,57,57,-26,-28,-29,-19,57,57,-147,57,-152,57,-156,57,57,57,57,-164,-165,-166,57,-25,-27,57,57,57,-146,57,-167,-145,57,57,57,57,57,-148,-157,-159,-160,57,57,-162,57,-158,-161,-163,]),'SIZEOF':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,60,-94,60,60,60,60,60,60,-38,-39,-40,-41,-42,-43,60,60,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-168,60,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,60,60,60,60,60,60,-147,60,-152,60,-156,60,60,60,60,-164,-165,-166,60,60,60,60,-146,60,-167,-145,60,60,60,60,60,-148,-157,-159,-160,60,60,-162,60,-158,-161,-163,]),'BITWISE_AND':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,134,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,203,206,207,209,210,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,238,239,241,243,244,245,246,247,249,250,251,252,258,259,260,261,262,264,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,65,-94,65,-44,-32,65,65,65,-46,65,65,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,143,-64,-61,-56,-53,-50,65,65,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,65,65,-23,-24,65,65,-33,65,-34,-35,-44,65,-36,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-168,65,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,65,65,65,65,-26,-28,-29,-19,65,65,143,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-147,65,-152,65,-156,65,65,65,65,-164,-165,-166,65,-25,-27,65,-37,-45,65,65,-146,65,-167,-145,65,65,65,65,65,-148,-157,-159,-160,65,65,-162,65,-158,-161,-163,]),'ADD':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,86,87,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,134,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,203,206,207,209,210,211,223,224,225,226,227,228,229,238,239,241,243,244,245,246,247,249,250,251,252,258,259,260,261,262,264,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,67,-94,67,-44,-32,67,67,67,-46,67,67,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,152,-50,67,67,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,67,67,-23,-24,67,67,-33,67,-34,-35,-44,67,-36,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-168,67,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,67,67,67,67,-26,-28,-29,-19,67,67,152,152,-51,-52,-47,-48,-49,-147,67,-152,67,-156,67,67,67,67,-164,-165,-166,67,-25,-27,67,-37,-45,67,67,-146,67,-167,-145,67,67,67,67,67,-148,-157,-159,-160,67,67,-162,67,-158,-161,-163,]),'SUBSTRACT':([25,26,30,32,51,53,55,56,57,58,59,60,61,63,64,65,66,67,68,69,70,72,73,74,75,76,77,78,79,80,86,87,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,128,129,130,131,132,133,134,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,203,206,207,209,210,211,223,224,225,226,227,228,229,238,239,241,243,244,245,246,247,249,250,251,252,258,259,260,261,262,264,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,68,-94,68,-44,-32,68,68,68,-46,68,68,-22,-11,-38,-39,-40,-41,-42,-43,-12,-13,-14,-15,-16,-17,-18,-20,-21,153,-50,68,68,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,68,68,-23,-24,68,68,-33,68,-34,-35,-44,68,-36,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-168,68,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,68,68,68,68,-26,-28,-29,-19,68,68,153,153,-51,-52,-47,-48,-49,-147,68,-152,68,-156,68,68,68,68,-164,-165,-166,68,-25,-27,68,-37,-45,68,68,-146,68,-167,-145,68,68,68,68,68,-148,-157,-159,-160,68,68,-162,68,-158,-161,-163,]),'BITWISE_ONE_COMPLEMENT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,69,-94,69,69,69,69,69,69,-38,-39,-40,-41,-42,-43,69,69,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-168,69,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,69,69,69,69,69,69,-147,69,-152,69,-156,69,69,69,69,-164,-165,-166,69,69,69,69,-146,69,-167,-145,69,69,69,69,69,-148,-157,-159,-160,69,69,-162,69,-158,-161,-163,]),'LOGICAL_NOT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,70,-94,70,70,70,70,70,70,-38,-39,-40,-41,-42,-43,70,70,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-168,70,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,70,70,70,70,70,70,-147,70,-152,70,-156,70,70,70,70,-164,-165,-166,70,70,70,70,-146,70,-167,-145,70,70,70,70,70,-148,-157,-159,-160,70,70,-162,70,-158,-161,-163,]),'INT_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,90,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,72,-94,72,72,72,72,72,72,-38,-39,-40,-41,-42,-43,157,72,72,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-168,72,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,72,72,72,72,72,72,-147,72,-152,72,-156,72,72,72,72,-164,-165,-166,72,72,72,72,-146,72,-167,-145,72,72,72,72,72,-148,-157,-159,-160,72,72,-162,72,-158,-161,-163,]),'HEX_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,73,-94,73,73,73,73,73,73,-38,-39,-40,-41,-42,-43,73,73,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-168,73,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,73,73,73,73,73,73,-147,73,-152,73,-156,73,73,73,73,-164,-165,-166,73,73,73,73,-146,73,-167,-145,73,73,73,73,73,-148,-157,-159,-160,73,73,-162,73,-158,-161,-163,]),'OCTAL_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,74,-94,74,74,74,74,74,74,-38,-39,-40,-41,-42,-43,74,74,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-168,74,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,74,74,74,74,74,74,-147,74,-152,74,-156,74,74,74,74,-164,-165,-166,74,74,74,74,-146,74,-167,-145,74,74,74,74,74,-148,-157,-159,-160,74,74,-162,74,-158,-161,-163,]),'EXPONENT_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,75,-94,75,75,75,75,75,75,-38,-39,-40,-41,-42,-43,75,75,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-168,75,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,75,75,75,75,75,75,-147,75,-152,75,-156,75,75,75,75,-164,-165,-166,75,75,75,75,-146,75,-167,-145,75,75,75,75,75,-148,-157,-159,-160,75,75,-162,75,-158,-161,-163,]),'REAL_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,76,-94,76,76,76,76,76,76,-38,-39,-40,-41,-42,-43,76,76,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-168,76,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,76,76,76,76,76,76,-147,76,-152,76,-156,76,76,76,76,-164,-165,-166,76,76,76,76,-146,76,-167,-145,76,76,76,76,76,-148,-157,-159,-160,76,76,-162,76,-158,-161,-163,]),'CHAR_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,77,-94,77,77,77,77,77,77,-38,-39,-40,-41,-42,-43,77,77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-168,77,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,77,77,77,77,77,77,-147,77,-152,77,-156,77,77,77,77,-164,-165,-166,77,77,77,77,-146,77,-167,-145,77,77,77,77,77,-148,-157,-159,-160,77,77,-162,77,-158,-161,-163,]),'STR_CONSTANT':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,78,-94,78,78,78,78,78,78,-38,-39,-40,-41,-42,-43,78,78,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-168,78,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,78,78,78,78,78,78,-147,78,-152,78,-156,78,78,78,78,-164,-165,-166,78,78,78,78,-146,78,-167,-145,78,78,78,78,78,-148,-157,-159,-160,78,78,-162,78,-158,-161,-163,]),'TRUE':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,79,-94,79,79,79,79,79,79,-38,-39,-40,-41,-42,-43,79,79,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-168,79,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,79,79,79,79,79,79,-147,79,-152,79,-156,79,79,79,79,-164,-165,-166,79,79,79,79,-146,79,-167,-145,79,79,79,79,79,-148,-157,-159,-160,79,79,-162,79,-158,-161,-163,]),'FALSE':([25,26,30,32,51,56,57,58,60,61,65,66,67,68,69,70,103,108,109,110,111,112,113,114,115,116,117,118,119,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,170,172,173,174,175,176,177,178,179,180,181,182,184,190,194,198,210,211,238,239,241,243,244,245,246,247,249,250,251,252,258,261,266,267,268,273,274,278,279,280,281,282,283,284,285,286,287,289,291,293,294,295,296,297,],[-92,-93,80,-94,80,80,80,80,80,80,-38,-39,-40,-41,-42,-43,80,80,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-168,80,-151,-153,-154,-139,-140,-141,-142,-143,-144,-155,80,80,80,80,80,80,-147,80,-152,80,-156,80,80,80,80,-164,-165,-166,80,80,80,80,-146,80,-167,-145,80,80,80,80,80,-148,-157,-159,-160,80,80,-162,80,-158,-161,-163,]),'L_SQBR':([34,36,38,55,63,64,72,73,74,75,76,77,78,79,80,122,123,158,159,203,206,207,209,230,259,260,],[90,-122,90,124,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-125,-123,-26,-28,-29,-19,-124,-25,-27,]),'COLON':([52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,122,123,128,130,131,132,134,138,185,199,200,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,235,242,259,260,262,263,264,275,],[-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-89,243,-77,258,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-91,267,-25,-27,-37,-90,-45,-75,]),'R_SQBR':([52,53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,122,123,128,130,131,132,134,138,157,199,201,202,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,263,264,275,],[-76,-44,-74,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,158,-23,-24,-33,-34,-35,-44,-36,-89,230,-77,-73,259,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-90,-45,-75,]),'DIVIDE':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,87,122,123,128,130,131,132,134,203,206,207,209,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,155,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,155,155,-47,-48,-49,-25,-27,-37,-45,]),'MODULUS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,87,122,123,128,130,131,132,134,203,206,207,209,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,156,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,156,156,-47,-48,-49,-25,-27,-37,-45,]),'LEFT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,85,86,87,122,123,128,130,131,132,134,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,150,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,150,150,150,150,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'RIGHT_SHIFT':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,85,86,87,122,123,128,130,131,132,134,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,151,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,151,151,151,151,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LESS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,146,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,146,146,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'GREATER':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,147,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,147,147,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LESS_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,148,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,148,148,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'GREATER_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,149,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,149,149,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,83,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,144,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,144,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'NOT_EQUALS':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,83,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,145,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,145,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'BITWISE_XOR':([53,55,59,63,64,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,142,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,142,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'BITWISE_OR':([53,55,59,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,122,123,128,130,131,132,134,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,-22,-11,141,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,141,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LOGICAL_AND':([53,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,122,123,128,130,131,132,134,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,-32,-46,140,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,140,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'QUES_MARK':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,122,123,128,130,131,132,134,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,120,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'LOGICAL_OR':([53,54,55,59,62,63,64,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,122,123,128,130,131,132,134,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,259,260,262,264,],[-44,121,-32,-46,-72,-22,-11,-70,-12,-13,-14,-15,-16,-17,-18,-20,-21,-68,-66,-64,-61,-56,-53,-50,-23,-24,-33,-34,-35,-44,-36,-73,-26,-28,-29,-19,-71,-69,-67,-65,-62,-63,-57,-58,-59,-60,-54,-55,-51,-52,-47,-48,-49,-25,-27,-37,-45,]),'MULTIPLY_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[110,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'DIVIDE_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[111,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'MODULUS_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[112,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'ADD_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[113,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'SUBSTRACT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[114,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'LEFT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[115,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'RIGHT_SHIFT_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[116,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'BITWISE_AND_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[117,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'BITWISE_XOR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[118,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'BITWISE_OR_ASSIGNMENT':([53,55,63,64,72,73,74,75,76,77,78,79,80,122,123,128,130,131,132,134,203,206,207,209,259,260,262,264,],[119,-32,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-33,-34,-35,-44,-36,-26,-28,-29,-19,-25,-27,-37,-45,]),'DOT':([55,63,64,72,73,74,75,76,77,78,79,80,122,123,203,206,207,209,259,260,],[126,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-26,-28,-29,-19,-25,-27,]),'ARROW':([55,63,64,72,73,74,75,76,77,78,79,80,122,123,203,206,207,209,259,260,],[127,-22,-11,-12,-13,-14,-15,-16,-17,-18,-20,-21,-23,-24,-26,-28,-29,-19,-25,-27,]),'ELSE':([176,177,178,179,180,181,182,238,244,250,251,252,268,274,278,284,285,286,287,293,295,296,297,],[-139,-140,-141,-142,-143,-144,-155,-147,-156,-164,-165,-166,-146,-167,-145,-148,291,-159,-160,-162,-158,-161,-163,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,18,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,103,172,239,266,],[5,5,175,175,175,175,]),'type_specifier':([0,2,29,39,61,92,100,103,133,135,172,239,266,],[6,6,42,94,139,94,42,183,139,139,183,183,183,]),'struct_specifier':([0,2,103,172,239,266,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,103,172,239,266,],[8,8,8,8,8,8,]),'declarator':([6,33,37,42,94,183,233,],[19,89,91,98,163,89,265,]),'init_declarator_list':([6,183,],[20,20,]),'pointer':([6,33,37,42,94,139,183,233,],[21,21,21,21,21,212,21,21,]),'no_pointer':([6,33,37,42,94,183,233,],[22,22,22,22,22,22,22,]),'init_declarator':([6,33,183,],[23,88,23,]),'func_scope':([19,],[29,]),'direct_declarator':([21,22,],[34,38,]),'add_sym_struct':([27,254,],[39,39,]),'parameter_type_list':([29,],[43,]),'func_rparen_2':([29,],[44,]),'parameter_declaration':([29,100,],[45,168,]),'initializer':([30,51,198,],[49,107,257,]),'assignment_expression':([30,51,61,103,108,120,124,125,129,133,135,172,190,194,198,210,239,243,245,246,247,249,261,266,267,273,279,280,281,282,283,289,291,294,],[50,50,138,138,199,138,138,205,138,138,138,138,138,138,50,263,138,138,138,138,138,138,276,138,138,138,138,138,138,138,138,138,138,138,]),'conditional_expression':([30,51,61,103,108,120,124,125,129,133,135,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[52,52,52,52,52,52,52,52,52,52,52,235,52,235,52,52,52,52,52,52,52,52,52,52,275,52,52,52,52,52,52,52,52,52,52,52,52,]),'unary_expression':([30,51,56,57,58,60,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,172,184,190,194,198,210,211,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[53,53,128,130,132,134,53,53,53,53,132,53,53,53,53,53,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,53,132,53,53,53,53,132,53,53,53,53,53,53,132,53,53,53,53,53,53,53,53,53,53,53,53,]),'logical_or_expression':([30,51,61,103,108,120,124,125,129,133,135,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'postfix_expression':([30,51,56,57,58,60,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,172,184,190,194,198,210,211,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'unary_operator':([30,51,56,57,58,60,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,172,184,190,194,198,210,211,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'cast_expression':([30,51,58,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,172,184,190,194,198,210,211,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[59,59,131,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,227,228,229,59,59,59,59,59,59,59,264,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'logical_and_expression':([30,51,61,103,108,120,121,124,125,129,133,135,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[62,62,62,62,62,62,201,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'primary_expression':([30,51,56,57,58,60,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,164,172,184,190,194,198,210,211,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'inclusive_or_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[71,71,71,71,71,71,71,71,71,71,71,71,213,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,]),'exclusive_or_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,141,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[81,81,81,81,81,81,81,81,81,81,81,81,81,214,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'and_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,141,142,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,215,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'equality_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,141,142,143,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,216,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'relational_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,217,218,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'shift_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,219,220,221,222,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'additive_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,223,224,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'multiplicative_expression':([30,51,61,103,108,120,121,124,125,129,133,135,140,141,142,143,144,145,146,147,148,149,150,151,152,153,164,172,184,190,194,198,210,239,243,245,246,247,249,258,261,266,267,273,279,280,281,282,283,289,291,294,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,225,226,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'struct_declaration_list':([39,],[92,]),'struct_declaration':([39,92,],[93,161,]),'enumerator_list':([41,],[96,]),'enumerator':([41,166,],[97,236,]),'func_rparen_1':([43,],[99,]),'function_body':([44,99,],[102,167,]),'initializer_list':([51,],[106,]),'assignment_operator':([53,],[108,]),'expression':([61,103,120,124,129,133,135,172,190,194,239,243,245,246,247,249,266,267,273,279,280,281,282,283,289,291,294,],[136,186,200,202,136,136,136,186,186,253,186,186,269,270,271,186,186,186,186,186,186,186,288,290,186,186,186,]),'type_name':([61,133,135,],[137,137,208,]),'pop_sym':([92,102,167,266,],[160,169,237,277,]),'struct_declarator_list':([94,],[162,]),'block_item_list':([103,239,],[172,266,]),'block_item':([103,172,239,266,],[173,241,173,241,]),'statement':([103,172,190,239,243,266,267,279,280,281,289,291,294,],[174,174,248,174,268,174,278,285,286,287,293,295,297,]),'labeled_statement':([103,172,190,239,243,266,267,279,280,281,289,291,294,],[176,176,176,176,176,176,176,176,176,176,176,176,176,]),'compound_statement':([103,172,190,239,243,266,267,279,280,281,289,291,294,],[177,177,177,177,177,177,177,177,177,177,177,177,177,]),'expression_statement':([103,172,190,239,243,249,266,267,273,279,280,281,289,291,294,],[178,178,178,178,178,273,178,178,283,178,178,178,178,178,178,]),'selection_statement':([103,172,190,239,243,266,267,279,280,281,289,291,294,],[179,179,179,179,179,179,179,179,179,179,179,179,179,]),'iteration_statement':([103,172,190,239,243,266,267,279,280,281,289,291,294,],[180,180,180,180,180,180,180,180,180,180,180,180,180,]),'jump_statement':([103,172,190,239,243,266,267,279,280,281,289,291,294,],[181,181,181,181,181,181,181,181,181,181,181,181,181,]),'argument_expression_list':([125,],[204,]),'constant_expression':([164,184,],[234,242,]),'add_sym':([170,],[239,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',27),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',33),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',34),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',41),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',42),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',49),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',50),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',65),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',77),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',88),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',99),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',100),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',101),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',102),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',103),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',104),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',105),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',106),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',107),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',108),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',109),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',140),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',141),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',142),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',168),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',207),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',208),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',257),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',291),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',326),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',327),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',341),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',348),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',349),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',371),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',417),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',418),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',435),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',436),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',437),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',438),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',439),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',440),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',447),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',448),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',464),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',465),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',466),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',498),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',529),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',530),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',531),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',599),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',600),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',601),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',636),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',637),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',638),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',639),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',640),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',675),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',676),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',677),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',712),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',713),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',749),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',750),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',787),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',788),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',824),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',825),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',861),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',862),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',899),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',900),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',932),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',933),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',981),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',982),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',983),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',984),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',985),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',986),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',987),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',988),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',989),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',990),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',991),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',998),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',999),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',1015),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',1023),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',1024),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',1025),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',1038),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',1039),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',1047),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',1048),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',1078),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',1079),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',1080),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',1081),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',1082),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',1083),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1084),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1085),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',1086),
  ('struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES','struct_specifier',6,'p_struct_specifier','cparser.py',1109),
  ('add_sym_struct -> L_BRACES','add_sym_struct',1,'p_add_sym_struct','cparser.py',1118),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',1127),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',1128),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',1139),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',1147),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',1148),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',1173),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',1180),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',1181),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',1188),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',1189),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1197),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1198),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',1208),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',1209),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',1210),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',1211),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',1234),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',1235),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',1266),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1282),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1283),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1293),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1307),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1308),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',1320),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',1321),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',1322),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',1335),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',1336),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',1361),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1362),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1363),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1364),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1365),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1366),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1373),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1374),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1391),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1392),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1402),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1403),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1413),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1414),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1421),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1422),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1434),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1435),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1445),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1446),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1447),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1471),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1472),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1473),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1474),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1502),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1503),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1509),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1510),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1549),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1560),
]
