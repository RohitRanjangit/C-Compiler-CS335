
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym\n                        | type_specifier declarator func_scope func_rparen_2 function_body pop_sym\n    \n    function_definition  : type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym\n                         | type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym\n    \n    func_scope : L_PAREN\n    \n    func_rparen_1 : R_PAREN\n    \n    func_rparen_2 : R_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | COLON COLON IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n                       | NULL\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR constant_expression R_SQBR\n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK assignment_expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n                | AUTO auto_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT assignment_expression\n    \n    auto_declarator_list : auto_declarator\n                         | auto_declarator_list COMMA auto_declarator\n    \n    auto_declarator : IDENTIFIER ASSIGNMENT assignment_expression\n                    | IDENTIFIER\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | STRUCT IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES\n    \n    add_sym_struct : L_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    statement : compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement_list : labeled_statement_list labeled_statement\n                           | labeled_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t                 \n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'AUTO':([0,2,3,4,5,16,23,31,38,101,102,103,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[8,8,-2,-4,-5,-3,-96,-97,-98,-165,8,-165,-165,-165,-7,-164,-145,8,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-6,-8,-143,8,-146,-148,-152,-160,-161,-162,8,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'VOID':([0,2,3,4,5,16,23,28,30,31,38,41,42,60,94,95,100,101,102,103,131,133,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,224,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[9,9,-2,-4,-5,-3,-96,9,-10,-97,-98,9,-115,9,9,-116,9,-165,9,-165,9,9,-117,-165,-165,-7,-164,-145,9,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,9,-146,-148,-152,-160,-161,-162,9,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'CHAR':([0,2,3,4,5,16,23,28,30,31,38,41,42,60,94,95,100,101,102,103,131,133,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,224,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[10,10,-2,-4,-5,-3,-96,10,-10,-97,-98,10,-115,10,10,-116,10,-165,10,-165,10,10,-117,-165,-165,-7,-164,-145,10,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,10,-146,-148,-152,-160,-161,-162,10,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'INT':([0,2,3,4,5,16,23,28,30,31,38,41,42,60,94,95,100,101,102,103,131,133,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,224,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[11,11,-2,-4,-5,-3,-96,11,-10,-97,-98,11,-115,11,11,-116,11,-165,11,-165,11,11,-117,-165,-165,-7,-164,-145,11,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,11,-146,-148,-152,-160,-161,-162,11,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'LONG':([0,2,3,4,5,16,23,28,30,31,38,41,42,60,94,95,100,101,102,103,131,133,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,224,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[12,12,-2,-4,-5,-3,-96,12,-10,-97,-98,12,-115,12,12,-116,12,-165,12,-165,12,12,-117,-165,-165,-7,-164,-145,12,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,12,-146,-148,-152,-160,-161,-162,12,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'FLOAT':([0,2,3,4,5,16,23,28,30,31,38,41,42,60,94,95,100,101,102,103,131,133,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,224,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[13,13,-2,-4,-5,-3,-96,13,-10,-97,-98,13,-115,13,13,-116,13,-165,13,-165,13,13,-117,-165,-165,-7,-164,-145,13,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,13,-146,-148,-152,-160,-161,-162,13,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'STRUCT':([0,2,3,4,5,16,23,28,30,31,38,41,42,60,94,95,100,101,102,103,131,133,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,224,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[14,14,-2,-4,-5,-3,-96,48,-10,-97,-98,48,-115,48,48,-116,48,-165,187,-165,48,48,-117,-165,-165,-7,-164,-145,187,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,187,-146,-148,-152,-160,-161,-162,187,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'BOOL':([0,2,3,4,5,16,23,28,30,31,38,41,42,60,94,95,100,101,102,103,131,133,158,161,162,164,165,166,167,168,169,170,171,172,173,174,175,176,188,224,226,227,228,229,230,231,232,238,239,240,251,257,266,267,269,276,278,283,284,289,],[15,15,-2,-4,-5,-3,-96,15,-10,-97,-98,15,-115,15,15,-116,15,-165,15,-165,15,15,-117,-165,-165,-7,-164,-145,15,-147,-149,-150,-134,-135,-136,-137,-138,-151,-9,-118,-6,-8,-143,15,-146,-148,-152,-160,-161,-162,15,-163,-144,-153,-156,-158,-154,-157,-159,-155,]),'$end':([1,2,3,4,5,16,23,31,38,101,103,161,162,164,166,188,226,227,230,],[0,-1,-2,-4,-5,-3,-96,-97,-98,-165,-165,-165,-165,-7,-145,-9,-6,-8,-146,]),'MULTIPLY':([6,9,10,11,12,13,15,19,22,23,27,29,31,32,34,36,38,40,43,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,87,96,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,126,127,128,129,130,131,132,133,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,177,182,186,192,195,198,199,201,202,203,204,217,218,219,220,221,225,228,229,231,232,233,234,235,237,238,239,240,242,243,244,245,246,247,249,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[22,-107,-108,-109,-110,-111,-113,34,-126,-96,-112,65,-97,22,-127,22,-98,65,22,-48,-36,65,65,65,-50,65,65,-26,-13,-42,-43,-44,-45,-46,-47,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,152,22,65,-112,65,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,65,65,-27,-28,65,65,-37,65,-38,-39,-48,65,-40,65,22,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-164,65,-147,-149,-150,-134,-135,-136,-137,-138,-151,22,65,65,-14,-30,-32,-33,-22,65,65,34,152,152,-51,-52,-53,22,-143,65,-148,-152,65,65,65,65,-160,-161,-162,-112,65,-29,-31,65,-41,-49,65,65,-163,65,65,65,65,-144,-153,-156,65,65,-158,65,-154,65,-157,-159,65,-155,65,]),'IDENTIFIER':([6,8,9,10,11,12,13,14,15,19,20,22,23,27,29,31,32,34,36,38,39,40,43,48,55,56,57,59,60,64,65,66,67,68,69,96,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,177,182,186,187,202,203,225,228,229,231,232,233,234,235,237,238,239,240,242,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-128,26,-107,-108,-109,-110,-111,27,-113,35,35,-126,-96,-112,63,-97,-128,-127,-128,-98,26,63,-128,104,63,63,63,63,63,-42,-43,-44,-45,-46,-47,-128,63,-112,63,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,63,63,192,63,63,198,199,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-164,63,-147,-149,-150,-134,-135,-136,-137,-138,-151,-128,63,63,242,63,63,-128,-143,63,-148,-152,63,63,63,63,-160,-161,-162,-112,63,63,63,63,-163,63,63,63,63,-144,-153,-156,63,63,-158,63,-154,63,-157,-159,63,-155,63,]),'L_PAREN':([6,9,10,11,12,13,15,17,19,20,22,23,27,29,31,32,33,34,35,36,37,38,40,43,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,96,102,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,156,165,167,168,169,170,171,172,173,174,175,176,177,179,180,181,182,183,186,192,195,198,199,201,202,203,222,225,228,229,231,232,233,234,235,237,238,239,240,242,243,244,245,246,251,255,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-128,-107,-108,-109,-110,-111,-113,30,36,36,-126,-96,-112,60,-97,-128,-121,-127,-123,-128,-122,-98,60,-128,123,127,127,131,133,60,-26,-13,-42,-43,-44,-45,-46,-47,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-128,60,-112,60,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,60,131,-27,-28,131,60,60,60,60,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,-124,-164,60,-147,-149,-150,-134,-135,-136,-137,-138,-151,-128,233,234,235,60,237,60,-14,-30,-32,-33,-22,60,131,-125,-128,-143,60,-148,-152,60,60,60,60,-160,-161,-162,-112,131,-29,-31,60,60,264,60,-163,60,60,60,60,-144,-153,-156,60,60,-158,60,-154,131,-157,-159,60,-155,60,]),'SEMI_COLON':([7,17,18,21,23,24,25,26,31,33,35,37,38,46,49,50,51,52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,99,102,120,121,126,128,129,130,132,136,156,159,160,165,167,168,169,170,171,172,173,174,175,176,178,182,184,185,186,189,191,192,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,228,229,231,232,237,238,239,240,241,244,245,247,248,249,250,251,256,257,258,261,263,266,267,269,271,273,275,276,277,278,283,284,288,289,290,],[23,-101,31,-99,-96,38,-103,-106,-97,-121,-123,-122,-98,103,-102,-80,-48,-78,-36,-50,-76,-26,-13,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,-100,-101,-104,-105,162,176,-27,-28,-37,-38,-39,-48,-40,-93,-124,224,-119,-164,176,-147,-149,-150,-134,-135,-136,-137,-138,-151,232,176,238,239,240,-81,-77,-14,-30,-32,-33,-22,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-125,-114,-143,176,-148,-152,176,-160,-161,-162,257,-29,-31,-41,-94,-49,-120,176,176,-163,-79,176,176,-144,-153,-156,176,176,283,-158,176,-154,-157,-159,176,-155,176,]),'R_PAREN':([9,10,11,12,13,15,22,28,30,33,34,35,37,44,47,50,51,52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,97,104,120,121,123,126,128,129,130,132,134,135,136,137,156,163,176,189,191,192,195,196,197,198,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,232,244,245,247,248,249,252,253,254,258,259,265,270,272,],[-107,-108,-109,-110,-111,-113,-126,46,-10,-121,-127,-123,-122,99,-129,-80,-48,-78,-36,-50,-76,-26,-13,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,156,-131,-112,-27,-28,195,-37,-38,-39,-48,-40,201,203,-93,-132,-124,-130,-151,-81,-77,-14,-30,245,-34,-32,-33,247,-22,-133,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-125,-152,-29,-31,-41,-94,-49,261,262,263,-79,-35,271,275,277,]),'COMMA':([17,18,21,24,25,26,33,35,37,44,47,49,50,51,52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,92,93,97,120,121,126,128,129,130,132,134,136,156,159,160,163,178,189,191,192,195,196,197,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,241,244,245,247,248,249,250,252,253,254,258,259,270,272,],[-101,32,-99,39,-103,-106,-121,-123,-122,100,-129,-102,-80,-48,-78,-36,-50,-76,-26,-13,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,-100,-101,-104,-105,-131,-27,-28,-37,-38,-39,-48,-40,202,-93,-124,225,-119,-130,202,-81,-77,-14,-30,246,-34,-32,-33,-22,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-125,202,-29,-31,-41,-94,-49,-120,202,202,202,-79,-35,202,202,]),'ASSIGNMENT':([17,26,33,35,37,51,54,62,63,71,72,73,74,75,76,77,78,79,80,89,120,121,126,128,129,130,132,156,192,195,198,199,201,222,244,245,247,249,],[29,40,-121,-123,-122,106,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,29,-27,-28,-37,-38,-39,-48,-40,-124,-14,-30,-32,-33,-22,-125,-29,-31,-41,-49,]),'R_BRACES':([23,31,38,94,95,102,157,158,165,167,168,169,170,171,172,173,174,175,176,224,228,231,232,238,239,240,251,257,260,266,267,269,276,278,279,280,283,284,285,286,289,291,292,],[-96,-97,-98,-165,-116,166,223,-117,228,230,-147,-149,-150,-134,-135,-136,-137,-138,-151,-118,-143,-148,-152,-160,-161,-162,-165,-163,266,-144,-153,-156,-158,-154,-165,-140,-157,-159,289,-139,-155,-142,-141,]),'L_BRACES':([23,27,31,38,45,46,98,99,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,242,251,257,261,262,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,42,-97,-98,102,-12,102,-11,165,-164,165,-147,-149,-150,-134,-135,-136,-137,-138,-151,165,-143,165,-148,-152,-160,-161,-162,42,165,-163,165,268,165,-144,-153,-156,165,165,-158,165,-154,-157,-159,165,-155,165,]),'IF':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,179,-164,179,-147,-149,-150,-134,-135,-136,-137,-138,-151,179,-143,179,-148,-152,-160,-161,-162,179,-163,179,179,-144,-153,-156,179,179,-158,179,-154,-157,-159,179,-155,179,]),'SWITCH':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,180,-164,180,-147,-149,-150,-134,-135,-136,-137,-138,-151,180,-143,180,-148,-152,-160,-161,-162,180,-163,180,180,-144,-153,-156,180,180,-158,180,-154,-157,-159,180,-155,180,]),'WHILE':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,236,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,181,-164,181,-147,-149,-150,-134,-135,-136,-137,-138,-151,181,-143,181,-148,-152,255,-160,-161,-162,181,-163,181,181,-144,-153,-156,181,181,-158,181,-154,-157,-159,181,-155,181,]),'DO':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,182,-164,182,-147,-149,-150,-134,-135,-136,-137,-138,-151,182,-143,182,-148,-152,-160,-161,-162,182,-163,182,182,-144,-153,-156,182,182,-158,182,-154,-157,-159,182,-155,182,]),'FOR':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,183,-164,183,-147,-149,-150,-134,-135,-136,-137,-138,-151,183,-143,183,-148,-152,-160,-161,-162,183,-163,183,183,-144,-153,-156,183,183,-158,183,-154,-157,-159,183,-155,183,]),'CONTINUE':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,184,-164,184,-147,-149,-150,-134,-135,-136,-137,-138,-151,184,-143,184,-148,-152,-160,-161,-162,184,-163,184,184,-144,-153,-156,184,184,-158,184,-154,-157,-159,184,-155,184,]),'BREAK':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,185,-164,185,-147,-149,-150,-134,-135,-136,-137,-138,-151,185,-143,185,-148,-152,-160,-161,-162,185,-163,185,185,-144,-153,-156,185,185,-158,185,-154,-157,-159,185,-155,185,]),'RETURN':([23,31,38,102,165,167,168,169,170,171,172,173,174,175,176,182,228,229,231,232,238,239,240,251,257,261,263,266,267,269,271,273,276,277,278,283,284,288,289,290,],[-96,-97,-98,186,-164,186,-147,-149,-150,-134,-135,-136,-137,-138,-151,186,-143,186,-148,-152,-160,-161,-162,186,-163,186,186,-144,-153,-156,186,186,-158,186,-154,-157,-159,186,-155,186,]),'INCREMENT':([23,29,31,38,40,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,192,195,198,199,201,202,203,228,229,231,232,233,234,235,237,238,239,240,243,244,245,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,55,-97,-98,55,120,55,55,55,55,55,-26,-13,-42,-43,-44,-45,-46,-47,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,55,55,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,55,55,-27,-28,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-164,55,-147,-149,-150,-134,-135,-136,-137,-138,-151,55,55,-14,-30,-32,-33,-22,55,55,-143,55,-148,-152,55,55,55,55,-160,-161,-162,55,-29,-31,55,55,55,-163,55,55,55,55,-144,-153,-156,55,55,-158,55,-154,55,-157,-159,55,-155,55,]),'DECREMENT':([23,29,31,38,40,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,192,195,198,199,201,202,203,228,229,231,232,233,234,235,237,238,239,240,243,244,245,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,56,-97,-98,56,121,56,56,56,56,56,-26,-13,-42,-43,-44,-45,-46,-47,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,56,56,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,56,56,-27,-28,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-164,56,-147,-149,-150,-134,-135,-136,-137,-138,-151,56,56,-14,-30,-32,-33,-22,56,56,-143,56,-148,-152,56,56,56,56,-160,-161,-162,56,-29,-31,56,56,56,-163,56,56,56,56,-144,-153,-156,56,56,-158,56,-154,56,-157,-159,56,-155,56,]),'SIZEOF':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,59,-97,-98,59,59,59,59,59,59,-42,-43,-44,-45,-46,-47,59,59,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-164,59,-147,-149,-150,-134,-135,-136,-137,-138,-151,59,59,59,59,-143,59,-148,-152,59,59,59,59,-160,-161,-162,59,59,59,59,-163,59,59,59,59,-144,-153,-156,59,59,-158,59,-154,59,-157,-159,59,-155,59,]),'BITWISE_AND':([23,29,31,38,40,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,126,127,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,192,195,198,199,201,202,203,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,228,229,231,232,233,234,235,237,238,239,240,243,244,245,246,247,249,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,64,-97,-98,64,-48,-36,64,64,64,-50,64,64,-26,-13,-42,-43,-44,-45,-46,-47,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,141,-68,-65,-60,-57,-54,64,64,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,64,64,-27,-28,64,64,-37,64,-38,-39,-48,64,-40,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-164,64,-147,-149,-150,-134,-135,-136,-137,-138,-151,64,64,-14,-30,-32,-33,-22,64,64,141,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-143,64,-148,-152,64,64,64,64,-160,-161,-162,64,-29,-31,64,-41,-49,64,64,-163,64,64,64,64,-144,-153,-156,64,64,-158,64,-154,64,-157,-159,64,-155,64,]),'ADD':([23,29,31,38,40,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,86,87,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,126,127,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,192,195,198,199,201,202,203,215,216,217,218,219,220,221,228,229,231,232,233,234,235,237,238,239,240,243,244,245,246,247,249,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,66,-97,-98,66,-48,-36,66,66,66,-50,66,66,-26,-13,-42,-43,-44,-45,-46,-47,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,150,-54,66,66,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,66,66,-27,-28,66,66,-37,66,-38,-39,-48,66,-40,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-164,66,-147,-149,-150,-134,-135,-136,-137,-138,-151,66,66,-14,-30,-32,-33,-22,66,66,150,150,-55,-56,-51,-52,-53,-143,66,-148,-152,66,66,66,66,-160,-161,-162,66,-29,-31,66,-41,-49,66,66,-163,66,66,66,66,-144,-153,-156,66,66,-158,66,-154,66,-157,-159,66,-155,66,]),'SUBSTRACT':([23,29,31,38,40,51,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,86,87,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,126,127,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,192,195,198,199,201,202,203,215,216,217,218,219,220,221,228,229,231,232,233,234,235,237,238,239,240,243,244,245,246,247,249,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,67,-97,-98,67,-48,-36,67,67,67,-50,67,67,-26,-13,-42,-43,-44,-45,-46,-47,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,151,-54,67,67,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,67,67,-27,-28,67,67,-37,67,-38,-39,-48,67,-40,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-164,67,-147,-149,-150,-134,-135,-136,-137,-138,-151,67,67,-14,-30,-32,-33,-22,67,67,151,151,-55,-56,-51,-52,-53,-143,67,-148,-152,67,67,67,67,-160,-161,-162,67,-29,-31,67,-41,-49,67,67,-163,67,67,67,67,-144,-153,-156,67,67,-158,67,-154,67,-157,-159,67,-155,67,]),'BITWISE_ONE_COMPLEMENT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,68,-97,-98,68,68,68,68,68,68,-42,-43,-44,-45,-46,-47,68,68,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-164,68,-147,-149,-150,-134,-135,-136,-137,-138,-151,68,68,68,68,-143,68,-148,-152,68,68,68,68,-160,-161,-162,68,68,68,68,-163,68,68,68,68,-144,-153,-156,68,68,-158,68,-154,68,-157,-159,68,-155,68,]),'LOGICAL_NOT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,69,-97,-98,69,69,69,69,69,69,-42,-43,-44,-45,-46,-47,69,69,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-164,69,-147,-149,-150,-134,-135,-136,-137,-138,-151,69,69,69,69,-143,69,-148,-152,69,69,69,69,-160,-161,-162,69,69,69,69,-163,69,69,69,69,-144,-153,-156,69,69,-158,69,-154,69,-157,-159,69,-155,69,]),'COLON':([23,29,31,38,40,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,120,121,122,123,126,127,128,129,130,131,132,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,189,190,191,192,194,195,198,199,201,202,203,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,228,229,231,232,233,234,235,237,238,239,240,243,244,245,246,247,249,251,256,257,258,261,263,264,265,266,267,269,271,273,276,277,278,281,282,283,284,287,288,289,290,],[-96,53,-97,-98,53,-80,-48,-78,119,-36,53,53,53,-50,53,53,-76,-26,-13,-42,-43,-44,-45,-46,-47,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,53,53,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,53,53,-27,-28,53,53,-37,53,-38,-39,-48,53,-40,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-164,53,-147,-149,-150,-134,-135,-136,-137,-138,-151,53,53,-81,243,-77,-14,-95,-30,-32,-33,-22,53,53,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-143,53,-148,-152,53,53,53,53,-160,-161,-162,53,-29,-31,53,-41,-49,53,53,-163,-79,53,53,53,53,-144,-153,-156,53,53,-158,53,-154,53,288,-157,-159,290,53,-155,53,]),'INT_CONSTANT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,90,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,71,-97,-98,71,71,71,71,71,71,-42,-43,-44,-45,-46,-47,155,71,71,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-164,71,-147,-149,-150,-134,-135,-136,-137,-138,-151,71,71,71,71,-143,71,-148,-152,71,71,71,71,-160,-161,-162,71,71,71,71,-163,71,71,71,71,-144,-153,-156,71,71,-158,71,-154,71,-157,-159,71,-155,71,]),'HEX_CONSTANT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,72,-97,-98,72,72,72,72,72,72,-42,-43,-44,-45,-46,-47,72,72,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-164,72,-147,-149,-150,-134,-135,-136,-137,-138,-151,72,72,72,72,-143,72,-148,-152,72,72,72,72,-160,-161,-162,72,72,72,72,-163,72,72,72,72,-144,-153,-156,72,72,-158,72,-154,72,-157,-159,72,-155,72,]),'OCTAL_CONSTANT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,73,-97,-98,73,73,73,73,73,73,-42,-43,-44,-45,-46,-47,73,73,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-164,73,-147,-149,-150,-134,-135,-136,-137,-138,-151,73,73,73,73,-143,73,-148,-152,73,73,73,73,-160,-161,-162,73,73,73,73,-163,73,73,73,73,-144,-153,-156,73,73,-158,73,-154,73,-157,-159,73,-155,73,]),'EXPONENT_CONSTANT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,74,-97,-98,74,74,74,74,74,74,-42,-43,-44,-45,-46,-47,74,74,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-164,74,-147,-149,-150,-134,-135,-136,-137,-138,-151,74,74,74,74,-143,74,-148,-152,74,74,74,74,-160,-161,-162,74,74,74,74,-163,74,74,74,74,-144,-153,-156,74,74,-158,74,-154,74,-157,-159,74,-155,74,]),'REAL_CONSTANT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,75,-97,-98,75,75,75,75,75,75,-42,-43,-44,-45,-46,-47,75,75,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-164,75,-147,-149,-150,-134,-135,-136,-137,-138,-151,75,75,75,75,-143,75,-148,-152,75,75,75,75,-160,-161,-162,75,75,75,75,-163,75,75,75,75,-144,-153,-156,75,75,-158,75,-154,75,-157,-159,75,-155,75,]),'CHAR_CONSTANT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,76,-97,-98,76,76,76,76,76,76,-42,-43,-44,-45,-46,-47,76,76,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-164,76,-147,-149,-150,-134,-135,-136,-137,-138,-151,76,76,76,76,-143,76,-148,-152,76,76,76,76,-160,-161,-162,76,76,76,76,-163,76,76,76,76,-144,-153,-156,76,76,-158,76,-154,76,-157,-159,76,-155,76,]),'STR_CONSTANT':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,77,-97,-98,77,77,77,77,77,77,-42,-43,-44,-45,-46,-47,77,77,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-164,77,-147,-149,-150,-134,-135,-136,-137,-138,-151,77,77,77,77,-143,77,-148,-152,77,77,77,77,-160,-161,-162,77,77,77,77,-163,77,77,77,77,-144,-153,-156,77,77,-158,77,-154,77,-157,-159,77,-155,77,]),'TRUE':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,78,-97,-98,78,78,78,78,78,78,-42,-43,-44,-45,-46,-47,78,78,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-164,78,-147,-149,-150,-134,-135,-136,-137,-138,-151,78,78,78,78,-143,78,-148,-152,78,78,78,78,-160,-161,-162,78,78,78,78,-163,78,78,78,78,-144,-153,-156,78,78,-158,78,-154,78,-157,-159,78,-155,78,]),'FALSE':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,79,-97,-98,79,79,79,79,79,79,-42,-43,-44,-45,-46,-47,79,79,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-164,79,-147,-149,-150,-134,-135,-136,-137,-138,-151,79,79,79,79,-143,79,-148,-152,79,79,79,79,-160,-161,-162,79,79,79,79,-163,79,79,79,79,-144,-153,-156,79,79,-158,79,-154,79,-157,-159,79,-155,79,]),'NULL':([23,29,31,38,40,55,56,57,59,60,64,65,66,67,68,69,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,165,167,168,169,170,171,172,173,174,175,176,182,186,202,203,228,229,231,232,233,234,235,237,238,239,240,243,246,251,256,257,261,263,264,265,266,267,269,271,273,276,277,278,281,283,284,288,289,290,],[-96,80,-97,-98,80,80,80,80,80,80,-42,-43,-44,-45,-46,-47,80,80,-82,-83,-84,-85,-86,-87,-88,-89,-90,-91,-92,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-164,80,-147,-149,-150,-134,-135,-136,-137,-138,-151,80,80,80,80,-143,80,-148,-152,80,80,80,80,-160,-161,-162,80,80,80,80,-163,80,80,80,80,-144,-153,-156,80,80,-158,80,-154,80,-157,-159,80,-155,80,]),'L_SQBR':([33,35,37,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,156,192,195,198,199,201,222,244,245,],[90,-123,90,122,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-124,-14,-30,-32,-33,-22,-125,-29,-31,]),'DIVIDE':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,87,120,121,126,128,129,130,132,192,195,198,199,201,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,153,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,153,153,-51,-52,-53,-29,-31,-41,-49,]),'MODULUS':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,87,120,121,126,128,129,130,132,192,195,198,199,201,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,154,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,154,154,-51,-52,-53,-29,-31,-41,-49,]),'LEFT_SHIFT':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,148,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,148,148,148,148,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'RIGHT_SHIFT':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,149,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,149,149,149,149,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'LESS':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,144,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,144,144,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'GREATER':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,145,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,145,145,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'LESS_EQUALS':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,146,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,146,146,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'GREATER_EQUALS':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,147,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,147,147,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'EQUALS':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,83,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,142,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,142,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'NOT_EQUALS':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,83,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,143,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,143,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'BITWISE_XOR':([51,54,58,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,140,-70,-68,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,140,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'BITWISE_OR':([51,54,58,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,120,121,126,128,129,130,132,192,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,-26,-13,139,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,139,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'LOGICAL_AND':([51,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,120,121,126,128,129,130,132,191,192,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,-36,-50,138,-26,-13,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,138,-14,-30,-32,-33,-22,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'QUES_MARK':([51,52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,120,121,126,128,129,130,132,191,192,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,117,-36,-50,-76,-26,-13,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-77,-14,-30,-32,-33,-22,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'LOGICAL_OR':([51,52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,120,121,126,128,129,130,132,191,192,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,],[-48,118,-36,-50,-76,-26,-13,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,-77,-14,-30,-32,-33,-22,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,]),'MULTIPLY_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[107,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'DIVIDE_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[108,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'MODULUS_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[109,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'ADD_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[110,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'SUBSTRACT_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[111,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'LEFT_SHIFT_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[112,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'RIGHT_SHIFT_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[113,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'BITWISE_AND_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[114,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'BITWISE_XOR_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[115,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'BITWISE_OR_ASSIGNMENT':([51,54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,126,128,129,130,132,192,195,198,199,201,244,245,247,249,],[116,-36,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-37,-38,-39,-48,-40,-14,-30,-32,-33,-22,-29,-31,-41,-49,]),'R_SQBR':([52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,120,121,126,128,129,130,132,155,191,192,193,194,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,244,245,247,249,258,],[-78,-36,-50,-76,-26,-13,-74,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-72,-70,-68,-65,-60,-57,-54,-27,-28,-37,-38,-39,-48,-40,222,-77,-14,244,-95,-30,-32,-33,-22,-75,-73,-71,-69,-66,-67,-61,-62,-63,-64,-58,-59,-55,-56,-51,-52,-53,-29,-31,-41,-49,-79,]),'DOT':([54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,192,195,198,199,201,244,245,],[124,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-14,-30,-32,-33,-22,-29,-31,]),'ARROW':([54,62,63,71,72,73,74,75,76,77,78,79,80,120,121,192,195,198,199,201,244,245,],[125,-26,-13,-15,-16,-17,-18,-19,-20,-21,-23,-24,-25,-27,-28,-14,-30,-32,-33,-22,-29,-31,]),'ELSE':([171,172,173,174,175,176,228,232,238,239,240,257,266,267,269,276,278,283,284,289,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,273,-156,-158,-154,-157,-159,-155,]),'CASE':([171,172,173,174,175,176,228,232,238,239,240,257,266,267,268,269,274,276,278,279,280,283,284,286,289,291,292,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,-153,-164,-156,281,-158,-154,281,-140,-157,-159,-139,-155,-142,-141,]),'DEFAULT':([171,172,173,174,175,176,228,232,238,239,240,257,266,267,268,269,274,276,278,279,280,283,284,286,289,291,292,],[-134,-135,-136,-137,-138,-151,-143,-152,-160,-161,-162,-163,-144,-153,-164,-156,282,-158,-154,282,-140,-157,-159,-139,-155,-142,-141,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,16,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,102,167,229,251,],[5,5,170,170,170,170,]),'type_specifier':([0,2,28,41,60,94,100,102,131,133,167,229,251,],[6,6,43,96,137,96,43,177,137,137,177,177,177,]),'struct_specifier':([0,2,102,167,229,251,],[7,7,7,7,7,7,]),'declarator':([6,32,36,43,96,177,225,],[17,89,91,97,160,89,250,]),'init_declarator_list':([6,177,],[18,18,]),'pointer':([6,32,36,43,96,137,177,225,],[19,19,19,19,19,204,19,19,]),'no_pointer':([6,32,36,43,96,177,225,],[20,20,20,20,20,20,20,]),'init_declarator':([6,32,177,],[21,88,21,]),'auto_declarator_list':([8,],[24,]),'auto_declarator':([8,39,],[25,92,]),'func_scope':([17,],[28,]),'direct_declarator':([19,20,],[33,37,]),'add_sym_struct':([27,242,],[41,41,]),'parameter_type_list':([28,],[44,]),'func_rparen_2':([28,],[45,]),'parameter_declaration':([28,100,],[47,163,]),'assignment_expression':([29,40,60,102,105,117,123,127,131,133,167,182,186,202,229,233,234,235,237,246,251,256,261,263,264,265,271,273,277,288,290,],[49,93,136,136,189,190,197,136,136,136,136,136,136,248,136,136,136,136,136,259,136,136,136,136,136,136,136,136,136,136,136,]),'conditional_expression':([29,40,60,102,105,117,122,123,127,131,133,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[50,50,50,50,50,50,194,50,50,50,50,50,50,50,50,50,50,50,50,50,258,50,50,50,50,50,50,50,50,50,50,194,50,50,]),'unary_expression':([29,40,55,56,57,59,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,167,182,186,202,203,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[51,51,126,128,130,132,51,51,51,51,130,130,51,51,51,51,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,51,51,51,51,130,51,51,51,51,51,130,51,51,51,51,51,51,51,51,51,51,130,51,51,]),'logical_or_expression':([29,40,60,102,105,117,122,123,127,131,133,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'postfix_expression':([29,40,55,56,57,59,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,167,182,186,202,203,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([29,40,55,56,57,59,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,167,182,186,202,203,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'cast_expression':([29,40,57,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,167,182,186,202,203,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[58,58,129,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,219,220,221,58,58,58,58,249,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'logical_and_expression':([29,40,60,102,105,117,118,122,123,127,131,133,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[61,61,61,61,61,61,191,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'primary_expression':([29,40,55,56,57,59,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,167,182,186,202,203,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'inclusive_or_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[70,70,70,70,70,70,70,70,70,70,70,70,205,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'exclusive_or_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,139,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[81,81,81,81,81,81,81,81,81,81,81,81,81,206,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'and_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,139,140,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,207,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'equality_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,139,140,141,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,208,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'relational_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,209,210,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'shift_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,211,212,213,214,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'additive_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,215,216,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'multiplicative_expression':([29,40,60,102,105,117,118,122,123,127,131,133,138,139,140,141,142,143,144,145,146,147,148,149,150,151,167,182,186,202,229,233,234,235,237,243,246,251,256,261,263,264,265,271,273,277,281,288,290,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,217,218,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'struct_declaration_list':([41,],[94,]),'struct_declaration':([41,94,],[95,158,]),'func_rparen_1':([44,],[98,]),'function_body':([45,98,],[101,161,]),'assignment_operator':([51,],[105,]),'expression':([60,102,127,131,133,167,182,186,229,233,234,235,237,251,256,261,263,264,265,271,273,277,288,290,],[134,178,134,134,134,178,178,241,178,252,253,254,178,178,178,178,178,270,272,178,178,178,178,178,]),'type_name':([60,131,133,],[135,135,200,]),'pop_sym':([94,101,103,161,162,251,279,],[157,164,188,226,227,260,285,]),'struct_declarator_list':([96,],[159,]),'block_item_list':([102,229,],[167,251,]),'block_item':([102,167,229,251,],[168,231,168,231,]),'statement':([102,167,182,229,251,261,263,271,273,277,288,290,],[169,169,236,169,169,267,269,276,278,284,291,292,]),'compound_statement':([102,167,182,229,251,261,263,271,273,277,288,290,],[171,171,171,171,171,171,171,171,171,171,171,171,]),'expression_statement':([102,167,182,229,237,251,256,261,263,271,273,277,288,290,],[172,172,172,172,256,172,265,172,172,172,172,172,172,172,]),'selection_statement':([102,167,182,229,251,261,263,271,273,277,288,290,],[173,173,173,173,173,173,173,173,173,173,173,173,]),'iteration_statement':([102,167,182,229,251,261,263,271,273,277,288,290,],[174,174,174,174,174,174,174,174,174,174,174,174,]),'jump_statement':([102,167,182,229,251,261,263,271,273,277,288,290,],[175,175,175,175,175,175,175,175,175,175,175,175,]),'constant_expression':([122,281,],[193,287,]),'argument_expression_list':([123,],[196,]),'add_sym':([165,268,],[229,274,]),'labeled_statement_list':([274,],[279,]),'labeled_statement':([274,279,],[280,286,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',30),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',39),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',40),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',47),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',48),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list func_rparen_1 function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',62),
  ('function_definition -> type_specifier declarator func_scope func_rparen_2 function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',63),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN SEMI_COLON pop_sym','function_definition',7,'p_function_definition_1','cparser.py',93),
  ('function_definition -> type_specifier declarator func_scope R_PAREN SEMI_COLON pop_sym','function_definition',6,'p_function_definition_1','cparser.py',94),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',116),
  ('func_rparen_1 -> R_PAREN','func_rparen_1',1,'p_func_rparen_1','cparser.py',134),
  ('func_rparen_2 -> R_PAREN','func_rparen_2',1,'p_func_rparen_2','cparser.py',170),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',206),
  ('primary_expression -> COLON COLON IDENTIFIER','primary_expression',3,'p_primary_expression','cparser.py',207),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',208),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',209),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',210),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',211),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',212),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',213),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',214),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',215),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',216),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',217),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',218),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',273),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',274),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',275),
  ('postfix_expression -> postfix_expression L_SQBR constant_expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',345),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',429),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',430),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',514),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',564),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',607),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',608),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',628),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',635),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',636),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',644),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',652),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',653),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',665),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',666),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',667),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',668),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',669),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',670),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',677),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',678),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',699),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',700),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',701),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',713),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',723),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',724),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',725),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',737),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',738),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',739),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',752),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',753),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',754),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',755),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',756),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',769),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',770),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',771),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',783),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',784),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',798),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',799),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',814),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',815),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',829),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',830),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',843),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',844),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',859),
  ('conditional_expression -> logical_or_expression QUES_MARK assignment_expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',860),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',917),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',918),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',932),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',933),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',934),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',935),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',936),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',937),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',938),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',939),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',940),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',941),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',942),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',949),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',950),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',969),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',980),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',981),
  ('declaration -> AUTO auto_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',982),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',995),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',996),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',1004),
  ('init_declarator -> declarator ASSIGNMENT assignment_expression','init_declarator',3,'p_init_declarator','cparser.py',1005),
  ('auto_declarator_list -> auto_declarator','auto_declarator_list',1,'p_auto_declarator_list','cparser.py',1085),
  ('auto_declarator_list -> auto_declarator_list COMMA auto_declarator','auto_declarator_list',3,'p_auto_declarator_list','cparser.py',1086),
  ('auto_declarator -> IDENTIFIER ASSIGNMENT assignment_expression','auto_declarator',3,'p_auto_declarator','cparser.py',1093),
  ('auto_declarator -> IDENTIFIER','auto_declarator',1,'p_auto_declarator','cparser.py',1094),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',1136),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',1137),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',1138),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',1139),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',1140),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1141),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',1142),
  ('struct_specifier -> STRUCT IDENTIFIER add_sym_struct struct_declaration_list pop_sym R_BRACES','struct_specifier',6,'p_struct_specifier','cparser.py',1164),
  ('add_sym_struct -> L_BRACES','add_sym_struct',1,'p_add_sym_struct','cparser.py',1171),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',1179),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',1180),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',1191),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',1199),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',1200),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1244),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1245),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',1255),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',1256),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',1257),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',1292),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',1293),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',1320),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1338),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1339),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1349),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1365),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1366),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1379),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1380),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1381),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1382),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1383),
  ('labeled_statement_list -> labeled_statement_list labeled_statement','labeled_statement_list',2,'p_labeled_statement_list','cparser.py',1391),
  ('labeled_statement_list -> labeled_statement','labeled_statement_list',1,'p_labeled_statement_list','cparser.py',1392),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1401),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1402),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1435),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1436),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1449),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1450),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1464),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1465),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1472),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1473),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1485),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1486),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1496),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1497),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN L_BRACES add_sym labeled_statement_list pop_sym R_BRACES','selection_statement',9,'p_selection_statement','cparser.py',1498),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1578),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1579),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1580),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1581),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1672),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1673),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement_1','cparser.py',1682),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement_1','cparser.py',1683),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1729),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1740),
]
