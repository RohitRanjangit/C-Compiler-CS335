
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym\n                        | type_specifier declarator func_scope R_PAREN function_body pop_sym\n    \n    func_scope : L_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[9,9,-2,-4,-5,-3,-90,-91,9,-8,-92,-166,9,9,9,-167,9,9,9,9,-108,-167,-7,-166,-147,9,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,9,-148,-150,-154,-162,-163,-164,-110,9,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'CHAR':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[10,10,-2,-4,-5,-3,-90,-91,10,-8,-92,-166,10,10,10,-167,10,10,10,10,-108,-167,-7,-166,-147,10,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,10,-148,-150,-154,-162,-163,-164,-110,10,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'SHORT':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[11,11,-2,-4,-5,-3,-90,-91,11,-8,-92,-166,11,11,11,-167,11,11,11,11,-108,-167,-7,-166,-147,11,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,11,-148,-150,-154,-162,-163,-164,-110,11,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'INT':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[12,12,-2,-4,-5,-3,-90,-91,12,-8,-92,-166,12,12,12,-167,12,12,12,12,-108,-167,-7,-166,-147,12,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,12,-148,-150,-154,-162,-163,-164,-110,12,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'LONG':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[13,13,-2,-4,-5,-3,-90,-91,13,-8,-92,-166,13,13,13,-167,13,13,13,13,-108,-167,-7,-166,-147,13,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,13,-148,-150,-154,-162,-163,-164,-110,13,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'FLOAT':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[14,14,-2,-4,-5,-3,-90,-91,14,-8,-92,-166,14,14,14,-167,14,14,14,14,-108,-167,-7,-166,-147,14,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,14,-148,-150,-154,-162,-163,-164,-110,14,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'DOUBLE':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[15,15,-2,-4,-5,-3,-90,-91,15,-8,-92,-166,15,15,15,-167,15,15,15,15,-108,-167,-7,-166,-147,15,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,15,-148,-150,-154,-162,-163,-164,-110,15,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'STRUCT':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[16,16,-2,-4,-5,-3,-90,-91,46,-8,-92,-166,46,46,46,-167,190,46,46,46,-108,-167,-7,-166,-147,190,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,190,-148,-150,-154,-162,-163,-164,-110,190,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'ENUM':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[17,17,-2,-4,-5,-3,-90,-91,47,-8,-92,-166,47,47,47,-167,191,47,47,47,-108,-167,-7,-166,-147,191,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,191,-148,-150,-154,-162,-163,-164,-110,191,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'BOOL':([0,2,3,4,5,19,26,27,30,32,33,40,60,91,97,98,99,129,131,156,157,162,164,165,166,167,168,169,170,171,172,173,174,175,176,177,227,233,234,235,236,237,240,246,247,248,262,264,266,272,277,283,284,285,286,292,294,295,296,],[18,18,-2,-4,-5,-3,-90,-91,18,-8,-92,-166,18,18,18,-167,18,18,18,18,-108,-167,-7,-166,-147,18,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-109,-6,-145,18,-148,-150,-154,-162,-163,-164,-110,18,-144,-165,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'$end':([1,2,3,4,5,19,26,27,33,98,162,164,166,233,236,],[0,-1,-2,-4,-5,-3,-90,-91,-92,-167,-167,-7,-147,-6,-148,]),'MULTIPLY':([6,9,10,11,12,13,14,15,18,22,25,26,27,28,29,31,33,34,36,38,42,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,86,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,130,131,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,158,159,165,167,168,169,170,171,172,173,174,175,176,177,178,179,185,189,193,198,201,202,204,205,206,207,220,221,222,223,224,234,235,237,239,240,241,242,243,245,246,247,248,250,251,254,255,256,257,258,260,263,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[25,-97,-98,-99,-100,-101,-102,-103,-106,36,-124,-90,-91,-104,-105,65,-92,25,-125,25,25,65,-42,-30,65,65,65,-44,65,65,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,150,65,-104,-105,65,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,65,65,65,65,-26,-27,-31,65,-32,-33,-42,65,-34,65,25,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,25,65,-166,65,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,25,65,65,65,65,-22,-24,-25,-17,65,65,36,150,150,-45,-46,-47,-145,65,-150,65,-154,65,65,65,65,-162,-163,-164,-104,-105,65,-21,-23,65,-35,-43,25,65,65,-144,65,-165,-143,65,65,65,65,65,-146,-155,-157,-158,65,65,-160,65,-156,-159,-161,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,18,22,23,25,26,27,28,29,31,33,34,36,38,41,42,46,47,50,55,56,57,59,60,64,65,66,67,68,69,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,158,159,161,165,167,168,169,170,171,172,173,174,175,176,177,178,179,185,189,190,191,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,250,251,254,257,263,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-126,-97,-98,-99,-100,-101,-102,-103,28,29,-106,37,37,-124,-90,-91,-104,-105,63,-92,-126,-125,-126,92,-126,100,101,63,63,63,63,63,63,-36,-37,-38,-39,-40,-41,63,-104,-105,63,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,63,63,63,63,201,202,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-126,63,92,-166,63,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-126,63,63,63,250,251,63,63,63,-145,63,-150,63,-154,63,63,63,63,-162,-163,-164,-104,-105,63,63,-126,63,63,-144,63,-165,-143,63,63,63,63,63,-146,-155,-157,-158,63,63,-160,63,-156,-159,-161,]),'L_PAREN':([6,9,10,11,12,13,14,15,18,20,22,23,25,26,27,28,29,31,33,34,35,36,37,38,39,42,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,154,155,158,159,165,167,168,169,170,171,172,173,174,175,176,177,178,179,182,183,184,185,186,189,193,198,201,202,204,205,206,225,234,235,237,239,240,241,242,243,245,246,247,248,250,251,254,255,256,257,263,264,265,266,270,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-126,-97,-98,-99,-100,-101,-102,-103,-106,32,38,38,-124,-90,-91,-104,-105,60,-92,-126,-118,-125,-120,-126,-119,-126,60,119,125,125,129,131,60,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,60,-104,-105,60,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,60,129,60,60,-26,-27,60,60,60,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,-123,-121,-126,129,-166,60,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-126,129,241,242,243,60,245,60,60,-22,-24,-25,-17,60,129,-122,-145,60,-150,60,-154,60,60,60,60,-162,-163,-164,-104,-105,129,-21,-23,60,-126,60,60,-144,281,60,-165,-143,60,60,60,60,60,-146,-155,-157,-158,60,60,-160,60,-156,-159,-161,]),'SEMI_COLON':([7,8,20,21,24,26,27,33,35,37,39,48,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,99,122,123,124,126,127,128,130,134,154,155,160,165,167,168,169,170,171,172,173,174,175,176,177,181,185,187,188,189,192,194,196,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,234,235,237,239,240,245,246,247,248,249,252,255,256,258,259,260,261,264,265,266,271,272,273,275,277,278,279,280,283,284,285,286,288,290,291,292,293,294,295,296,],[26,27,-95,33,-93,-90,-91,-92,-118,-120,-119,-96,-132,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-94,-95,177,-26,-27,-31,-32,-33,-42,-34,-87,-123,-121,-113,-166,177,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,240,177,246,247,248,-133,-75,-71,-22,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-122,262,-111,-145,177,-150,177,-154,177,-162,-163,-164,272,-134,-21,-23,-35,-88,-43,-107,177,177,-144,177,-165,-73,-112,-143,177,177,177,-146,-155,-157,-158,177,177,295,-160,177,-156,-159,-161,]),'R_PAREN':([9,10,11,12,13,14,15,18,25,30,32,35,36,37,39,43,45,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,90,95,100,101,119,122,123,124,126,127,128,130,132,133,134,135,154,155,163,177,194,196,198,199,200,201,202,203,204,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,240,255,256,258,259,260,267,268,269,273,274,282,287,289,],[-97,-98,-99,-100,-101,-102,-103,-106,-124,44,-8,-118,-125,-120,-119,96,-127,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,155,-129,-104,-105,198,-26,-27,-31,-32,-33,-42,-34,204,206,-87,-130,-123,-121,-128,-153,-75,-71,-22,256,-28,-24,-25,258,-17,-131,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-122,-154,-21,-23,-35,-88,-43,278,279,280,-73,-29,288,291,293,]),'COMMA':([20,21,24,35,37,39,43,45,48,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,92,93,94,95,102,103,122,123,124,126,127,128,130,132,134,154,155,163,181,192,194,195,196,197,198,199,200,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,228,229,230,231,232,249,252,253,255,256,258,259,260,267,268,269,273,274,275,287,289,],[-95,34,-93,-118,-120,-119,97,-127,-96,-132,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-94,-95,-116,161,-114,-129,193,-135,-26,-27,-31,-32,-33,-42,-34,205,-87,-123,-121,-128,205,-133,-75,205,-71,205,-22,257,-28,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-122,263,-111,-117,-89,-115,205,-134,-136,-21,-23,-35,-88,-43,205,205,205,-73,-29,-112,205,205,]),'ASSIGNMENT':([20,35,37,39,52,54,62,63,71,72,73,74,75,76,77,78,79,88,92,122,123,124,126,127,128,130,154,155,198,201,202,204,225,255,256,258,260,],[31,-118,-120,-119,105,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,31,159,-26,-27,-31,-32,-33,-42,-34,-123,-121,-22,-24,-25,-17,-122,-21,-23,-35,-43,]),'R_BRACES':([26,27,33,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,92,93,94,99,102,103,122,123,124,126,127,128,130,156,157,165,167,168,169,170,171,172,173,174,175,176,177,192,193,194,196,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,226,227,230,231,232,234,237,240,246,247,248,252,253,255,256,258,260,262,264,266,272,273,276,277,283,284,285,286,292,294,295,296,],[-90,-91,-92,-132,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-116,160,-114,166,192,-135,-26,-27,-31,-32,-33,-42,-34,-167,-108,234,236,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,-133,252,-75,-71,-22,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,261,-109,-117,-89,-115,-145,-150,-154,-162,-163,-164,-134,-136,-21,-23,-35,-43,-110,-167,-144,-165,-73,283,-143,-146,-155,-157,-158,-160,-156,-159,-161,]),'CASE':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,179,-166,179,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,179,-145,179,-150,179,-154,-162,-163,-164,179,179,-144,-165,-143,179,179,179,-146,-155,-157,-158,179,179,-160,179,-156,-159,-161,]),'DEFAULT':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,180,-166,180,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,180,-145,180,-150,180,-154,-162,-163,-164,180,180,-144,-165,-143,180,180,180,-146,-155,-157,-158,180,180,-160,180,-156,-159,-161,]),'L_BRACES':([26,27,28,29,31,33,44,50,96,99,165,167,168,169,170,171,172,173,174,175,176,177,185,193,234,235,237,239,240,246,247,248,250,251,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,40,41,50,-92,99,50,99,165,-166,165,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,165,50,-145,165,-150,165,-154,-162,-163,-164,40,41,165,165,-144,-165,-143,165,165,165,-146,-155,-157,-158,165,165,-160,165,-156,-159,-161,]),'IF':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,182,-166,182,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,182,-145,182,-150,182,-154,-162,-163,-164,182,182,-144,-165,-143,182,182,182,-146,-155,-157,-158,182,182,-160,182,-156,-159,-161,]),'SWITCH':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,183,-166,183,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,183,-145,183,-150,183,-154,-162,-163,-164,183,183,-144,-165,-143,183,183,183,-146,-155,-157,-158,183,183,-160,183,-156,-159,-161,]),'WHILE':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,244,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,184,-166,184,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,184,-145,184,-150,184,-154,270,-162,-163,-164,184,184,-144,-165,-143,184,184,184,-146,-155,-157,-158,184,184,-160,184,-156,-159,-161,]),'DO':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,185,-166,185,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,185,-145,185,-150,185,-154,-162,-163,-164,185,185,-144,-165,-143,185,185,185,-146,-155,-157,-158,185,185,-160,185,-156,-159,-161,]),'FOR':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,186,-166,186,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,186,-145,186,-150,186,-154,-162,-163,-164,186,186,-144,-165,-143,186,186,186,-146,-155,-157,-158,186,186,-160,186,-156,-159,-161,]),'CONTINUE':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,187,-166,187,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,187,-145,187,-150,187,-154,-162,-163,-164,187,187,-144,-165,-143,187,187,187,-146,-155,-157,-158,187,187,-160,187,-156,-159,-161,]),'BREAK':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,188,-166,188,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,188,-145,188,-150,188,-154,-162,-163,-164,188,188,-144,-165,-143,188,188,188,-146,-155,-157,-158,188,188,-160,188,-156,-159,-161,]),'RETURN':([26,27,33,99,165,167,168,169,170,171,172,173,174,175,176,177,185,234,235,237,239,240,246,247,248,264,265,266,272,277,278,279,280,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,-92,189,-166,189,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,189,-145,189,-150,189,-154,-162,-163,-164,189,189,-144,-165,-143,189,189,189,-146,-155,-157,-158,189,189,-160,189,-156,-159,-161,]),'INCREMENT':([26,27,31,33,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,198,201,202,204,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,255,256,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,55,-92,55,122,55,55,55,55,55,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,55,55,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,55,55,55,55,-26,-27,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-166,55,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,55,55,55,55,-22,-24,-25,-17,55,55,-145,55,-150,55,-154,55,55,55,55,-162,-163,-164,55,-21,-23,55,55,55,-144,55,-165,-143,55,55,55,55,55,-146,-155,-157,-158,55,55,-160,55,-156,-159,-161,]),'DECREMENT':([26,27,31,33,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,198,201,202,204,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,255,256,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,56,-92,56,123,56,56,56,56,56,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,56,56,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,56,56,56,56,-26,-27,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-166,56,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,56,56,56,56,-22,-24,-25,-17,56,56,-145,56,-150,56,-154,56,56,56,56,-162,-163,-164,56,-21,-23,56,56,56,-144,56,-165,-143,56,56,56,56,56,-146,-155,-157,-158,56,56,-160,56,-156,-159,-161,]),'SIZEOF':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,59,-92,59,59,59,59,59,59,-36,-37,-38,-39,-40,-41,59,59,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-166,59,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,59,59,59,59,59,59,-145,59,-150,59,-154,59,59,59,59,-162,-163,-164,59,59,59,59,-144,59,-165,-143,59,59,59,59,59,-146,-155,-157,-158,59,59,-160,59,-156,-159,-161,]),'BITWISE_AND':([26,27,31,33,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,81,82,83,84,85,86,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,198,201,202,204,205,206,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,234,235,237,239,240,241,242,243,245,246,247,248,254,255,256,257,258,260,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,64,-92,64,-42,-30,64,64,64,-44,64,64,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,139,-62,-59,-54,-51,-48,64,64,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,64,64,64,64,-26,-27,-31,64,-32,-33,-42,64,-34,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-166,64,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,64,64,64,64,-22,-24,-25,-17,64,64,139,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-145,64,-150,64,-154,64,64,64,64,-162,-163,-164,64,-21,-23,64,-35,-43,64,64,-144,64,-165,-143,64,64,64,64,64,-146,-155,-157,-158,64,64,-160,64,-156,-159,-161,]),'ADD':([26,27,31,33,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,85,86,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,198,201,202,204,205,206,218,219,220,221,222,223,224,234,235,237,239,240,241,242,243,245,246,247,248,254,255,256,257,258,260,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,66,-92,66,-42,-30,66,66,66,-44,66,66,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,148,-48,66,66,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,66,66,66,66,-26,-27,-31,66,-32,-33,-42,66,-34,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-166,66,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,66,66,66,66,-22,-24,-25,-17,66,66,148,148,-49,-50,-45,-46,-47,-145,66,-150,66,-154,66,66,66,66,-162,-163,-164,66,-21,-23,66,-35,-43,66,66,-144,66,-165,-143,66,66,66,66,66,-146,-155,-157,-158,66,66,-160,66,-156,-159,-161,]),'SUBSTRACT':([26,27,31,33,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,85,86,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,122,123,124,125,126,127,128,129,130,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,198,201,202,204,205,206,218,219,220,221,222,223,224,234,235,237,239,240,241,242,243,245,246,247,248,254,255,256,257,258,260,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,67,-92,67,-42,-30,67,67,67,-44,67,67,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,149,-48,67,67,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,67,67,67,67,-26,-27,-31,67,-32,-33,-42,67,-34,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-166,67,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,67,67,67,67,-22,-24,-25,-17,67,67,149,149,-49,-50,-45,-46,-47,-145,67,-150,67,-154,67,67,67,67,-162,-163,-164,67,-21,-23,67,-35,-43,67,67,-144,67,-165,-143,67,67,67,67,67,-146,-155,-157,-158,67,67,-160,67,-156,-159,-161,]),'BITWISE_ONE_COMPLEMENT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,68,-92,68,68,68,68,68,68,-36,-37,-38,-39,-40,-41,68,68,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-166,68,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,68,68,68,68,68,68,-145,68,-150,68,-154,68,68,68,68,-162,-163,-164,68,68,68,68,-144,68,-165,-143,68,68,68,68,68,-146,-155,-157,-158,68,68,-160,68,-156,-159,-161,]),'LOGICAL_NOT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,69,-92,69,69,69,69,69,69,-36,-37,-38,-39,-40,-41,69,69,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-166,69,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,69,69,69,69,69,69,-145,69,-150,69,-154,69,69,69,69,-162,-163,-164,69,69,69,69,-144,69,-165,-143,69,69,69,69,69,-146,-155,-157,-158,69,69,-160,69,-156,-159,-161,]),'INT_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,89,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,71,-92,71,71,71,71,71,71,-36,-37,-38,-39,-40,-41,153,71,71,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-166,71,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,71,71,71,71,71,71,-145,71,-150,71,-154,71,71,71,71,-162,-163,-164,71,71,71,71,-144,71,-165,-143,71,71,71,71,71,-146,-155,-157,-158,71,71,-160,71,-156,-159,-161,]),'HEX_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,72,-92,72,72,72,72,72,72,-36,-37,-38,-39,-40,-41,72,72,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-166,72,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,72,72,72,72,72,72,-145,72,-150,72,-154,72,72,72,72,-162,-163,-164,72,72,72,72,-144,72,-165,-143,72,72,72,72,72,-146,-155,-157,-158,72,72,-160,72,-156,-159,-161,]),'OCTAL_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,73,-92,73,73,73,73,73,73,-36,-37,-38,-39,-40,-41,73,73,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-166,73,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,73,73,73,73,73,73,-145,73,-150,73,-154,73,73,73,73,-162,-163,-164,73,73,73,73,-144,73,-165,-143,73,73,73,73,73,-146,-155,-157,-158,73,73,-160,73,-156,-159,-161,]),'EXPONENT_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,74,-92,74,74,74,74,74,74,-36,-37,-38,-39,-40,-41,74,74,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-166,74,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,74,74,74,74,74,74,-145,74,-150,74,-154,74,74,74,74,-162,-163,-164,74,74,74,74,-144,74,-165,-143,74,74,74,74,74,-146,-155,-157,-158,74,74,-160,74,-156,-159,-161,]),'REAL_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,75,-92,75,75,75,75,75,75,-36,-37,-38,-39,-40,-41,75,75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-166,75,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,75,75,75,75,75,75,-145,75,-150,75,-154,75,75,75,75,-162,-163,-164,75,75,75,75,-144,75,-165,-143,75,75,75,75,75,-146,-155,-157,-158,75,75,-160,75,-156,-159,-161,]),'CHAR_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,76,-92,76,76,76,76,76,76,-36,-37,-38,-39,-40,-41,76,76,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-166,76,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,76,76,76,76,76,76,-145,76,-150,76,-154,76,76,76,76,-162,-163,-164,76,76,76,76,-144,76,-165,-143,76,76,76,76,76,-146,-155,-157,-158,76,76,-160,76,-156,-159,-161,]),'STR_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,77,-92,77,77,77,77,77,77,-36,-37,-38,-39,-40,-41,77,77,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-166,77,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,77,77,77,77,77,77,-145,77,-150,77,-154,77,77,77,77,-162,-163,-164,77,77,77,77,-144,77,-165,-143,77,77,77,77,77,-146,-155,-157,-158,77,77,-160,77,-156,-159,-161,]),'TRUE':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,78,-92,78,78,78,78,78,78,-36,-37,-38,-39,-40,-41,78,78,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-166,78,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,78,78,78,78,78,78,-145,78,-150,78,-154,78,78,78,78,-162,-163,-164,78,78,78,78,-144,78,-165,-143,78,78,78,78,78,-146,-155,-157,-158,78,78,-160,78,-156,-159,-161,]),'FALSE':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,99,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,165,167,168,169,170,171,172,173,174,175,176,177,179,185,189,193,205,206,234,235,237,239,240,241,242,243,245,246,247,248,254,257,264,265,266,271,272,277,278,279,280,281,282,283,284,285,286,288,290,292,293,294,295,296,],[-90,-91,79,-92,79,79,79,79,79,79,-36,-37,-38,-39,-40,-41,79,79,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-166,79,-149,-151,-152,-137,-138,-139,-140,-141,-142,-153,79,79,79,79,79,79,-145,79,-150,79,-154,79,79,79,79,-162,-163,-164,79,79,79,79,-144,79,-165,-143,79,79,79,79,79,-146,-155,-157,-158,79,79,-160,79,-156,-159,-161,]),'L_SQBR':([35,37,39,54,62,63,71,72,73,74,75,76,77,78,79,122,123,154,155,198,201,202,204,225,255,256,],[89,-120,89,118,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-123,-121,-22,-24,-25,-17,-122,-21,-23,]),'COLON':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,122,123,124,126,127,128,130,134,180,194,195,196,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,231,238,255,256,258,259,260,273,],[-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-87,239,-75,254,-71,-22,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-89,265,-21,-23,-35,-88,-43,-73,]),'R_SQBR':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,89,122,123,124,126,127,128,130,134,153,194,196,197,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,259,260,273,],[-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,154,-26,-27,-31,-32,-33,-42,-34,-87,225,-75,-71,255,-22,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-88,-43,-73,]),'DIVIDE':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,86,122,123,124,126,127,128,130,198,201,202,204,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,151,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,151,151,-45,-46,-47,-21,-23,-35,-43,]),'MODULUS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,86,122,123,124,126,127,128,130,198,201,202,204,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,152,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,152,152,-45,-46,-47,-21,-23,-35,-43,]),'LEFT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,84,85,86,122,123,124,126,127,128,130,198,201,202,204,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,146,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,146,146,146,146,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'RIGHT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,84,85,86,122,123,124,126,127,128,130,198,201,202,204,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,147,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,147,147,147,147,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'LESS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,142,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,142,142,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'GREATER':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,143,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,143,143,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'LESS_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,144,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,144,144,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'GREATER_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,145,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,145,145,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,82,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,140,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,140,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'NOT_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,82,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,141,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,141,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'BITWISE_XOR':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,138,-64,-62,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,138,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'BITWISE_OR':([52,54,58,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,122,123,124,126,127,128,130,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,-20,-9,137,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,137,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'LOGICAL_AND':([52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,122,123,124,126,127,128,130,196,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,-30,-44,136,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,136,-22,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'QUES_MARK':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,122,123,124,126,127,128,130,196,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,116,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-71,-22,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'LOGICAL_OR':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,122,123,124,126,127,128,130,196,198,201,202,204,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,255,256,258,260,],[-42,117,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-26,-27,-31,-32,-33,-42,-34,-71,-22,-24,-25,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-21,-23,-35,-43,]),'MULTIPLY_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[106,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'DIVIDE_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[107,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'MODULUS_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[108,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'ADD_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[109,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'SUBSTRACT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[110,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'LEFT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[111,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'RIGHT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[112,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'BITWISE_AND_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[113,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'BITWISE_XOR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[114,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'BITWISE_OR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,122,123,124,126,127,128,130,198,201,202,204,255,256,258,260,],[115,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-31,-32,-33,-42,-34,-22,-24,-25,-17,-21,-23,-35,-43,]),'DOT':([54,62,63,71,72,73,74,75,76,77,78,79,122,123,198,201,202,204,255,256,],[120,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-22,-24,-25,-17,-21,-23,]),'ARROW':([54,62,63,71,72,73,74,75,76,77,78,79,122,123,198,201,202,204,255,256,],[121,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-26,-27,-22,-24,-25,-17,-21,-23,]),'ELSE':([171,172,173,174,175,176,177,234,240,246,247,248,266,272,277,283,284,285,286,292,294,295,296,],[-137,-138,-139,-140,-141,-142,-153,-145,-154,-162,-163,-164,-144,-165,-143,-146,290,-157,-158,-160,-156,-159,-161,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,19,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,99,167,235,264,],[5,5,170,170,170,170,]),'type_specifier':([0,2,30,60,91,97,99,129,131,156,167,235,264,],[6,6,42,135,158,42,178,135,135,158,178,178,178,]),'struct_specifier':([0,2,99,167,235,264,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,99,167,235,264,],[8,8,8,8,8,8,]),'declarator':([6,34,38,42,158,178,263,],[20,88,90,95,229,88,275,]),'init_declarator_list':([6,178,],[21,21,]),'pointer':([6,34,38,42,135,158,178,263,],[22,22,22,22,207,22,22,22,]),'no_pointer':([6,34,38,42,158,178,263,],[23,23,23,23,23,23,23,]),'init_declarator':([6,34,178,],[24,87,24,]),'func_scope':([20,],[30,]),'direct_declarator':([22,23,],[35,39,]),'parameter_type_list':([30,],[43,]),'parameter_declaration':([30,97,],[45,163,]),'initializer':([31,50,193,],[48,103,253,]),'assignment_expression':([31,50,60,99,104,116,118,119,125,129,131,167,185,189,193,205,235,239,241,242,243,245,257,264,265,271,278,279,280,281,282,288,290,293,],[49,49,134,134,194,134,134,200,134,134,134,134,134,134,49,259,134,134,134,134,134,134,274,134,134,134,134,134,134,134,134,134,134,134,]),'conditional_expression':([31,50,60,99,104,116,118,119,125,129,131,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[51,51,51,51,51,51,51,51,51,51,51,231,51,231,51,51,51,51,51,51,51,51,51,51,273,51,51,51,51,51,51,51,51,51,51,51,51,]),'unary_expression':([31,50,55,56,57,59,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,167,179,185,189,193,205,206,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[52,52,124,126,128,130,52,52,52,52,128,52,52,52,52,52,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,52,128,52,52,52,52,128,52,52,52,52,52,52,128,52,52,52,52,52,52,52,52,52,52,52,52,]),'logical_or_expression':([31,50,60,99,104,116,118,119,125,129,131,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'postfix_expression':([31,50,55,56,57,59,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,167,179,185,189,193,205,206,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([31,50,55,56,57,59,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,167,179,185,189,193,205,206,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'cast_expression':([31,50,57,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,167,179,185,189,193,205,206,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[58,58,127,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,222,223,224,58,58,58,58,58,58,58,260,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'logical_and_expression':([31,50,60,99,104,116,117,118,119,125,129,131,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[61,61,61,61,61,61,196,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'primary_expression':([31,50,55,56,57,59,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,159,167,179,185,189,193,205,206,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'inclusive_or_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[70,70,70,70,70,70,70,70,70,70,70,70,208,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'exclusive_or_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,137,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[80,80,80,80,80,80,80,80,80,80,80,80,80,209,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'and_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,137,138,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,210,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'equality_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,137,138,139,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,211,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'relational_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,212,213,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'shift_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,214,215,216,217,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'additive_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,218,219,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'multiplicative_expression':([31,50,60,99,104,116,117,118,119,125,129,131,136,137,138,139,140,141,142,143,144,145,146,147,148,149,159,167,179,185,189,193,205,235,239,241,242,243,245,254,257,264,265,271,278,279,280,281,282,288,290,293,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,220,221,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'add_sym':([40,165,],[91,235,]),'enumerator_list':([41,],[93,]),'enumerator':([41,161,],[94,232,]),'function_body':([44,96,],[98,162,]),'initializer_list':([50,],[102,]),'assignment_operator':([52,],[104,]),'expression':([60,99,116,118,125,129,131,167,185,189,235,239,241,242,243,245,264,265,271,278,279,280,281,282,288,290,293,],[132,181,195,197,132,132,132,181,181,249,181,181,267,268,269,181,181,181,181,181,181,181,287,289,181,181,181,]),'type_name':([60,129,131,],[133,133,203,]),'struct_declaration_list':([91,],[156,]),'struct_declaration':([91,156,],[157,227,]),'pop_sym':([98,156,162,264,],[164,226,233,276,]),'block_item_list':([99,235,],[167,264,]),'block_item':([99,167,235,264,],[168,237,168,237,]),'statement':([99,167,185,235,239,264,265,278,279,280,288,290,293,],[169,169,244,169,266,169,277,284,285,286,292,294,296,]),'labeled_statement':([99,167,185,235,239,264,265,278,279,280,288,290,293,],[171,171,171,171,171,171,171,171,171,171,171,171,171,]),'compound_statement':([99,167,185,235,239,264,265,278,279,280,288,290,293,],[172,172,172,172,172,172,172,172,172,172,172,172,172,]),'expression_statement':([99,167,185,235,239,245,264,265,271,278,279,280,288,290,293,],[173,173,173,173,173,271,173,173,282,173,173,173,173,173,173,]),'selection_statement':([99,167,185,235,239,264,265,278,279,280,288,290,293,],[174,174,174,174,174,174,174,174,174,174,174,174,174,]),'iteration_statement':([99,167,185,235,239,264,265,278,279,280,288,290,293,],[175,175,175,175,175,175,175,175,175,175,175,175,175,]),'jump_statement':([99,167,185,235,239,264,265,278,279,280,288,290,293,],[176,176,176,176,176,176,176,176,176,176,176,176,176,]),'argument_expression_list':([119,],[199,]),'struct_declarator_list':([158,],[228,]),'constant_expression':([159,179,],[230,238,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',26),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',32),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',33),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',40),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',41),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',48),
  ('function_definition -> type_specifier declarator func_scope R_PAREN function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',49),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',74),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',82),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',83),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',84),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',85),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',86),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',87),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',88),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',89),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',90),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',91),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',92),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',123),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',124),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',125),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',126),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',127),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',128),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',129),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',130),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',148),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',149),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',161),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',162),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',163),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',164),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',165),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',166),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',176),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',177),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',178),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',179),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',180),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',181),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',188),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',189),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',200),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',201),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',202),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',203),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',214),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',215),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',216),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',226),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',227),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',228),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',239),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',240),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',241),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',242),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',243),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',254),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',255),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',256),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',267),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',268),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',279),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',280),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',291),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',292),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',303),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',304),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',315),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',316),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',327),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',328),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',339),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',340),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',351),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',352),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',353),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',354),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',355),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',356),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',357),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',358),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',359),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',360),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',361),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',368),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',369),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',383),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',391),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',392),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',393),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',405),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',406),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',414),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',415),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',431),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',432),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',433),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',434),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',435),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',436),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',437),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',438),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',439),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',440),
  ('struct_specifier -> STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES','struct_specifier',7,'p_struct_specifier','cparser.py',453),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',464),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',465),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',475),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',483),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',484),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',505),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',512),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',513),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',520),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',521),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',529),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',530),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',546),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',547),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',548),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',549),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',571),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',572),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',595),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',609),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',610),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',620),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',634),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',635),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',647),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',648),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',649),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',659),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',660),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',667),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',668),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',669),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',670),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',671),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',672),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',679),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',680),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',692),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',693),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',703),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',704),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',714),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',715),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',722),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',723),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',730),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',731),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',741),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',742),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',743),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',754),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',755),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',756),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',757),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',773),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',774),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',775),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',776),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',787),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',793),
]
