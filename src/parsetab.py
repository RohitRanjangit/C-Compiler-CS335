
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : declaration_specifiers declarator compound_statement\n    \n    primary_expression : IDENTIFIER\n                       | NULL\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | declaration_specifiers init_declarator_list SEMI_COLON\n    \n    declaration_specifiers : type_specifier\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER L_BRACES struct_declaration_list R_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI_COLON\n    \n    specifier_qualifier_list : type_specifier\n                             \n    \n    struct_declarator_list : struct_declarator\n\t                       | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR assignment_expression R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n                      | direct_declarator L_PAREN parameter_type_list R_PAREN\n                      | direct_declarator L_PAREN R_PAREN\n    \n    pointer : MULTIPLY\n            | MULTIPLY pointer\n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n    \n    type_name : specifier_qualifier_list\n\t          | pointer specifier_qualifier_list\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n                      | CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES marker_1 block_item_list marker_2 R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n                        | FOR L_PAREN declaration expression_statement R_PAREN statement\n                        | FOR L_PAREN declaration expression_statement expression R_PAREN statement\n    \n    jump_statement : GOTO IDENTIFIER SEMI_COLON\n\t               | CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    \n        marker_1 :\n    \n        marker_2 :\n    '
    
_lr_action_items = {'STRUCT':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[10,10,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,95,-129,95,95,-149,10,95,-108,95,95,95,-128,10,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,95,-109,-152,-156,10,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'ENUM':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[11,11,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,96,-129,96,96,-149,11,96,-108,96,96,96,-128,11,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,96,-109,-152,-156,11,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'VOID':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[12,12,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,12,-129,12,12,-149,12,12,-108,12,12,12,-128,12,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,12,-109,-152,-156,12,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'CHAR':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[13,13,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,13,-129,13,13,-149,13,13,-108,13,13,13,-128,13,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,13,-109,-152,-156,13,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'SHORT':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[14,14,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,14,-129,14,14,-149,14,14,-108,14,14,14,-128,14,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,14,-109,-152,-156,14,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'INT':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[15,15,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,15,-129,15,15,-149,15,15,-108,15,15,15,-128,15,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,15,-109,-152,-156,15,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'LONG':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[16,16,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,16,-129,16,16,-149,16,16,-108,16,16,16,-128,16,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,16,-109,-152,-156,16,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'FLOAT':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[17,17,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,17,-129,17,17,-149,17,17,-108,17,17,17,-128,17,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,17,-109,-152,-156,17,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'DOUBLE':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[18,18,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,18,-129,18,18,-149,18,18,-108,18,18,18,-128,18,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,18,-109,-152,-156,18,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'BOOL':([0,2,3,4,5,20,26,29,30,33,35,36,40,41,43,57,85,86,98,99,132,134,139,140,158,159,160,161,162,163,164,165,166,167,168,185,190,231,236,241,243,244,245,248,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[19,19,-2,-4,-5,-3,-128,-89,-90,-6,-171,-91,19,-129,19,19,-149,19,19,-108,19,19,19,-128,19,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,19,-109,-152,-156,19,-167,-168,-169,-110,-150,-146,-148,-166,-170,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'$end':([1,2,3,4,5,20,29,30,33,36,85,261,],[0,-1,-2,-4,-5,-3,-89,-90,-6,-91,-149,-150,]),'MULTIPLY':([6,9,12,13,14,15,16,17,18,19,26,28,29,30,31,32,34,35,36,37,39,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,84,85,86,94,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,177,182,187,188,194,198,203,206,207,209,210,211,225,226,227,228,229,231,232,235,236,237,238,239,241,243,244,245,249,254,255,256,257,258,260,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[26,-92,-97,-98,-99,-100,-101,-102,-103,-106,26,26,-89,-90,-104,-105,62,-171,-91,26,62,62,-41,-29,62,62,62,-43,62,140,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,155,-149,62,26,26,-111,62,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,62,62,62,62,-25,-26,-30,62,-31,-32,-41,140,-33,140,26,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,26,-7,62,62,62,-104,-105,62,62,-21,-23,-24,-16,62,62,155,155,-44,-45,-46,-152,62,62,-156,62,62,62,62,-167,-168,-169,26,62,-20,-22,62,-34,-42,-150,-146,62,-148,62,62,-166,-170,-147,62,62,62,62,62,62,-157,-159,-160,62,62,62,-162,62,-164,62,-158,-161,-163,-165,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,18,19,23,26,28,29,30,31,32,34,35,36,37,39,41,44,47,52,53,54,56,57,61,62,63,64,65,66,85,86,94,95,96,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,171,177,179,182,187,188,194,196,198,210,211,231,232,235,236,237,238,239,241,243,244,245,249,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[27,-92,31,32,-97,-98,-99,-100,-101,-102,-103,-106,27,-128,27,-89,-90,-104,-105,60,-171,-91,27,60,-129,102,60,60,60,60,60,60,-35,-36,-37,-38,-39,-40,-149,170,27,187,188,27,-111,60,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,60,60,60,60,206,207,60,60,60,-36,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,170,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,27,60,170,242,60,-104,-105,60,102,60,60,60,-152,170,170,-156,60,60,60,60,-167,-168,-169,27,60,60,-150,-146,170,-148,60,60,-166,-170,-147,170,170,170,60,60,60,-157,-159,-160,170,170,170,-162,170,-164,170,-158,-161,-163,-165,]),'L_PAREN':([6,9,12,13,14,15,16,17,18,19,23,24,26,27,28,29,30,31,32,34,35,36,37,38,39,41,47,51,52,53,54,56,57,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,85,86,90,92,94,97,100,101,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,174,175,176,177,178,182,183,184,187,188,194,198,203,206,207,209,210,211,231,232,235,236,237,238,239,241,243,244,245,249,254,255,256,257,261,262,263,264,268,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[28,-92,-97,-98,-99,-100,-101,-102,-103,-106,28,40,-128,-122,28,-89,-90,-104,-105,57,-171,-91,28,40,57,-129,57,122,128,128,132,134,57,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-149,57,-125,-127,28,-123,28,-111,57,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,57,132,57,57,-25,-26,57,57,57,-36,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,132,57,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,28,-7,132,237,238,239,57,241,57,-124,-126,-104,-105,132,57,-21,-23,-24,-16,57,132,-152,57,57,-156,57,57,57,57,-167,-168,-169,28,132,-20,-22,57,-150,-146,57,-148,280,57,57,-166,-170,-147,57,57,57,57,57,57,-157,-159,-160,57,57,57,-162,57,-164,57,-158,-161,-163,-165,]),'SEMI_COLON':([7,8,21,22,24,25,27,29,30,35,36,38,45,46,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,90,92,97,125,126,127,129,130,131,133,137,158,159,160,161,162,163,164,165,166,167,168,170,173,177,180,181,182,183,184,189,191,192,193,195,197,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,231,232,235,236,241,242,243,244,245,246,252,255,256,258,259,260,261,262,263,264,269,270,271,272,273,274,276,277,278,279,283,284,285,287,289,291,292,293,294,295,296,297,298,299,300,],[29,30,-95,36,-121,-93,-122,-89,-90,-171,-91,-120,-96,-135,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-149,168,-94,-95,-125,-127,-123,-25,-26,-30,-31,-32,-41,-33,-86,168,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,-7,236,168,243,244,245,-124,-126,-107,248,-112,-114,-115,-136,-74,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-152,168,168,-156,168,271,-167,-168,-169,272,-137,-20,-22,-34,-87,-42,-150,-146,168,-148,168,168,-166,-170,-113,-72,-147,168,168,168,-157,-159,-160,168,168,168,298,-162,168,-164,168,-158,-161,-163,-165,]),'R_PAREN':([12,13,14,15,16,17,18,19,24,27,38,40,42,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,90,91,92,93,97,101,122,125,126,127,129,130,131,133,135,136,137,138,168,183,184,186,187,188,199,201,203,204,205,206,207,208,209,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,236,247,255,256,258,259,260,265,266,267,274,275,281,282,286,288,290,],[-97,-98,-99,-100,-101,-102,-103,-106,-121,-122,-120,92,97,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-125,184,-127,-130,-123,-111,203,-25,-26,-30,-31,-32,-41,-33,209,211,-86,-133,-155,-124,-126,-132,-104,-105,-74,-70,-21,256,-27,-23,-24,258,-16,-134,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-156,-131,-20,-22,-34,-87,-42,277,278,279,-72,-28,287,289,292,294,296,]),'COMMA':([21,22,24,25,27,38,45,46,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,87,88,90,91,92,93,97,102,103,104,105,106,125,126,127,129,130,131,133,135,137,170,173,183,184,186,191,192,193,197,199,200,201,202,203,204,205,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,234,246,247,250,251,252,253,255,256,258,259,260,265,266,267,273,274,275,286,288,290,],[-95,37,-121,-93,-122,-120,-96,-135,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-94,-95,-125,185,-127,-130,-123,-118,196,-116,198,-138,-25,-26,-30,-31,-32,-41,-33,210,-86,-7,210,-124,-126,-132,249,-112,-114,-136,-74,210,-70,210,-21,257,-27,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-88,210,-131,-119,-117,-137,-139,-20,-22,-34,-87,-42,210,210,210,-113,-72,-28,210,210,210,]),'ASSIGNMENT':([21,24,27,38,49,51,59,60,68,69,70,71,72,73,74,75,76,77,88,90,92,97,102,125,126,127,129,130,131,133,170,183,184,203,206,207,209,255,256,258,260,],[34,-121,-122,-120,108,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,34,-125,-127,-123,194,-25,-26,-30,-31,-32,-41,-33,-7,-124,-126,-21,-23,-24,-16,-20,-22,-34,-42,]),'L_BRACES':([21,24,27,29,30,31,32,34,35,36,38,47,85,86,90,92,97,158,159,160,161,162,163,164,165,166,167,168,177,183,184,198,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[35,-121,-122,-89,-90,43,44,47,-171,-91,-120,47,-149,35,-125,-127,-123,35,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,35,-124,-126,47,-152,35,35,-156,-167,-168,-169,-150,-146,35,-148,-166,-170,-147,35,35,35,-157,-159,-160,35,35,35,-162,35,-164,35,-158,-161,-163,-165,]),'L_SQBR':([24,27,38,51,59,60,68,69,70,71,72,73,74,75,76,77,90,92,97,125,126,170,183,184,203,206,207,209,255,256,],[39,-122,39,121,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-125,-127,-123,-25,-26,-7,-124,-126,-21,-23,-24,-16,-20,-22,]),'CASE':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,171,171,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,171,-152,171,171,-156,-167,-168,-169,-150,-146,171,-148,-166,-170,-147,171,171,171,-157,-159,-160,171,171,171,-162,171,-164,171,-158,-161,-163,-165,]),'DEFAULT':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,172,172,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,172,-152,172,172,-156,-167,-168,-169,-150,-146,172,-148,-166,-170,-147,172,172,172,-157,-159,-160,172,172,172,-162,172,-164,172,-158,-161,-163,-165,]),'IF':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,174,174,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,174,-152,174,174,-156,-167,-168,-169,-150,-146,174,-148,-166,-170,-147,174,174,174,-157,-159,-160,174,174,174,-162,174,-164,174,-158,-161,-163,-165,]),'SWITCH':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,175,175,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,175,-152,175,175,-156,-167,-168,-169,-150,-146,175,-148,-166,-170,-147,175,175,175,-157,-159,-160,175,175,175,-162,175,-164,175,-158,-161,-163,-165,]),'WHILE':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,240,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,176,176,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,176,-152,176,176,-156,268,-167,-168,-169,-150,-146,176,-148,-166,-170,-147,176,176,176,-157,-159,-160,176,176,176,-162,176,-164,176,-158,-161,-163,-165,]),'DO':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,177,177,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,177,-152,177,177,-156,-167,-168,-169,-150,-146,177,-148,-166,-170,-147,177,177,177,-157,-159,-160,177,177,177,-162,177,-164,177,-158,-161,-163,-165,]),'FOR':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,178,178,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,178,-152,178,178,-156,-167,-168,-169,-150,-146,178,-148,-166,-170,-147,178,178,178,-157,-159,-160,178,178,178,-162,178,-164,178,-158,-161,-163,-165,]),'GOTO':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,179,179,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,179,-152,179,179,-156,-167,-168,-169,-150,-146,179,-148,-166,-170,-147,179,179,179,-157,-159,-160,179,179,179,-162,179,-164,179,-158,-161,-163,-165,]),'CONTINUE':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,180,180,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,180,-152,180,180,-156,-167,-168,-169,-150,-146,180,-148,-166,-170,-147,180,180,180,-157,-159,-160,180,180,180,-162,180,-164,180,-158,-161,-163,-165,]),'BREAK':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,181,181,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,181,-152,181,181,-156,-167,-168,-169,-150,-146,181,-148,-166,-170,-147,181,181,181,-157,-159,-160,181,181,181,-162,181,-164,181,-158,-161,-163,-165,]),'RETURN':([29,30,35,36,85,86,158,159,160,161,162,163,164,165,166,167,168,177,231,232,235,236,243,244,245,261,262,263,264,271,272,276,277,278,279,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,-171,-91,-149,182,182,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,182,-152,182,182,-156,-167,-168,-169,-150,-146,182,-148,-166,-170,-147,182,182,182,-157,-159,-160,182,182,182,-162,182,-164,182,-158,-161,-163,-165,]),'INCREMENT':([29,30,34,35,36,39,47,51,52,53,54,56,57,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,177,182,194,198,203,206,207,209,210,211,231,232,235,236,237,238,239,241,243,244,245,254,255,256,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,52,-171,-91,52,52,125,52,52,52,52,52,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-149,52,52,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,52,52,52,52,-25,-26,52,52,52,-36,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,-7,52,52,52,52,52,-21,-23,-24,-16,52,52,-152,52,52,-156,52,52,52,52,-167,-168,-169,52,-20,-22,52,-150,-146,52,-148,52,52,-166,-170,-147,52,52,52,52,52,52,-157,-159,-160,52,52,52,-162,52,-164,52,-158,-161,-163,-165,]),'DECREMENT':([29,30,34,35,36,39,47,51,52,53,54,56,57,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,177,182,194,198,203,206,207,209,210,211,231,232,235,236,237,238,239,241,243,244,245,254,255,256,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,53,-171,-91,53,53,126,53,53,53,53,53,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-149,53,53,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,53,53,53,53,-25,-26,53,53,53,-36,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,-7,53,53,53,53,53,-21,-23,-24,-16,53,53,-152,53,53,-156,53,53,53,53,-167,-168,-169,53,-20,-22,53,-150,-146,53,-148,53,53,-166,-170,-147,53,53,53,53,53,53,-157,-159,-160,53,53,53,-162,53,-164,53,-158,-161,-163,-165,]),'SIZEOF':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,56,-171,-91,56,56,56,56,56,56,56,-35,-36,-37,-38,-39,-40,-149,56,56,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,56,56,56,56,56,56,56,-36,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,56,56,56,56,56,56,56,-152,56,56,-156,56,56,56,56,-167,-168,-169,56,56,-150,-146,56,-148,56,56,-166,-170,-147,56,56,56,56,56,56,-157,-159,-160,56,56,56,-162,56,-164,56,-158,-161,-163,-165,]),'BITWISE_AND':([29,30,34,35,36,39,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,79,80,81,82,83,84,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,177,182,194,198,203,206,207,209,210,211,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,231,232,235,236,237,238,239,241,243,244,245,254,255,256,257,258,260,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,61,-171,-91,61,61,-41,-29,61,61,61,-43,61,61,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,144,-61,-58,-53,-50,-47,-149,61,61,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,61,61,61,61,-25,-26,-30,61,-31,-32,-41,61,-33,61,-36,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,-7,61,61,61,61,61,-21,-23,-24,-16,61,61,144,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-152,61,61,-156,61,61,61,61,-167,-168,-169,61,-20,-22,61,-34,-42,-150,-146,61,-148,61,61,-166,-170,-147,61,61,61,61,61,61,-157,-159,-160,61,61,61,-162,61,-164,61,-158,-161,-163,-165,]),'ADD':([29,30,34,35,36,39,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,83,84,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,177,182,194,198,203,206,207,209,210,211,223,224,225,226,227,228,229,231,232,235,236,237,238,239,241,243,244,245,254,255,256,257,258,260,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,63,-171,-91,63,63,-41,-29,63,63,63,-43,63,63,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,153,-47,-149,63,63,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,63,63,63,63,-25,-26,-30,63,-31,-32,-41,63,-33,63,-36,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,-7,63,63,63,63,63,-21,-23,-24,-16,63,63,153,153,-48,-49,-44,-45,-46,-152,63,63,-156,63,63,63,63,-167,-168,-169,63,-20,-22,63,-34,-42,-150,-146,63,-148,63,63,-166,-170,-147,63,63,63,63,63,63,-157,-159,-160,63,63,63,-162,63,-164,63,-158,-161,-163,-165,]),'SUBSTRACT':([29,30,34,35,36,39,47,49,51,52,53,54,55,56,57,59,60,61,62,63,64,65,66,68,69,70,71,72,73,74,75,76,77,83,84,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,125,126,127,128,129,130,131,132,133,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,170,171,177,182,194,198,203,206,207,209,210,211,223,224,225,226,227,228,229,231,232,235,236,237,238,239,241,243,244,245,254,255,256,257,258,260,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,64,-171,-91,64,64,-41,-29,64,64,64,-43,64,64,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,154,-47,-149,64,64,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,64,64,64,64,-25,-26,-30,64,-31,-32,-41,64,-33,64,-36,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,-7,64,64,64,64,64,-21,-23,-24,-16,64,64,154,154,-48,-49,-44,-45,-46,-152,64,64,-156,64,64,64,64,-167,-168,-169,64,-20,-22,64,-34,-42,-150,-146,64,-148,64,64,-166,-170,-147,64,64,64,64,64,64,-157,-159,-160,64,64,64,-162,64,-164,64,-158,-161,-163,-165,]),'BITWISE_ONE_COMPLEMENT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,65,-171,-91,65,65,65,65,65,65,65,-35,-36,-37,-38,-39,-40,-149,65,65,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,65,65,65,65,65,65,65,-36,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,65,65,65,65,65,65,65,-152,65,65,-156,65,65,65,65,-167,-168,-169,65,65,-150,-146,65,-148,65,65,-166,-170,-147,65,65,65,65,65,65,-157,-159,-160,65,65,65,-162,65,-164,65,-158,-161,-163,-165,]),'LOGICAL_NOT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,66,-171,-91,66,66,66,66,66,66,66,-35,-36,-37,-38,-39,-40,-149,66,66,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,66,66,66,66,66,66,66,-36,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,66,66,66,66,66,66,66,-152,66,66,-156,66,66,66,66,-167,-168,-169,66,66,-150,-146,66,-148,66,66,-166,-170,-147,66,66,66,66,66,66,-157,-159,-160,66,66,66,-162,66,-164,66,-158,-161,-163,-165,]),'NULL':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,68,-171,-91,68,68,68,68,68,68,68,-35,-36,-37,-38,-39,-40,-149,68,68,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,68,68,68,68,68,68,68,-36,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,68,68,68,68,68,68,68,-152,68,68,-156,68,68,68,68,-167,-168,-169,68,68,-150,-146,68,-148,68,68,-166,-170,-147,68,68,68,68,68,68,-157,-159,-160,68,68,68,-162,68,-164,68,-158,-161,-163,-165,]),'INT_CONSTANT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,69,-171,-91,69,69,69,69,69,69,69,-35,-36,-37,-38,-39,-40,-149,69,69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,69,69,69,69,69,69,69,-36,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,69,69,69,69,69,69,69,-152,69,69,-156,69,69,69,69,-167,-168,-169,69,69,-150,-146,69,-148,69,69,-166,-170,-147,69,69,69,69,69,69,-157,-159,-160,69,69,69,-162,69,-164,69,-158,-161,-163,-165,]),'HEX_CONSTANT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,70,-171,-91,70,70,70,70,70,70,70,-35,-36,-37,-38,-39,-40,-149,70,70,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,70,70,70,70,70,70,70,-36,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,70,70,70,70,70,70,70,-152,70,70,-156,70,70,70,70,-167,-168,-169,70,70,-150,-146,70,-148,70,70,-166,-170,-147,70,70,70,70,70,70,-157,-159,-160,70,70,70,-162,70,-164,70,-158,-161,-163,-165,]),'OCTAL_CONSTANT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,71,-171,-91,71,71,71,71,71,71,71,-35,-36,-37,-38,-39,-40,-149,71,71,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,71,71,71,71,71,71,71,-36,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,71,71,71,71,71,71,71,-152,71,71,-156,71,71,71,71,-167,-168,-169,71,71,-150,-146,71,-148,71,71,-166,-170,-147,71,71,71,71,71,71,-157,-159,-160,71,71,71,-162,71,-164,71,-158,-161,-163,-165,]),'EXPONENT_CONSTANT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,72,-171,-91,72,72,72,72,72,72,72,-35,-36,-37,-38,-39,-40,-149,72,72,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,72,72,72,72,72,72,72,-36,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,72,72,72,72,72,72,72,-152,72,72,-156,72,72,72,72,-167,-168,-169,72,72,-150,-146,72,-148,72,72,-166,-170,-147,72,72,72,72,72,72,-157,-159,-160,72,72,72,-162,72,-164,72,-158,-161,-163,-165,]),'REAL_CONSTANT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,73,-171,-91,73,73,73,73,73,73,73,-35,-36,-37,-38,-39,-40,-149,73,73,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,73,73,73,73,73,73,73,-36,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,73,73,73,73,73,73,73,-152,73,73,-156,73,73,73,73,-167,-168,-169,73,73,-150,-146,73,-148,73,73,-166,-170,-147,73,73,73,73,73,73,-157,-159,-160,73,73,73,-162,73,-164,73,-158,-161,-163,-165,]),'CHAR_CONSTANT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,74,-171,-91,74,74,74,74,74,74,74,-35,-36,-37,-38,-39,-40,-149,74,74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,74,74,74,74,74,74,74,-36,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,74,74,74,74,74,74,74,-152,74,74,-156,74,74,74,74,-167,-168,-169,74,74,-150,-146,74,-148,74,74,-166,-170,-147,74,74,74,74,74,74,-157,-159,-160,74,74,74,-162,74,-164,74,-158,-161,-163,-165,]),'STR_CONSTANT':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,75,-171,-91,75,75,75,75,75,75,75,-35,-36,-37,-38,-39,-40,-149,75,75,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,75,75,75,75,75,75,75,-36,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,75,75,75,75,75,75,75,-152,75,75,-156,75,75,75,75,-167,-168,-169,75,75,-150,-146,75,-148,75,75,-166,-170,-147,75,75,75,75,75,75,-157,-159,-160,75,75,75,-162,75,-164,75,-158,-161,-163,-165,]),'TRUE':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,76,-171,-91,76,76,76,76,76,76,76,-35,-36,-37,-38,-39,-40,-149,76,76,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,76,76,76,76,76,76,76,-36,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,76,76,76,76,76,76,76,-152,76,76,-156,76,76,76,76,-167,-168,-169,76,76,-150,-146,76,-148,76,76,-166,-170,-147,76,76,76,76,76,76,-157,-159,-160,76,76,76,-162,76,-164,76,-158,-161,-163,-165,]),'FALSE':([29,30,34,35,36,39,47,52,53,54,56,57,61,62,63,64,65,66,85,86,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,128,132,134,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,171,177,182,194,198,210,211,231,232,235,236,237,238,239,241,243,244,245,254,257,261,262,263,264,269,270,271,272,276,277,278,279,280,281,282,283,284,285,287,289,291,293,294,295,296,297,298,299,300,],[-89,-90,77,-171,-91,77,77,77,77,77,77,77,-35,-36,-37,-38,-39,-40,-149,77,77,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,77,77,77,77,77,77,77,-36,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,77,77,77,77,77,77,77,-152,77,77,-156,77,77,77,77,-167,-168,-169,77,77,-150,-146,77,-148,77,77,-166,-170,-147,77,77,77,77,77,77,-157,-159,-160,77,77,77,-162,77,-164,77,-158,-161,-163,-165,]),'R_BRACES':([29,30,35,36,46,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,98,99,102,103,104,105,106,125,126,127,129,130,131,133,158,159,160,161,162,163,164,165,166,167,168,190,197,198,199,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,234,236,243,244,245,248,250,251,252,253,255,256,258,260,261,262,264,271,272,274,276,283,284,285,293,295,297,298,299,300,],[-89,-90,85,-91,-135,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-149,189,-108,-118,195,-116,197,-138,-25,-26,-30,-31,-32,-41,-33,-172,-151,-153,-154,-140,-141,-142,-143,-144,-145,-155,-109,-136,252,-74,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,261,-152,-88,-156,-167,-168,-169,-110,-119,-117,-137,-139,-20,-22,-34,-42,-150,-146,-148,-166,-170,-72,-147,-157,-159,-160,-162,-164,-158,-161,-163,-165,]),'R_SQBR':([39,48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,89,125,126,127,129,130,131,133,137,199,201,202,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,259,260,274,],[90,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,183,-25,-26,-30,-31,-32,-41,-33,-86,-74,-70,255,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-87,-42,-72,]),'COLON':([48,49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,125,126,127,129,130,131,133,137,170,172,199,200,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,233,234,255,256,258,259,260,274,],[-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-86,232,235,-74,254,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,263,-88,-20,-22,-34,-87,-42,-72,]),'DIVIDE':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,84,125,126,127,129,130,131,133,170,203,206,207,209,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,156,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,156,156,-44,-45,-46,-20,-22,-34,-42,]),'MODULUS':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,84,125,126,127,129,130,131,133,170,203,206,207,209,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,157,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,157,157,-44,-45,-46,-20,-22,-34,-42,]),'LEFT_SHIFT':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,151,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,151,151,151,151,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'RIGHT_SHIFT':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,152,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,152,152,152,152,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LESS':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,147,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,147,147,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'GREATER':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,148,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,148,148,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LESS_EQUALS':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,149,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,149,149,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'GREATER_EQUALS':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,150,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,150,150,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'EQUALS':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,80,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,145,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,145,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'NOT_EQUALS':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,80,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,146,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,146,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'BITWISE_XOR':([49,51,55,59,60,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,143,-63,-61,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,143,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'BITWISE_OR':([49,51,55,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,125,126,127,129,130,131,133,170,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,-19,-7,142,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,142,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LOGICAL_AND':([49,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,125,126,127,129,130,131,133,170,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,-29,-43,141,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,141,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'QUES_MARK':([49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,125,126,127,129,130,131,133,170,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,119,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LOGICAL_OR':([49,50,51,55,58,59,60,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,125,126,127,129,130,131,133,170,201,203,206,207,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,255,256,258,260,],[-41,120,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-25,-26,-30,-31,-32,-41,-33,-7,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'MULTIPLY_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[109,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'DIVIDE_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[110,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'MODULUS_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[111,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'ADD_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[112,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'SUBSTRACT_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[113,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'LEFT_SHIFT_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[114,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'RIGHT_SHIFT_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[115,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'BITWISE_AND_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[116,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'BITWISE_XOR_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[117,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'BITWISE_OR_ASSIGNMENT':([49,51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,127,129,130,131,133,170,203,206,207,209,255,256,258,260,],[118,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-30,-31,-32,-41,-33,-7,-21,-23,-24,-16,-20,-22,-34,-42,]),'DOT':([51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,170,203,206,207,209,255,256,],[123,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-7,-21,-23,-24,-16,-20,-22,]),'ARROW':([51,59,60,68,69,70,71,72,73,74,75,76,77,125,126,170,203,206,207,209,255,256,],[124,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-25,-26,-7,-21,-23,-24,-16,-20,-22,]),'ELSE':([85,162,163,164,165,166,167,168,236,243,244,245,261,262,264,271,272,276,283,284,285,293,295,297,298,299,300,],[-149,-140,-141,-142,-143,-144,-145,-155,-156,-167,-168,-169,-150,-146,-148,-166,-170,-147,291,-159,-160,-162,-164,-158,-161,-163,-165,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,20,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,86,158,241,],[5,5,161,161,270,]),'declaration_specifiers':([0,2,40,86,158,185,241,],[6,6,94,169,169,94,169,]),'struct_specifier':([0,2,86,158,241,],[7,7,7,7,7,]),'enum_specifier':([0,2,86,158,241,],[8,8,8,8,8,]),'type_specifier':([0,2,40,43,57,86,98,132,134,139,158,185,241,],[9,9,9,101,101,9,101,101,101,101,9,9,9,]),'declarator':([6,28,37,94,100,169,249,],[21,42,88,186,193,88,193,]),'init_declarator_list':([6,169,],[22,22,]),'pointer':([6,26,28,37,57,94,100,132,134,140,169,249,],[23,41,23,23,139,23,23,139,139,41,23,23,]),'direct_declarator':([6,23,28,37,94,100,169,249,],[24,38,24,24,24,24,24,24,]),'init_declarator':([6,37,169,],[25,87,25,]),'compound_statement':([21,86,158,177,232,235,263,277,278,279,287,289,291,294,296,],[33,163,163,163,163,163,163,163,163,163,163,163,163,163,163,]),'initializer':([34,47,198,],[45,106,253,]),'assignment_expression':([34,39,47,57,86,107,119,121,122,128,132,134,158,177,182,198,210,232,235,237,238,239,241,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[46,89,46,137,137,199,137,137,205,137,137,137,137,137,137,46,259,137,137,137,137,137,137,275,137,137,137,137,137,137,137,137,137,137,137,137,137,137,]),'conditional_expression':([34,39,47,57,86,107,119,121,122,128,132,134,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[48,48,48,48,48,48,48,48,48,48,48,48,48,234,48,48,234,48,48,48,48,48,48,48,48,274,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'unary_expression':([34,39,47,52,53,54,56,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,171,177,182,194,198,210,211,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[49,49,49,127,129,131,133,49,49,49,49,131,49,49,49,49,49,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,49,131,49,49,131,49,49,131,49,49,49,49,49,49,131,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'logical_or_expression':([34,39,47,57,86,107,119,121,122,128,132,134,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'postfix_expression':([34,39,47,52,53,54,56,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,171,177,182,194,198,210,211,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,51,]),'unary_operator':([34,39,47,52,53,54,56,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,171,177,182,194,198,210,211,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'cast_expression':([34,39,47,54,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,171,177,182,194,198,210,211,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[55,55,55,130,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,227,228,229,55,55,55,55,55,55,55,260,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'logical_and_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[58,58,58,58,58,58,58,201,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'primary_expression':([34,39,47,52,53,54,56,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,171,177,182,194,198,210,211,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'inclusive_or_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[67,67,67,67,67,67,67,67,67,67,67,67,67,213,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'exclusive_or_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,142,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[78,78,78,78,78,78,78,78,78,78,78,78,78,78,214,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,]),'and_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,142,143,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,215,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'equality_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,142,143,144,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,216,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'relational_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,217,218,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'shift_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,219,220,221,222,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'additive_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,223,224,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'multiplicative_expression':([34,39,47,57,86,107,119,120,121,122,128,132,134,141,142,143,144,145,146,147,148,149,150,151,152,153,154,158,171,177,182,194,198,210,232,235,237,238,239,241,254,257,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,225,226,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'marker_1':([35,],[86,]),'parameter_type_list':([40,],[91,]),'parameter_declaration':([40,185,],[93,247,]),'struct_declaration_list':([43,],[98,]),'struct_declaration':([43,98,],[99,190,]),'specifier_qualifier_list':([43,57,98,132,134,139,],[100,138,100,138,138,212,]),'enumerator_list':([44,],[103,]),'enumerator':([44,196,],[104,251,]),'initializer_list':([47,],[105,]),'assignment_operator':([49,],[107,]),'expression':([57,86,119,121,128,132,134,158,177,182,232,235,237,238,239,241,263,269,270,277,278,279,280,281,282,287,289,291,294,296,],[135,173,200,202,135,135,135,173,173,246,173,173,265,266,267,173,173,173,173,173,173,173,286,288,290,173,173,173,173,173,]),'type_name':([57,132,134,],[136,136,208,]),'block_item_list':([86,],[158,]),'block_item':([86,158,],[159,231,]),'statement':([86,158,177,232,235,263,277,278,279,287,289,291,294,296,],[160,160,240,262,264,276,283,284,285,293,295,297,299,300,]),'labeled_statement':([86,158,177,232,235,263,277,278,279,287,289,291,294,296,],[162,162,162,162,162,162,162,162,162,162,162,162,162,162,]),'expression_statement':([86,158,177,232,235,241,263,269,270,277,278,279,287,289,291,294,296,],[164,164,164,164,164,269,164,281,282,164,164,164,164,164,164,164,164,]),'selection_statement':([86,158,177,232,235,263,277,278,279,287,289,291,294,296,],[165,165,165,165,165,165,165,165,165,165,165,165,165,165,]),'iteration_statement':([86,158,177,232,235,263,277,278,279,287,289,291,294,296,],[166,166,166,166,166,166,166,166,166,166,166,166,166,166,]),'jump_statement':([86,158,177,232,235,263,277,278,279,287,289,291,294,296,],[167,167,167,167,167,167,167,167,167,167,167,167,167,167,]),'struct_declarator_list':([100,],[191,]),'struct_declarator':([100,249,],[192,273,]),'argument_expression_list':([122,],[204,]),'marker_2':([158,],[230,]),'constant_expression':([171,194,],[233,250,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',25),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',31),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',32),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',39),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',40),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','cparser.py',47),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',66),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',67),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',68),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',69),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',70),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',71),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',72),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',73),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',74),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',75),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',76),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',77),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',91),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',92),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',93),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',94),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',95),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',96),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',97),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',98),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',116),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',117),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',129),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',130),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',131),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',132),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',133),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',134),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',144),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',145),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',146),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',147),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',148),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',149),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',156),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',157),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',168),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',169),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',170),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',171),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',182),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',183),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',184),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',194),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',195),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',196),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',207),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',208),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',209),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',210),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',211),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',222),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',223),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',224),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',235),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',236),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',247),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',248),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',259),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',260),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',271),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',272),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',283),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',284),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',295),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',296),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',307),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',308),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',319),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',320),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',321),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',322),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',323),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',324),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',325),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',326),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',327),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',328),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',329),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',336),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',337),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',351),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',359),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',360),
  ('declaration -> declaration_specifiers init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',361),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',372),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',386),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',387),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',400),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',401),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',412),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',413),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',414),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',415),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',416),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',417),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',418),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',419),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',420),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',421),
  ('struct_specifier -> STRUCT IDENTIFIER L_BRACES struct_declaration_list R_BRACES','struct_specifier',5,'p_struct_specifier','cparser.py',428),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',437),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',438),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',445),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',452),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',467),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',468),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','cparser.py',475),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',484),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',491),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',492),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',499),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',500),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',508),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','cparser.py',509),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',519),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',520),
  ('direct_declarator -> direct_declarator L_SQBR assignment_expression R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',521),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',522),
  ('direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',523),
  ('direct_declarator -> direct_declarator L_PAREN R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',524),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',541),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer','cparser.py',542),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',554),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',555),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',568),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','cparser.py',585),
  ('type_name -> pointer specifier_qualifier_list','type_name',2,'p_type_name','cparser.py',586),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',599),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',600),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',601),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',611),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',612),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',619),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',620),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',621),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',622),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',623),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',624),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',631),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',632),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',633),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',645),
  ('compound_statement -> L_BRACES marker_1 block_item_list marker_2 R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',646),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',657),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',658),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',665),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',666),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',673),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',674),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',684),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',685),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',686),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',697),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',698),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',699),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',700),
  ('iteration_statement -> FOR L_PAREN declaration expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',701),
  ('iteration_statement -> FOR L_PAREN declaration expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',702),
  ('jump_statement -> GOTO IDENTIFIER SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',718),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',719),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',720),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',721),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',722),
  ('marker_1 -> <empty>','marker_1',0,'p_marker_1','cparser.py',733),
  ('marker_2 -> <empty>','marker_2',0,'p_marker_2','cparser.py',738),
]
