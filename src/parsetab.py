
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : declaration_specifiers declarator compound_statement\n    \n    primary_expression : IDENTIFIER\n                       | NULL\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : declaration_specifiers SEMI_COLON\n\t            | declaration_specifiers init_declarator_list SEMI_COLON\n    \n    declaration_specifiers : type_specifier\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | struct_specifier\n                   | enum_specifier\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER L_BRACES struct_declaration_list R_BRACES\n\t                | STRUCT L_BRACES struct_declaration_list R_BRACES\n\t                | STRUCT IDENTIFIER\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : specifier_qualifier_list struct_declarator_list SEMI_COLON\n    \n    specifier_qualifier_list : type_specifier\n                             \n    \n    struct_declarator_list : struct_declarator\n\t                       | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n    \n    enum_specifier : ENUM L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n                   | ENUM IDENTIFIER\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR assignment_expression R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n                      | direct_declarator L_PAREN parameter_type_list R_PAREN\n                      | direct_declarator L_PAREN R_PAREN\n    \n    pointer : MULTIPLY\n            | MULTIPLY pointer\n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : declaration_specifiers declarator\n    \n    type_name : specifier_qualifier_list\n\t          | pointer specifier_qualifier_list\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n                      | CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n                        | FOR L_PAREN declaration expression_statement R_PAREN statement\n                        | FOR L_PAREN declaration expression_statement expression R_PAREN statement\n    \n    jump_statement : GOTO IDENTIFIER SEMI_COLON\n\t               | CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[8,8,-2,-4,-5,-3,-89,-131,8,-6,8,-90,8,-132,8,8,-109,8,-152,8,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,8,-110,8,8,8,-131,-153,-155,-159,8,-170,-171,-172,8,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'CHAR':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[9,9,-2,-4,-5,-3,-89,-131,9,-6,9,-90,9,-132,9,9,-109,9,-152,9,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,9,-110,9,9,9,-131,-153,-155,-159,9,-170,-171,-172,9,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'SHORT':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[10,10,-2,-4,-5,-3,-89,-131,10,-6,10,-90,10,-132,10,10,-109,10,-152,10,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,10,-110,10,10,10,-131,-153,-155,-159,10,-170,-171,-172,10,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'INT':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[11,11,-2,-4,-5,-3,-89,-131,11,-6,11,-90,11,-132,11,11,-109,11,-152,11,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,11,-110,11,11,11,-131,-153,-155,-159,11,-170,-171,-172,11,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'LONG':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[12,12,-2,-4,-5,-3,-89,-131,12,-6,12,-90,12,-132,12,12,-109,12,-152,12,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,12,-110,12,12,12,-131,-153,-155,-159,12,-170,-171,-172,12,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'FLOAT':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[13,13,-2,-4,-5,-3,-89,-131,13,-6,13,-90,13,-132,13,13,-109,13,-152,13,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,13,-110,13,13,13,-131,-153,-155,-159,13,-170,-171,-172,13,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'DOUBLE':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[14,14,-2,-4,-5,-3,-89,-131,14,-6,14,-90,14,-132,14,14,-109,14,-152,14,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,14,-110,14,14,14,-131,-153,-155,-159,14,-170,-171,-172,14,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'BOOL':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[17,17,-2,-4,-5,-3,-89,-131,17,-6,17,-90,17,-132,17,17,-109,17,-152,17,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,17,-110,17,17,17,-131,-153,-155,-159,17,-170,-171,-172,17,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'STRUCT':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[18,18,-2,-4,-5,-3,-89,-131,18,-6,18,-90,18,-132,18,18,-109,18,-152,18,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,18,-110,18,18,18,-131,-153,-155,-159,18,-170,-171,-172,18,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'ENUM':([0,2,3,4,5,20,22,27,31,34,36,37,41,42,44,45,46,65,93,94,95,96,97,98,99,100,101,102,103,105,129,131,166,168,172,173,191,192,197,203,205,206,207,211,214,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[19,19,-2,-4,-5,-3,-89,-131,19,-6,19,-90,19,-132,19,19,-109,19,-152,19,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,19,-110,19,19,19,-131,-153,-155,-159,19,-170,-171,-172,19,-111,-149,-151,-169,-173,-150,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'$end':([1,2,3,4,5,20,22,34,37,93,191,],[0,-1,-2,-4,-5,-3,-89,-6,-90,-152,-153,]),'SEMI_COLON':([6,7,8,9,10,11,12,13,14,15,16,17,21,22,23,25,26,28,30,33,36,37,39,53,54,56,57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,109,113,116,117,118,119,120,121,123,125,128,130,132,133,134,135,159,160,161,163,164,165,167,191,192,193,196,197,203,204,205,206,207,208,209,210,213,218,219,221,223,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,259,260,261,262,264,265,268,269,271,272,273,274,275,276,280,282,283,284,286,288,290,291,292,293,294,295,296,297,298,299,],[22,-91,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-94,-89,37,-124,-92,-125,-108,-118,105,-90,-123,-95,-138,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-152,105,-154,-156,-157,-143,-144,-145,-146,-147,-148,22,-158,-7,197,105,205,206,207,-86,-93,-94,-128,-130,-126,-107,214,-113,-115,-116,-25,-26,-30,-31,-32,-41,-33,-153,-155,105,105,-159,105,261,-170,-171,-172,262,-127,-129,-106,-117,-139,-74,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-149,105,-151,-87,105,105,-169,-173,-114,-140,-20,-22,-34,-42,-150,105,105,105,-72,-160,-162,-163,105,105,105,297,-165,105,-167,105,-161,-164,-166,-168,]),'MULTIPLY':([6,7,8,9,10,11,12,13,14,15,16,17,22,27,29,30,33,35,36,37,38,40,47,48,55,57,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,113,118,127,130,135,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,163,164,165,166,167,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,213,215,218,220,225,228,229,231,232,246,247,248,249,250,251,252,253,259,260,261,262,267,268,269,270,271,272,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[27,-91,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,27,27,-108,-118,70,70,-90,27,70,27,-112,70,-41,-29,70,70,70,-43,70,173,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,188,-152,70,-154,-156,-157,-143,-144,-145,-146,-147,-148,27,-158,-7,70,70,70,27,-107,-116,70,70,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,70,70,70,70,-25,-26,-30,70,-31,-32,-41,173,-33,173,27,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-153,-155,70,70,-159,70,70,70,70,70,-170,-171,-172,-106,27,-117,70,-21,-23,-24,-16,70,188,188,-44,-45,-46,-149,70,-151,70,70,-169,-173,70,-20,-22,70,-34,-42,-150,70,70,70,70,70,70,-160,-162,-163,70,70,70,-165,70,-167,70,-161,-164,-166,-168,]),'IDENTIFIER':([6,7,8,9,10,11,12,13,14,15,16,17,18,19,22,24,27,29,30,32,33,35,36,37,38,40,42,47,48,52,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,104,105,107,113,115,118,127,130,135,136,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,213,215,218,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[28,-91,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,30,33,-89,28,-131,28,-108,51,-118,68,106,-90,28,68,-132,28,-112,51,68,68,68,68,68,68,-35,-36,-37,-38,-39,-40,-152,106,-154,-156,-157,-143,-144,-145,-146,-147,-148,28,-158,68,106,204,68,28,-107,-116,51,68,68,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,68,68,68,68,228,229,68,68,68,-36,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-153,-155,106,106,-159,68,68,68,68,68,-170,-171,-172,-106,28,-117,68,68,-149,106,-151,68,68,-169,-173,68,68,-150,106,106,106,68,68,68,-160,-162,-163,106,106,106,-165,106,-167,106,-161,-164,-166,-168,]),'L_PAREN':([6,7,8,9,10,11,12,13,14,15,16,17,22,24,25,27,28,29,30,33,35,36,37,38,39,40,42,47,48,55,59,60,61,62,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,110,111,112,113,114,118,123,125,127,128,130,135,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,209,210,213,215,218,220,225,228,229,231,232,251,252,253,258,259,260,261,262,267,268,269,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[29,-91,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-89,29,41,-131,-125,29,-108,-118,65,65,-90,29,41,65,-132,29,-112,65,156,162,162,166,168,65,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-152,65,-154,-156,-157,-143,-144,-145,-146,-147,-148,29,-158,-7,166,199,200,201,65,203,65,-128,-130,29,-126,-107,-116,166,65,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,65,166,65,65,-25,-26,65,65,65,-36,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,166,-153,-155,65,65,-159,65,65,65,65,65,-170,-171,-172,-127,-129,-106,29,-117,65,-21,-23,-24,-16,166,-149,65,-151,277,65,65,-169,-173,166,-20,-22,65,-150,65,65,65,65,65,65,-160,-162,-163,65,65,65,-165,65,-167,65,-161,-164,-166,-168,]),'R_PAREN':([8,9,10,11,12,13,14,15,16,17,25,28,30,33,39,41,43,48,56,57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,105,119,123,124,125,126,128,130,135,156,159,160,161,163,164,165,167,169,170,171,197,209,210,212,213,218,221,223,225,226,227,228,229,230,231,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,254,255,256,257,263,268,269,271,272,278,279,280,281,285,287,289,],[-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-124,-125,-108,-118,-123,125,128,-112,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-158,-86,-128,210,-130,-133,-126,-107,-116,225,-25,-26,-30,-31,-32,-41,-33,231,232,-136,-159,-127,-129,-135,-106,-117,-74,-70,-21,269,-27,-23,-24,271,-16,-137,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-87,274,275,276,-134,-20,-22,-34,-42,286,288,-72,-28,291,293,295,]),'L_BRACES':([18,19,21,22,25,28,30,33,35,36,37,39,55,93,94,95,96,97,98,99,100,101,102,103,105,113,123,125,128,191,192,193,196,197,205,206,207,209,210,220,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[31,32,36,-89,-124,-125,44,52,55,36,-90,-123,55,-152,36,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,36,-128,-130,-126,-153,-155,36,36,-159,-170,-171,-172,-127,-129,55,-149,36,-151,-169,-173,-150,36,36,36,-160,-162,-163,36,36,36,-165,36,-167,36,-161,-164,-166,-168,]),'COMMA':([21,23,25,26,28,39,49,50,51,53,54,56,57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,109,119,120,121,123,124,125,126,128,132,133,134,138,139,140,159,160,161,163,164,165,167,169,195,208,209,210,212,216,217,219,221,222,223,224,225,226,227,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,254,255,256,257,263,264,265,266,268,269,271,272,280,281,285,287,289,],[-94,38,-124,-92,-125,-123,136,-119,-121,-95,-138,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-7,198,-86,-93,-94,-128,211,-130,-133,-126,215,-113,-115,136,220,-141,-25,-26,-30,-31,-32,-41,-33,198,-88,198,-127,-129,-135,-120,-122,-139,-74,198,-70,198,-21,270,-27,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-87,198,198,198,-134,-114,-140,-142,-20,-22,-34,-42,-72,-28,198,198,198,]),'ASSIGNMENT':([21,25,28,39,51,57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,121,123,125,128,159,160,161,163,164,165,167,209,210,225,228,229,231,268,269,271,272,],[35,-124,-125,-123,137,142,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,35,-128,-130,-126,-25,-26,-30,-31,-32,-41,-33,-127,-129,-21,-23,-24,-16,-20,-22,-34,-42,]),'R_BRACES':([22,36,37,45,46,49,50,51,54,56,57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,129,131,138,139,140,159,160,161,163,164,165,167,191,192,195,197,205,206,207,214,216,217,219,220,221,223,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,253,261,262,265,266,268,269,271,272,273,280,282,283,284,292,294,296,297,298,299,],[-89,93,-90,130,-109,135,-119,-121,-138,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-152,191,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,213,-110,218,219,-141,-25,-26,-30,-31,-32,-41,-33,-153,-155,-88,-159,-170,-171,-172,-111,-120,-122,-139,265,-74,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-149,-151,-169,-173,-140,-142,-20,-22,-34,-42,-150,-72,-160,-162,-163,-165,-167,-161,-164,-166,-168,]),'CASE':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,107,-90,-152,107,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,107,-153,-155,107,107,-159,-170,-171,-172,-149,107,-151,-169,-173,-150,107,107,107,-160,-162,-163,107,107,107,-165,107,-167,107,-161,-164,-166,-168,]),'DEFAULT':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,108,-90,-152,108,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,108,-153,-155,108,108,-159,-170,-171,-172,-149,108,-151,-169,-173,-150,108,108,108,-160,-162,-163,108,108,108,-165,108,-167,108,-161,-164,-166,-168,]),'IF':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,110,-90,-152,110,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,110,-153,-155,110,110,-159,-170,-171,-172,-149,110,-151,-169,-173,-150,110,110,110,-160,-162,-163,110,110,110,-165,110,-167,110,-161,-164,-166,-168,]),'SWITCH':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,111,-90,-152,111,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,111,-153,-155,111,111,-159,-170,-171,-172,-149,111,-151,-169,-173,-150,111,111,111,-160,-162,-163,111,111,111,-165,111,-167,111,-161,-164,-166,-168,]),'WHILE':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,202,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,112,-90,-152,112,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,112,-153,-155,112,112,-159,258,-170,-171,-172,-149,112,-151,-169,-173,-150,112,112,112,-160,-162,-163,112,112,112,-165,112,-167,112,-161,-164,-166,-168,]),'DO':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,113,-90,-152,113,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,113,-153,-155,113,113,-159,-170,-171,-172,-149,113,-151,-169,-173,-150,113,113,113,-160,-162,-163,113,113,113,-165,113,-167,113,-161,-164,-166,-168,]),'FOR':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,114,-90,-152,114,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,114,-153,-155,114,114,-159,-170,-171,-172,-149,114,-151,-169,-173,-150,114,114,114,-160,-162,-163,114,114,114,-165,114,-167,114,-161,-164,-166,-168,]),'GOTO':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,115,-90,-152,115,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,115,-153,-155,115,115,-159,-170,-171,-172,-149,115,-151,-169,-173,-150,115,115,115,-160,-162,-163,115,115,115,-165,115,-167,115,-161,-164,-166,-168,]),'CONTINUE':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,116,-90,-152,116,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,116,-153,-155,116,116,-159,-170,-171,-172,-149,116,-151,-169,-173,-150,116,116,116,-160,-162,-163,116,116,116,-165,116,-167,116,-161,-164,-166,-168,]),'BREAK':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,117,-90,-152,117,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,117,-153,-155,117,117,-159,-170,-171,-172,-149,117,-151,-169,-173,-150,117,117,117,-160,-162,-163,117,117,117,-165,117,-167,117,-161,-164,-166,-168,]),'RETURN':([22,36,37,93,94,95,96,97,98,99,100,101,102,103,105,113,191,192,193,196,197,205,206,207,251,252,253,261,262,273,274,275,276,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,118,-90,-152,118,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,118,-153,-155,118,118,-159,-170,-171,-172,-149,118,-151,-169,-173,-150,118,118,118,-160,-162,-163,118,118,118,-165,118,-167,118,-161,-164,-166,-168,]),'INCREMENT':([22,35,36,37,40,55,59,60,61,62,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,105,106,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,225,228,229,231,232,251,252,253,259,260,261,262,267,268,269,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,60,60,-90,60,60,159,60,60,60,60,60,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-152,60,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,-7,60,60,60,60,60,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,60,60,60,60,-25,-26,60,60,60,-36,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-153,-155,60,60,-159,60,60,60,60,60,-170,-171,-172,60,-21,-23,-24,-16,60,-149,60,-151,60,60,-169,-173,60,-20,-22,60,-150,60,60,60,60,60,60,-160,-162,-163,60,60,60,-165,60,-167,60,-161,-164,-166,-168,]),'DECREMENT':([22,35,36,37,40,55,59,60,61,62,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,93,94,95,96,97,98,99,100,101,102,103,105,106,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,225,228,229,231,232,251,252,253,259,260,261,262,267,268,269,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,61,61,-90,61,61,160,61,61,61,61,61,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-152,61,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,-7,61,61,61,61,61,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,61,61,61,61,-25,-26,61,61,61,-36,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,-153,-155,61,61,-159,61,61,61,61,61,-170,-171,-172,61,-21,-23,-24,-16,61,-149,61,-151,61,61,-169,-173,61,-20,-22,61,-150,61,61,61,61,61,61,-160,-162,-163,61,61,61,-165,61,-167,61,-161,-164,-166,-168,]),'SIZEOF':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,64,64,-90,64,64,64,64,64,64,64,-35,-36,-37,-38,-39,-40,-152,64,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,64,64,64,64,64,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,64,64,64,64,64,64,64,-36,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-153,-155,64,64,-159,64,64,64,64,64,-170,-171,-172,64,64,-149,64,-151,64,64,-169,-173,64,64,-150,64,64,64,64,64,64,-160,-162,-163,64,64,64,-165,64,-167,64,-161,-164,-166,-168,]),'BITWISE_AND':([22,35,36,37,40,55,57,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,163,164,165,166,167,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,225,228,229,231,232,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,259,260,261,262,267,268,269,270,271,272,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,69,69,-90,69,69,-41,-29,69,69,69,-43,69,69,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,177,-61,-58,-53,-50,-47,-152,69,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,-7,69,69,69,69,69,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,69,69,69,69,-25,-26,-30,69,-31,-32,-41,69,-33,69,-36,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-153,-155,69,69,-159,69,69,69,69,69,-170,-171,-172,69,-21,-23,-24,-16,69,177,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-149,69,-151,69,69,-169,-173,69,-20,-22,69,-34,-42,-150,69,69,69,69,69,69,-160,-162,-163,69,69,69,-165,69,-167,69,-161,-164,-166,-168,]),'ADD':([22,35,36,37,40,55,57,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,163,164,165,166,167,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,225,228,229,231,232,244,245,246,247,248,249,250,251,252,253,259,260,261,262,267,268,269,270,271,272,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,71,71,-90,71,71,-41,-29,71,71,71,-43,71,71,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,186,-47,-152,71,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,-7,71,71,71,71,71,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,71,71,71,71,-25,-26,-30,71,-31,-32,-41,71,-33,71,-36,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-153,-155,71,71,-159,71,71,71,71,71,-170,-171,-172,71,-21,-23,-24,-16,71,186,186,-48,-49,-44,-45,-46,-149,71,-151,71,71,-169,-173,71,-20,-22,71,-34,-42,-150,71,71,71,71,71,71,-160,-162,-163,71,71,71,-165,71,-167,71,-161,-164,-166,-168,]),'SUBSTRACT':([22,35,36,37,40,55,57,59,60,61,62,63,64,65,67,68,69,70,71,72,73,74,76,77,78,79,80,81,82,83,84,85,91,92,93,94,95,96,97,98,99,100,101,102,103,105,106,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,159,160,161,162,163,164,165,166,167,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,225,228,229,231,232,244,245,246,247,248,249,250,251,252,253,259,260,261,262,267,268,269,270,271,272,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,72,72,-90,72,72,-41,-29,72,72,72,-43,72,72,-19,-7,-35,-36,-37,-38,-39,-40,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,187,-47,-152,72,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,-7,72,72,72,72,72,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,72,72,72,72,-25,-26,-30,72,-31,-32,-41,72,-33,72,-36,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-153,-155,72,72,-159,72,72,72,72,72,-170,-171,-172,72,-21,-23,-24,-16,72,187,187,-48,-49,-44,-45,-46,-149,72,-151,72,72,-169,-173,72,-20,-22,72,-34,-42,-150,72,72,72,72,72,72,-160,-162,-163,72,72,72,-165,72,-167,72,-161,-164,-166,-168,]),'BITWISE_ONE_COMPLEMENT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,73,73,-90,73,73,73,73,73,73,73,-35,-36,-37,-38,-39,-40,-152,73,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,73,73,73,73,73,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,73,73,73,73,73,73,73,-36,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-153,-155,73,73,-159,73,73,73,73,73,-170,-171,-172,73,73,-149,73,-151,73,73,-169,-173,73,73,-150,73,73,73,73,73,73,-160,-162,-163,73,73,73,-165,73,-167,73,-161,-164,-166,-168,]),'LOGICAL_NOT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,74,74,-90,74,74,74,74,74,74,74,-35,-36,-37,-38,-39,-40,-152,74,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,74,74,74,74,74,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,74,74,74,74,74,74,74,-36,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-153,-155,74,74,-159,74,74,74,74,74,-170,-171,-172,74,74,-149,74,-151,74,74,-169,-173,74,74,-150,74,74,74,74,74,74,-160,-162,-163,74,74,74,-165,74,-167,74,-161,-164,-166,-168,]),'NULL':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,76,76,-90,76,76,76,76,76,76,76,-35,-36,-37,-38,-39,-40,-152,76,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,76,76,76,76,76,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,76,76,76,76,76,76,76,-36,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-153,-155,76,76,-159,76,76,76,76,76,-170,-171,-172,76,76,-149,76,-151,76,76,-169,-173,76,76,-150,76,76,76,76,76,76,-160,-162,-163,76,76,76,-165,76,-167,76,-161,-164,-166,-168,]),'INT_CONSTANT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,77,77,-90,77,77,77,77,77,77,77,-35,-36,-37,-38,-39,-40,-152,77,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,77,77,77,77,77,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,77,77,77,77,77,77,77,-36,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-153,-155,77,77,-159,77,77,77,77,77,-170,-171,-172,77,77,-149,77,-151,77,77,-169,-173,77,77,-150,77,77,77,77,77,77,-160,-162,-163,77,77,77,-165,77,-167,77,-161,-164,-166,-168,]),'HEX_CONSTANT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,78,78,-90,78,78,78,78,78,78,78,-35,-36,-37,-38,-39,-40,-152,78,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,78,78,78,78,78,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,78,78,78,78,78,78,78,-36,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-153,-155,78,78,-159,78,78,78,78,78,-170,-171,-172,78,78,-149,78,-151,78,78,-169,-173,78,78,-150,78,78,78,78,78,78,-160,-162,-163,78,78,78,-165,78,-167,78,-161,-164,-166,-168,]),'OCTAL_CONSTANT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,79,79,-90,79,79,79,79,79,79,79,-35,-36,-37,-38,-39,-40,-152,79,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,79,79,79,79,79,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,79,79,79,79,79,79,79,-36,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-153,-155,79,79,-159,79,79,79,79,79,-170,-171,-172,79,79,-149,79,-151,79,79,-169,-173,79,79,-150,79,79,79,79,79,79,-160,-162,-163,79,79,79,-165,79,-167,79,-161,-164,-166,-168,]),'EXPONENT_CONSTANT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,80,80,-90,80,80,80,80,80,80,80,-35,-36,-37,-38,-39,-40,-152,80,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,80,80,80,80,80,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,80,80,80,80,80,80,80,-36,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-153,-155,80,80,-159,80,80,80,80,80,-170,-171,-172,80,80,-149,80,-151,80,80,-169,-173,80,80,-150,80,80,80,80,80,80,-160,-162,-163,80,80,80,-165,80,-167,80,-161,-164,-166,-168,]),'REAL_CONSTANT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,81,81,-90,81,81,81,81,81,81,81,-35,-36,-37,-38,-39,-40,-152,81,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,81,81,81,81,81,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,81,81,81,81,81,81,81,-36,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-153,-155,81,81,-159,81,81,81,81,81,-170,-171,-172,81,81,-149,81,-151,81,81,-169,-173,81,81,-150,81,81,81,81,81,81,-160,-162,-163,81,81,81,-165,81,-167,81,-161,-164,-166,-168,]),'CHAR_CONSTANT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,82,82,-90,82,82,82,82,82,82,82,-35,-36,-37,-38,-39,-40,-152,82,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,82,82,82,82,82,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,82,82,82,82,82,82,82,-36,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-153,-155,82,82,-159,82,82,82,82,82,-170,-171,-172,82,82,-149,82,-151,82,82,-169,-173,82,82,-150,82,82,82,82,82,82,-160,-162,-163,82,82,82,-165,82,-167,82,-161,-164,-166,-168,]),'STR_CONSTANT':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,83,83,-90,83,83,83,83,83,83,83,-35,-36,-37,-38,-39,-40,-152,83,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,83,83,83,83,83,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,83,83,83,83,83,83,83,-36,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,-153,-155,83,83,-159,83,83,83,83,83,-170,-171,-172,83,83,-149,83,-151,83,83,-169,-173,83,83,-150,83,83,83,83,83,83,-160,-162,-163,83,83,83,-165,83,-167,83,-161,-164,-166,-168,]),'TRUE':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,84,84,-90,84,84,84,84,84,84,84,-35,-36,-37,-38,-39,-40,-152,84,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,84,84,84,84,84,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,84,84,84,84,84,84,84,-36,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,-153,-155,84,84,-159,84,84,84,84,84,-170,-171,-172,84,84,-149,84,-151,84,84,-169,-173,84,84,-150,84,84,84,84,84,84,-160,-162,-163,84,84,84,-165,84,-167,84,-161,-164,-166,-168,]),'FALSE':([22,35,36,37,40,55,60,61,62,64,65,69,70,71,72,73,74,93,94,95,96,97,98,99,100,101,102,103,105,107,113,118,137,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,162,166,168,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,196,197,198,199,200,201,203,205,206,207,220,232,251,252,253,259,260,261,262,267,270,273,274,275,276,277,278,279,282,283,284,286,288,290,292,293,294,295,296,297,298,299,],[-89,85,85,-90,85,85,85,85,85,85,85,-35,-36,-37,-38,-39,-40,-152,85,-154,-156,-157,-143,-144,-145,-146,-147,-148,-158,85,85,85,85,85,-75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,85,85,85,85,85,85,85,-36,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,-153,-155,85,85,-159,85,85,85,85,85,-170,-171,-172,85,85,-149,85,-151,85,85,-169,-173,85,85,-150,85,85,85,85,85,85,-160,-162,-163,85,85,85,-165,85,-167,85,-161,-164,-166,-168,]),'L_SQBR':([25,28,39,59,67,68,76,77,78,79,80,81,82,83,84,85,106,123,125,128,159,160,209,210,225,228,229,231,268,269,],[40,-125,40,155,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-128,-130,-126,-25,-26,-127,-129,-21,-23,-24,-16,-20,-22,]),'R_SQBR':([40,56,57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,119,122,159,160,161,163,164,165,167,221,223,224,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,254,268,269,271,272,280,],[123,-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-86,209,-25,-26,-30,-31,-32,-41,-33,-74,-70,268,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-87,-20,-22,-34,-42,-72,]),'COLON':([56,57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,108,119,159,160,161,163,164,165,167,194,195,221,222,223,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,254,268,269,271,272,280,],[-73,-41,-71,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,193,196,-86,-25,-26,-30,-31,-32,-41,-33,252,-88,-74,267,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-87,-20,-22,-34,-42,-72,]),'DIVIDE':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,92,106,159,160,161,163,164,165,167,225,228,229,231,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,189,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,189,189,-44,-45,-46,-20,-22,-34,-42,]),'MODULUS':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,92,106,159,160,161,163,164,165,167,225,228,229,231,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,190,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,190,190,-44,-45,-46,-20,-22,-34,-42,]),'LEFT_SHIFT':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,184,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,184,184,184,184,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'RIGHT_SHIFT':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,185,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,185,185,185,185,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LESS':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,180,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,180,180,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'GREATER':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,181,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,181,181,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LESS_EQUALS':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,182,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,182,182,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'GREATER_EQUALS':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,183,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,183,183,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'EQUALS':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,88,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,237,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,178,-58,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,178,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'NOT_EQUALS':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,88,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,237,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,179,-58,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,179,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'BITWISE_XOR':([57,59,63,67,68,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,176,-63,-61,-58,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,176,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'BITWISE_OR':([57,59,63,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,159,160,161,163,164,165,167,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,-19,-7,175,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,175,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LOGICAL_AND':([57,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,159,160,161,163,164,165,167,223,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,-29,-43,174,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,174,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'QUES_MARK':([57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,159,160,161,163,164,165,167,223,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,153,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'LOGICAL_OR':([57,58,59,63,66,67,68,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,106,159,160,161,163,164,165,167,223,225,228,229,231,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,268,269,271,272,],[-41,154,-29,-43,-69,-19,-7,-67,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-65,-63,-61,-58,-53,-50,-47,-7,-25,-26,-30,-31,-32,-41,-33,-70,-21,-23,-24,-16,-68,-66,-64,-62,-59,-60,-54,-55,-56,-57,-51,-52,-48,-49,-44,-45,-46,-20,-22,-34,-42,]),'MULTIPLY_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[143,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'DIVIDE_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[144,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'MODULUS_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[145,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'ADD_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[146,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'SUBSTRACT_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[147,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'LEFT_SHIFT_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[148,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'RIGHT_SHIFT_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[149,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'BITWISE_AND_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[150,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'BITWISE_XOR_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[151,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'BITWISE_OR_ASSIGNMENT':([57,59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,161,163,164,165,167,225,228,229,231,268,269,271,272,],[152,-29,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-30,-31,-32,-41,-33,-21,-23,-24,-16,-20,-22,-34,-42,]),'DOT':([59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,225,228,229,231,268,269,],[157,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-21,-23,-24,-16,-20,-22,]),'ARROW':([59,67,68,76,77,78,79,80,81,82,83,84,85,106,159,160,225,228,229,231,268,269,],[158,-19,-7,-8,-9,-10,-11,-12,-13,-14,-15,-17,-18,-7,-25,-26,-21,-23,-24,-16,-20,-22,]),'ELSE':([93,98,99,100,101,102,103,105,191,197,205,206,207,251,253,261,262,273,282,283,284,292,294,296,297,298,299,],[-152,-143,-144,-145,-146,-147,-148,-158,-153,-159,-170,-171,-172,-149,-151,-169,-173,-150,290,-162,-163,-165,-167,-161,-164,-166,-168,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,20,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,36,94,203,],[5,5,97,97,260,]),'declaration_specifiers':([0,2,36,41,94,203,211,],[6,6,104,127,104,104,127,]),'type_specifier':([0,2,31,36,41,44,45,65,94,129,166,168,172,203,211,],[7,7,48,7,7,48,48,48,7,48,48,48,48,7,7,]),'struct_specifier':([0,2,31,36,41,44,45,65,94,129,166,168,172,203,211,],[15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,]),'enum_specifier':([0,2,31,36,41,44,45,65,94,129,166,168,172,203,211,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'declarator':([6,29,38,47,104,127,215,],[21,43,121,134,121,212,134,]),'init_declarator_list':([6,104,],[23,23,]),'pointer':([6,27,29,38,47,65,104,127,166,168,173,215,],[24,42,24,24,24,172,24,24,172,172,42,24,]),'direct_declarator':([6,24,29,38,47,104,127,215,],[25,39,25,25,25,25,25,25,]),'init_declarator':([6,38,104,],[26,120,26,]),'compound_statement':([21,36,94,113,193,196,252,274,275,276,286,288,290,293,295,],[34,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'struct_declaration_list':([31,44,],[45,129,]),'struct_declaration':([31,44,45,129,],[46,46,131,131,]),'specifier_qualifier_list':([31,44,45,65,129,166,168,172,],[47,47,47,171,47,171,171,233,]),'enumerator_list':([32,52,],[49,138,]),'enumerator':([32,52,136,],[50,50,216,]),'initializer':([35,55,220,],[53,140,266,]),'assignment_expression':([35,36,40,55,65,94,113,118,141,153,155,156,162,166,168,193,196,198,199,200,201,203,220,252,259,260,270,274,275,276,277,278,279,286,288,290,293,295,],[54,119,122,54,119,119,119,119,221,119,119,227,119,119,119,119,119,254,119,119,119,119,54,119,119,119,281,119,119,119,119,119,119,119,119,119,119,119,]),'conditional_expression':([35,36,40,55,65,94,107,113,118,137,141,153,155,156,162,166,168,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[56,56,56,56,56,56,195,56,56,195,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,280,56,56,56,56,56,56,56,56,56,56,56,56,]),'unary_expression':([35,36,40,55,60,61,62,64,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,196,198,199,200,201,203,220,232,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[57,57,57,57,161,163,165,167,57,57,165,57,57,165,57,57,165,57,57,57,57,57,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,165,57,57,57,57,57,57,57,57,165,57,57,57,165,57,57,57,57,57,57,57,57,57,57,57,57,]),'logical_or_expression':([35,36,40,55,65,94,107,113,118,137,141,153,155,156,162,166,168,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'postfix_expression':([35,36,40,55,60,61,62,64,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,196,198,199,200,201,203,220,232,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,]),'unary_operator':([35,36,40,55,60,61,62,64,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,196,198,199,200,201,203,220,232,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'cast_expression':([35,36,40,55,62,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,196,198,199,200,201,203,220,232,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[63,63,63,63,164,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,248,249,250,63,63,63,63,63,63,63,63,272,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,]),'logical_and_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[66,66,66,66,66,66,66,66,66,66,66,66,223,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'primary_expression':([35,36,40,55,60,61,62,64,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,193,196,198,199,200,201,203,220,232,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,]),'inclusive_or_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,234,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'exclusive_or_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,235,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'and_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,236,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'equality_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,237,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'relational_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,238,239,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,]),'shift_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,240,241,242,243,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'additive_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,184,185,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,244,245,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'multiplicative_expression':([35,36,40,55,65,94,107,113,118,137,141,153,154,155,156,162,166,168,174,175,176,177,178,179,180,181,182,183,184,185,186,187,193,196,198,199,200,201,203,220,252,259,260,267,270,274,275,276,277,278,279,286,288,290,293,295,],[92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,246,247,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,]),'block_item_list':([36,],[94,]),'block_item':([36,94,],[95,192,]),'statement':([36,94,113,193,196,252,274,275,276,286,288,290,293,295,],[96,96,202,251,253,273,282,283,284,292,294,296,298,299,]),'labeled_statement':([36,94,113,193,196,252,274,275,276,286,288,290,293,295,],[98,98,98,98,98,98,98,98,98,98,98,98,98,98,]),'expression_statement':([36,94,113,193,196,203,252,259,260,274,275,276,286,288,290,293,295,],[100,100,100,100,100,259,100,278,279,100,100,100,100,100,100,100,100,]),'selection_statement':([36,94,113,193,196,252,274,275,276,286,288,290,293,295,],[101,101,101,101,101,101,101,101,101,101,101,101,101,101,]),'iteration_statement':([36,94,113,193,196,252,274,275,276,286,288,290,293,295,],[102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'jump_statement':([36,94,113,193,196,252,274,275,276,286,288,290,293,295,],[103,103,103,103,103,103,103,103,103,103,103,103,103,103,]),'expression':([36,65,94,113,118,153,155,162,166,168,193,196,199,200,201,203,252,259,260,274,275,276,277,278,279,286,288,290,293,295,],[109,169,109,109,208,222,224,169,169,169,109,109,255,256,257,109,109,109,109,109,109,109,285,287,289,109,109,109,109,109,]),'parameter_type_list':([41,],[124,]),'parameter_declaration':([41,211,],[126,263,]),'struct_declarator_list':([47,],[132,]),'struct_declarator':([47,215,],[133,264,]),'initializer_list':([55,],[139,]),'assignment_operator':([57,],[141,]),'type_name':([65,166,168,],[170,170,230,]),'constant_expression':([107,137,],[194,217,]),'argument_expression_list':([156,],[226,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',24),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',30),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',31),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',38),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',39),
  ('function_definition -> declaration_specifiers declarator compound_statement','function_definition',3,'p_function_definition','cparser.py',46),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',66),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',67),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',68),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',69),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',70),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',71),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',72),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',73),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',74),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',75),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',76),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',77),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',91),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',92),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',93),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',94),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',95),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',96),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',97),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',98),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',116),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',117),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',129),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',130),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',131),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',132),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',133),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',134),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',144),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',145),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',146),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',147),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',148),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',149),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',156),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',157),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',168),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',169),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',170),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',171),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',182),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',183),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',184),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',194),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',195),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',196),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',207),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',208),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',209),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',210),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',211),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',222),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',223),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',224),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',235),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',236),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',247),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',248),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',259),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',260),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',271),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',272),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',283),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',284),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',295),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',296),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',307),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',308),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',319),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',320),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',321),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',322),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',323),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',324),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',325),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',326),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',327),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',328),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',329),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',336),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',337),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',351),
  ('declaration -> declaration_specifiers SEMI_COLON','declaration',2,'p_declaration','cparser.py',359),
  ('declaration -> declaration_specifiers init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',360),
  ('declaration_specifiers -> type_specifier','declaration_specifiers',1,'p_declaration_specifiers','cparser.py',371),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',385),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',386),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',399),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',400),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',421),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',422),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',423),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',424),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',425),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',426),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',427),
  ('type_specifier -> struct_specifier','type_specifier',1,'p_type_specifier','cparser.py',428),
  ('type_specifier -> enum_specifier','type_specifier',1,'p_type_specifier','cparser.py',429),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',430),
  ('struct_specifier -> STRUCT IDENTIFIER L_BRACES struct_declaration_list R_BRACES','struct_specifier',5,'p_struct_specifier','cparser.py',437),
  ('struct_specifier -> STRUCT L_BRACES struct_declaration_list R_BRACES','struct_specifier',4,'p_struct_specifier','cparser.py',438),
  ('struct_specifier -> STRUCT IDENTIFIER','struct_specifier',2,'p_struct_specifier','cparser.py',439),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',455),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',456),
  ('struct_declaration -> specifier_qualifier_list struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',463),
  ('specifier_qualifier_list -> type_specifier','specifier_qualifier_list',1,'p_specifier_qualifier_list','cparser.py',470),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',485),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',486),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','cparser.py',493),
  ('enum_specifier -> ENUM L_BRACES enumerator_list R_BRACES','enum_specifier',4,'p_enum_specifier','cparser.py',502),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',503),
  ('enum_specifier -> ENUM IDENTIFIER','enum_specifier',2,'p_enum_specifier','cparser.py',504),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',511),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',512),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',519),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',520),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',535),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','cparser.py',536),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',546),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',547),
  ('direct_declarator -> direct_declarator L_SQBR assignment_expression R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',548),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',549),
  ('direct_declarator -> direct_declarator L_PAREN parameter_type_list R_PAREN','direct_declarator',4,'p_direct_declarator','cparser.py',550),
  ('direct_declarator -> direct_declarator L_PAREN R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',551),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',568),
  ('pointer -> MULTIPLY pointer','pointer',2,'p_pointer','cparser.py',569),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',588),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',589),
  ('parameter_declaration -> declaration_specifiers declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',602),
  ('type_name -> specifier_qualifier_list','type_name',1,'p_type_name','cparser.py',633),
  ('type_name -> pointer specifier_qualifier_list','type_name',2,'p_type_name','cparser.py',634),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',677),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',678),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',679),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',689),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',690),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',697),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',698),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',699),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',700),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',701),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',702),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',709),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',710),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',711),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',723),
  ('compound_statement -> L_BRACES block_item_list R_BRACES','compound_statement',3,'p_compound_statement','cparser.py',724),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',741),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',742),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',749),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',750),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',757),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',758),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',768),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',769),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',770),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',781),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',782),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',783),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',784),
  ('iteration_statement -> FOR L_PAREN declaration expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',785),
  ('iteration_statement -> FOR L_PAREN declaration expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',786),
  ('jump_statement -> GOTO IDENTIFIER SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',802),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',803),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',804),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',805),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',806),
]
