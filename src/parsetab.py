
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym\n                        | type_specifier declarator func_scope R_PAREN function_body pop_sym\n    \n    func_scope : L_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | NULL\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression L_SQBR expression R_SQBR\n                       | postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n                       | postfix_expression DOT IDENTIFIER\n                       | postfix_expression ARROW IDENTIFIER\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n                     | INCREMENT unary_expression\n                     | DECREMENT unary_expression\n                     | unary_operator cast_expression\n                     | SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n                              | multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | SHORT\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : struct_declarator\n\t                       | struct_declarator_list COMMA struct_declarator\n    \n    struct_declarator : declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : IDENTIFIER COLON statement\n                      | CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : GOTO IDENTIFIER SEMI_COLON\n\t               | CONTINUE SEMI_COLON\n\t               | BREAK SEMI_COLON\n\t               | RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON\n\t                 \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[9,9,-2,-4,-5,-3,-91,-92,9,-8,-93,-170,9,9,9,-171,9,9,9,9,-109,-171,-7,-170,-150,9,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,9,-151,-153,-157,-166,-167,-168,-111,9,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'CHAR':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[10,10,-2,-4,-5,-3,-91,-92,10,-8,-93,-170,10,10,10,-171,10,10,10,10,-109,-171,-7,-170,-150,10,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,10,-151,-153,-157,-166,-167,-168,-111,10,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'SHORT':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[11,11,-2,-4,-5,-3,-91,-92,11,-8,-93,-170,11,11,11,-171,11,11,11,11,-109,-171,-7,-170,-150,11,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,11,-151,-153,-157,-166,-167,-168,-111,11,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'INT':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[12,12,-2,-4,-5,-3,-91,-92,12,-8,-93,-170,12,12,12,-171,12,12,12,12,-109,-171,-7,-170,-150,12,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,12,-151,-153,-157,-166,-167,-168,-111,12,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'LONG':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[13,13,-2,-4,-5,-3,-91,-92,13,-8,-93,-170,13,13,13,-171,13,13,13,13,-109,-171,-7,-170,-150,13,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,13,-151,-153,-157,-166,-167,-168,-111,13,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'FLOAT':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[14,14,-2,-4,-5,-3,-91,-92,14,-8,-93,-170,14,14,14,-171,14,14,14,14,-109,-171,-7,-170,-150,14,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,14,-151,-153,-157,-166,-167,-168,-111,14,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'DOUBLE':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[15,15,-2,-4,-5,-3,-91,-92,15,-8,-93,-170,15,15,15,-171,15,15,15,15,-109,-171,-7,-170,-150,15,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,15,-151,-153,-157,-166,-167,-168,-111,15,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'STRUCT':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[16,16,-2,-4,-5,-3,-91,-92,46,-8,-93,-170,46,46,46,-171,193,46,46,46,-109,-171,-7,-170,-150,193,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,193,-151,-153,-157,-166,-167,-168,-111,193,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'ENUM':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[17,17,-2,-4,-5,-3,-91,-92,47,-8,-93,-170,47,47,47,-171,194,47,47,47,-109,-171,-7,-170,-150,194,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,194,-151,-153,-157,-166,-167,-168,-111,194,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'BOOL':([0,2,3,4,5,19,26,27,30,32,33,40,60,92,98,99,100,130,132,157,158,163,165,166,167,168,169,170,171,172,173,174,175,176,177,178,230,237,238,239,240,241,245,252,253,254,268,270,271,273,279,280,285,291,292,293,294,300,302,303,304,],[18,18,-2,-4,-5,-3,-91,-92,18,-8,-93,-170,18,18,18,-171,18,18,18,18,-109,-171,-7,-170,-150,18,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-110,-6,-148,18,-151,-153,-157,-166,-167,-168,-111,18,-145,-147,-165,-169,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'$end':([1,2,3,4,5,19,26,27,33,99,163,165,167,237,240,],[0,-1,-2,-4,-5,-3,-91,-92,-93,-171,-171,-7,-150,-6,-151,]),'MULTIPLY':([6,9,10,11,12,13,14,15,18,22,25,26,27,28,29,31,33,34,36,38,42,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,87,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,131,132,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,159,160,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,187,192,196,201,204,205,207,208,209,210,223,224,225,226,227,238,239,241,242,244,245,246,247,248,250,252,253,254,256,257,260,261,262,263,264,266,269,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[25,-98,-99,-100,-101,-102,-103,-104,-107,36,-126,-91,-92,-105,-106,65,-93,25,-127,25,25,65,-43,-31,65,65,65,-45,65,65,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,151,65,-105,-106,65,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,65,65,65,65,-27,-28,-32,65,-33,-34,-43,65,-35,65,25,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,25,65,-170,65,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,25,-9,65,65,65,65,-23,-25,-26,-18,65,65,36,151,151,-46,-47,-48,-148,65,-153,65,65,-157,65,65,65,65,-166,-167,-168,-105,-106,65,-22,-24,65,-36,-44,25,65,-145,65,-147,65,-165,-169,-146,65,65,65,65,65,-149,-158,-160,-161,65,65,-163,65,-159,-162,-164,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,18,22,23,25,26,27,28,29,31,33,34,36,38,41,42,46,47,50,55,56,57,59,60,64,65,66,67,68,69,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,159,160,162,166,168,169,170,171,172,173,174,175,176,177,178,179,181,187,189,192,193,194,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,256,257,260,263,269,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-128,-98,-99,-100,-101,-102,-103,-104,28,29,-107,37,37,-126,-91,-92,-105,-106,63,-93,-128,-127,-128,93,-128,101,102,63,63,63,63,63,63,-37,-38,-39,-40,-41,-42,180,-105,-106,63,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,63,63,63,63,204,205,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-128,63,93,-170,180,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-128,63,180,251,63,256,257,63,63,63,-148,180,-153,180,180,-157,63,63,63,63,-166,-167,-168,-105,-106,63,63,-128,180,-145,180,-147,63,-165,-169,-146,180,180,180,63,63,-149,-158,-160,-161,180,180,-163,180,-159,-162,-164,]),'L_PAREN':([6,9,10,11,12,13,14,15,18,20,22,23,25,26,27,28,29,31,33,34,35,36,37,38,39,42,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,100,101,102,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,155,156,159,160,166,168,169,170,171,172,173,174,175,176,177,178,179,180,181,184,185,186,187,188,192,196,201,204,205,207,208,209,228,238,239,241,242,244,245,246,247,248,250,252,253,254,256,257,260,261,262,263,269,270,271,272,273,277,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-128,-98,-99,-100,-101,-102,-103,-104,-107,32,38,38,-126,-91,-92,-105,-106,60,-93,-128,-120,-127,-122,-128,-121,-128,60,120,126,126,130,132,60,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,60,-105,-106,60,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,60,130,60,60,-27,-28,60,60,60,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,-125,-123,-128,130,-170,60,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-128,-9,130,246,247,248,60,250,60,60,-23,-25,-26,-18,60,130,-124,-148,60,-153,60,60,-157,60,60,60,60,-166,-167,-168,-105,-106,130,-22,-24,60,-128,60,-145,60,-147,289,60,-165,-169,-146,60,60,60,60,60,-149,-158,-160,-161,60,60,-163,60,-159,-162,-164,]),'SEMI_COLON':([7,8,20,21,24,26,27,33,35,37,39,48,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,100,123,124,125,127,128,129,131,135,155,156,161,166,168,169,170,171,172,173,174,175,176,177,178,180,183,187,190,191,192,195,197,199,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,231,232,233,238,239,241,242,244,245,250,251,252,253,254,255,258,261,262,264,265,266,267,270,271,272,273,278,279,280,281,283,285,286,287,288,291,292,293,294,296,298,299,300,301,302,303,304,],[26,27,-96,33,-94,-91,-92,-93,-120,-122,-121,-97,-134,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-95,-96,178,-27,-28,-32,-33,-34,-43,-35,-88,-125,-123,-115,-170,178,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-9,245,178,252,253,254,-135,-76,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-124,268,-112,-114,-148,178,-153,178,178,-157,178,279,-166,-167,-168,280,-136,-22,-24,-36,-89,-44,-108,178,-145,178,-147,178,-165,-169,-74,-113,-146,178,178,178,-149,-158,-160,-161,178,178,303,-163,178,-159,-162,-164,]),'R_PAREN':([9,10,11,12,13,14,15,18,25,30,32,35,36,37,39,43,45,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,96,101,102,120,123,124,125,127,128,129,131,133,134,135,136,155,156,164,178,197,199,201,202,203,204,205,206,207,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,245,261,262,264,265,266,274,275,276,281,282,290,295,297,],[-98,-99,-100,-101,-102,-103,-104,-107,-126,44,-8,-120,-127,-122,-121,97,-129,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,156,-131,-105,-106,201,-27,-28,-32,-33,-34,-43,-35,207,209,-88,-132,-125,-123,-130,-156,-76,-72,-23,262,-29,-25,-26,264,-18,-133,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-124,-157,-22,-24,-36,-89,-44,286,287,288,-74,-30,296,299,301,]),'COMMA':([20,21,24,35,37,39,43,45,48,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,93,94,95,96,103,104,123,124,125,127,128,129,131,133,135,155,156,164,180,183,195,197,198,199,200,201,202,203,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,231,232,233,234,235,236,255,258,259,261,262,264,265,266,274,275,276,281,282,283,295,297,],[-96,34,-94,-120,-122,-121,98,-129,-97,-134,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-95,-96,-118,162,-116,-131,196,-137,-27,-28,-32,-33,-34,-43,-35,208,-88,-125,-123,-130,-9,208,-135,-76,208,-72,208,-23,263,-29,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-124,269,-112,-114,-119,-90,-117,208,-136,-138,-22,-24,-36,-89,-44,208,208,208,-74,-30,-113,208,208,]),'ASSIGNMENT':([20,35,37,39,52,54,62,63,71,72,73,74,75,76,77,78,79,80,89,93,123,124,125,127,128,129,131,155,156,180,201,204,205,207,228,261,262,264,266,],[31,-120,-122,-121,106,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,31,160,-27,-28,-32,-33,-34,-43,-35,-125,-123,-9,-23,-25,-26,-18,-124,-22,-24,-36,-44,]),'R_BRACES':([26,27,33,49,51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,93,94,95,100,103,104,123,124,125,127,128,129,131,157,158,166,168,169,170,171,172,173,174,175,176,177,178,195,196,197,199,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,229,230,234,235,236,238,241,245,252,253,254,258,259,261,262,264,266,268,270,271,273,279,280,281,284,285,291,292,293,294,300,302,303,304,],[-91,-92,-93,-134,-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-118,161,-116,167,195,-137,-27,-28,-32,-33,-34,-43,-35,-171,-109,238,240,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-135,258,-76,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,267,-110,-119,-90,-117,-148,-153,-157,-166,-167,-168,-136,-138,-22,-24,-36,-44,-111,-171,-145,-147,-165,-169,-74,291,-146,-149,-158,-160,-161,-163,-159,-162,-164,]),'CASE':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,181,-170,181,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,181,-148,181,-153,181,181,-157,-166,-167,-168,181,-145,181,-147,-165,-169,-146,181,181,181,-149,-158,-160,-161,181,181,-163,181,-159,-162,-164,]),'DEFAULT':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,182,-170,182,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,182,-148,182,-153,182,182,-157,-166,-167,-168,182,-145,182,-147,-165,-169,-146,182,182,182,-149,-158,-160,-161,182,182,-163,182,-159,-162,-164,]),'L_BRACES':([26,27,28,29,31,33,44,50,97,100,166,168,169,170,171,172,173,174,175,176,177,178,187,196,238,239,241,242,244,245,252,253,254,256,257,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,40,41,50,-93,100,50,100,166,-170,166,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,166,50,-148,166,-153,166,166,-157,-166,-167,-168,40,41,166,-145,166,-147,-165,-169,-146,166,166,166,-149,-158,-160,-161,166,166,-163,166,-159,-162,-164,]),'IF':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,184,-170,184,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,184,-148,184,-153,184,184,-157,-166,-167,-168,184,-145,184,-147,-165,-169,-146,184,184,184,-149,-158,-160,-161,184,184,-163,184,-159,-162,-164,]),'SWITCH':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,185,-170,185,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,185,-148,185,-153,185,185,-157,-166,-167,-168,185,-145,185,-147,-165,-169,-146,185,185,185,-149,-158,-160,-161,185,185,-163,185,-159,-162,-164,]),'WHILE':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,249,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,186,-170,186,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,186,-148,186,-153,186,186,-157,277,-166,-167,-168,186,-145,186,-147,-165,-169,-146,186,186,186,-149,-158,-160,-161,186,186,-163,186,-159,-162,-164,]),'DO':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,187,-170,187,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,187,-148,187,-153,187,187,-157,-166,-167,-168,187,-145,187,-147,-165,-169,-146,187,187,187,-149,-158,-160,-161,187,187,-163,187,-159,-162,-164,]),'FOR':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,188,-170,188,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,188,-148,188,-153,188,188,-157,-166,-167,-168,188,-145,188,-147,-165,-169,-146,188,188,188,-149,-158,-160,-161,188,188,-163,188,-159,-162,-164,]),'GOTO':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,189,-170,189,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,189,-148,189,-153,189,189,-157,-166,-167,-168,189,-145,189,-147,-165,-169,-146,189,189,189,-149,-158,-160,-161,189,189,-163,189,-159,-162,-164,]),'CONTINUE':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,190,-170,190,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,190,-148,190,-153,190,190,-157,-166,-167,-168,190,-145,190,-147,-165,-169,-146,190,190,190,-149,-158,-160,-161,190,190,-163,190,-159,-162,-164,]),'BREAK':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,191,-170,191,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,191,-148,191,-153,191,191,-157,-166,-167,-168,191,-145,191,-147,-165,-169,-146,191,191,191,-149,-158,-160,-161,191,191,-163,191,-159,-162,-164,]),'RETURN':([26,27,33,100,166,168,169,170,171,172,173,174,175,176,177,178,187,238,239,241,242,244,245,252,253,254,270,271,272,273,279,280,285,286,287,288,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,-93,192,-170,192,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,192,-148,192,-153,192,192,-157,-166,-167,-168,192,-145,192,-147,-165,-169,-146,192,192,192,-149,-158,-160,-161,192,192,-163,192,-159,-162,-164,]),'INCREMENT':([26,27,31,33,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,181,187,192,196,201,204,205,207,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,261,262,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,55,-93,55,123,55,55,55,55,55,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,55,55,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,55,55,55,55,-27,-28,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-170,55,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-9,55,55,55,55,-23,-25,-26,-18,55,55,-148,55,-153,55,55,-157,55,55,55,55,-166,-167,-168,55,-22,-24,55,55,-145,55,-147,55,-165,-169,-146,55,55,55,55,55,-149,-158,-160,-161,55,55,-163,55,-159,-162,-164,]),'DECREMENT':([26,27,31,33,50,54,55,56,57,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,181,187,192,196,201,204,205,207,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,261,262,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,56,-93,56,124,56,56,56,56,56,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,56,56,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,56,56,56,56,-27,-28,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,-170,56,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-9,56,56,56,56,-23,-25,-26,-18,56,56,-148,56,-153,56,56,-157,56,56,56,56,-166,-167,-168,56,-22,-24,56,56,-145,56,-147,56,-165,-169,-146,56,56,56,56,56,-149,-158,-160,-161,56,56,-163,56,-159,-162,-164,]),'SIZEOF':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,59,-93,59,59,59,59,59,59,-37,-38,-39,-40,-41,-42,59,59,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-170,59,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,59,59,59,59,59,59,-148,59,-153,59,59,-157,59,59,59,59,-166,-167,-168,59,59,59,-145,59,-147,59,-165,-169,-146,59,59,59,59,59,-149,-158,-160,-161,59,59,-163,59,-159,-162,-164,]),'BITWISE_AND':([26,27,31,33,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,82,83,84,85,86,87,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,181,187,192,196,201,204,205,207,208,209,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,238,239,241,242,244,245,246,247,248,250,252,253,254,260,261,262,263,264,266,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,64,-93,64,-43,-31,64,64,64,-45,64,64,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,140,-63,-60,-55,-52,-49,64,64,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,64,64,64,64,-27,-28,-32,64,-33,-34,-43,64,-35,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-170,64,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-9,64,64,64,64,-23,-25,-26,-18,64,64,140,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-148,64,-153,64,64,-157,64,64,64,64,-166,-167,-168,64,-22,-24,64,-36,-44,64,-145,64,-147,64,-165,-169,-146,64,64,64,64,64,-149,-158,-160,-161,64,64,-163,64,-159,-162,-164,]),'ADD':([26,27,31,33,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,86,87,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,181,187,192,196,201,204,205,207,208,209,221,222,223,224,225,226,227,238,239,241,242,244,245,246,247,248,250,252,253,254,260,261,262,263,264,266,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,66,-93,66,-43,-31,66,66,66,-45,66,66,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,149,-49,66,66,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,66,66,66,66,-27,-28,-32,66,-33,-34,-43,66,-35,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-170,66,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-9,66,66,66,66,-23,-25,-26,-18,66,66,149,149,-50,-51,-46,-47,-48,-148,66,-153,66,66,-157,66,66,66,66,-166,-167,-168,66,-22,-24,66,-36,-44,66,-145,66,-147,66,-165,-169,-146,66,66,66,66,66,-149,-158,-160,-161,66,66,-163,66,-159,-162,-164,]),'SUBSTRACT':([26,27,31,33,50,52,54,55,56,57,58,59,60,62,63,64,65,66,67,68,69,71,72,73,74,75,76,77,78,79,80,86,87,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,131,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,180,181,187,192,196,201,204,205,207,208,209,221,222,223,224,225,226,227,238,239,241,242,244,245,246,247,248,250,252,253,254,260,261,262,263,264,266,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,67,-93,67,-43,-31,67,67,67,-45,67,67,-21,-9,-37,-38,-39,-40,-41,-42,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,150,-49,67,67,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,67,67,67,67,-27,-28,-32,67,-33,-34,-43,67,-35,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-170,67,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,-9,67,67,67,67,-23,-25,-26,-18,67,67,150,150,-50,-51,-46,-47,-48,-148,67,-153,67,67,-157,67,67,67,67,-166,-167,-168,67,-22,-24,67,-36,-44,67,-145,67,-147,67,-165,-169,-146,67,67,67,67,67,-149,-158,-160,-161,67,67,-163,67,-159,-162,-164,]),'BITWISE_ONE_COMPLEMENT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,68,-93,68,68,68,68,68,68,-37,-38,-39,-40,-41,-42,68,68,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-170,68,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,68,68,68,68,68,68,-148,68,-153,68,68,-157,68,68,68,68,-166,-167,-168,68,68,68,-145,68,-147,68,-165,-169,-146,68,68,68,68,68,-149,-158,-160,-161,68,68,-163,68,-159,-162,-164,]),'LOGICAL_NOT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,69,-93,69,69,69,69,69,69,-37,-38,-39,-40,-41,-42,69,69,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,-170,69,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,69,69,69,69,69,69,-148,69,-153,69,69,-157,69,69,69,69,-166,-167,-168,69,69,69,-145,69,-147,69,-165,-169,-146,69,69,69,69,69,-149,-158,-160,-161,69,69,-163,69,-159,-162,-164,]),'NULL':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,71,-93,71,71,71,71,71,71,-37,-38,-39,-40,-41,-42,71,71,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-170,71,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,71,71,71,71,71,71,-148,71,-153,71,71,-157,71,71,71,71,-166,-167,-168,71,71,71,-145,71,-147,71,-165,-169,-146,71,71,71,71,71,-149,-158,-160,-161,71,71,-163,71,-159,-162,-164,]),'INT_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,90,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,72,-93,72,72,72,72,72,72,-37,-38,-39,-40,-41,-42,154,72,72,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-170,72,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,72,72,72,72,72,72,-148,72,-153,72,72,-157,72,72,72,72,-166,-167,-168,72,72,72,-145,72,-147,72,-165,-169,-146,72,72,72,72,72,-149,-158,-160,-161,72,72,-163,72,-159,-162,-164,]),'HEX_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,73,-93,73,73,73,73,73,73,-37,-38,-39,-40,-41,-42,73,73,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-170,73,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,73,73,73,73,73,73,-148,73,-153,73,73,-157,73,73,73,73,-166,-167,-168,73,73,73,-145,73,-147,73,-165,-169,-146,73,73,73,73,73,-149,-158,-160,-161,73,73,-163,73,-159,-162,-164,]),'OCTAL_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,74,-93,74,74,74,74,74,74,-37,-38,-39,-40,-41,-42,74,74,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-170,74,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,74,74,74,74,74,74,-148,74,-153,74,74,-157,74,74,74,74,-166,-167,-168,74,74,74,-145,74,-147,74,-165,-169,-146,74,74,74,74,74,-149,-158,-160,-161,74,74,-163,74,-159,-162,-164,]),'EXPONENT_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,75,-93,75,75,75,75,75,75,-37,-38,-39,-40,-41,-42,75,75,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-170,75,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,75,75,75,75,75,75,-148,75,-153,75,75,-157,75,75,75,75,-166,-167,-168,75,75,75,-145,75,-147,75,-165,-169,-146,75,75,75,75,75,-149,-158,-160,-161,75,75,-163,75,-159,-162,-164,]),'REAL_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,76,-93,76,76,76,76,76,76,-37,-38,-39,-40,-41,-42,76,76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-170,76,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,76,76,76,76,76,76,-148,76,-153,76,76,-157,76,76,76,76,-166,-167,-168,76,76,76,-145,76,-147,76,-165,-169,-146,76,76,76,76,76,-149,-158,-160,-161,76,76,-163,76,-159,-162,-164,]),'CHAR_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,77,-93,77,77,77,77,77,77,-37,-38,-39,-40,-41,-42,77,77,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-170,77,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,77,77,77,77,77,77,-148,77,-153,77,77,-157,77,77,77,77,-166,-167,-168,77,77,77,-145,77,-147,77,-165,-169,-146,77,77,77,77,77,-149,-158,-160,-161,77,77,-163,77,-159,-162,-164,]),'STR_CONSTANT':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,78,-93,78,78,78,78,78,78,-37,-38,-39,-40,-41,-42,78,78,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-170,78,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,78,78,78,78,78,78,-148,78,-153,78,78,-157,78,78,78,78,-166,-167,-168,78,78,78,-145,78,-147,78,-165,-169,-146,78,78,78,78,78,-149,-158,-160,-161,78,78,-163,78,-159,-162,-164,]),'TRUE':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,79,-93,79,79,79,79,79,79,-37,-38,-39,-40,-41,-42,79,79,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-170,79,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,79,79,79,79,79,79,-148,79,-153,79,79,-157,79,79,79,79,-166,-167,-168,79,79,79,-145,79,-147,79,-165,-169,-146,79,79,79,79,79,-149,-158,-160,-161,79,79,-163,79,-159,-162,-164,]),'FALSE':([26,27,31,33,50,55,56,57,59,60,64,65,66,67,68,69,100,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,166,168,169,170,171,172,173,174,175,176,177,178,181,187,192,196,208,209,238,239,241,242,244,245,246,247,248,250,252,253,254,260,263,270,271,272,273,278,279,280,285,286,287,288,289,290,291,292,293,294,296,298,300,301,302,303,304,],[-91,-92,80,-93,80,80,80,80,80,80,-37,-38,-39,-40,-41,-42,80,80,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,-87,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-170,80,-152,-154,-155,-139,-140,-141,-142,-143,-144,-156,80,80,80,80,80,80,-148,80,-153,80,80,-157,80,80,80,80,-166,-167,-168,80,80,80,-145,80,-147,80,-165,-169,-146,80,80,80,80,80,-149,-158,-160,-161,80,80,-163,80,-159,-162,-164,]),'L_SQBR':([35,37,39,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,155,156,180,201,204,205,207,228,261,262,],[90,-122,90,119,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-125,-123,-9,-23,-25,-26,-18,-124,-22,-24,]),'COLON':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,125,127,128,129,131,135,180,182,197,198,199,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,235,243,261,262,264,265,266,281,],[-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-88,242,244,-76,260,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-90,272,-22,-24,-36,-89,-44,-74,]),'R_SQBR':([51,52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,90,123,124,125,127,128,129,131,135,154,197,199,200,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,265,266,281,],[-75,-43,-73,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,155,-27,-28,-32,-33,-34,-43,-35,-88,228,-76,-72,261,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-89,-44,-74,]),'DIVIDE':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,87,123,124,125,127,128,129,131,180,201,204,205,207,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,152,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,152,152,-46,-47,-48,-22,-24,-36,-44,]),'MODULUS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,87,123,124,125,127,128,129,131,180,201,204,205,207,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,153,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,153,153,-46,-47,-48,-22,-24,-36,-44,]),'LEFT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,147,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,147,147,147,147,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'RIGHT_SHIFT':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,148,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,148,148,148,148,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LESS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,143,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,143,143,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'GREATER':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,144,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,144,144,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LESS_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,145,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,145,145,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'GREATER_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,146,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,146,146,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,83,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,141,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,141,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'NOT_EQUALS':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,83,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,142,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,142,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'BITWISE_XOR':([52,54,58,62,63,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,139,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,139,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'BITWISE_OR':([52,54,58,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,125,127,128,129,131,180,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,-21,-9,138,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,138,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LOGICAL_AND':([52,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,125,127,128,129,131,180,199,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,-31,-45,137,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,137,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'QUES_MARK':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,125,127,128,129,131,180,199,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,117,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'LOGICAL_OR':([52,53,54,58,61,62,63,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,123,124,125,127,128,129,131,180,199,201,204,205,207,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,261,262,264,266,],[-43,118,-31,-45,-71,-21,-9,-69,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-67,-65,-63,-60,-55,-52,-49,-27,-28,-32,-33,-34,-43,-35,-9,-72,-23,-25,-26,-18,-70,-68,-66,-64,-61,-62,-56,-57,-58,-59,-53,-54,-50,-51,-46,-47,-48,-22,-24,-36,-44,]),'MULTIPLY_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[107,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'DIVIDE_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[108,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'MODULUS_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[109,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'ADD_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[110,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'SUBSTRACT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[111,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'LEFT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[112,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'RIGHT_SHIFT_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[113,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'BITWISE_AND_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[114,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'BITWISE_XOR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[115,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'BITWISE_OR_ASSIGNMENT':([52,54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,125,127,128,129,131,180,201,204,205,207,261,262,264,266,],[116,-31,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-32,-33,-34,-43,-35,-9,-23,-25,-26,-18,-22,-24,-36,-44,]),'DOT':([54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,180,201,204,205,207,261,262,],[121,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-9,-23,-25,-26,-18,-22,-24,]),'ARROW':([54,62,63,71,72,73,74,75,76,77,78,79,80,123,124,180,201,204,205,207,261,262,],[122,-21,-9,-10,-11,-12,-13,-14,-15,-16,-17,-19,-20,-27,-28,-9,-23,-25,-26,-18,-22,-24,]),'ELSE':([172,173,174,175,176,177,178,238,245,252,253,254,271,273,279,280,285,291,292,293,294,300,302,303,304,],[-139,-140,-141,-142,-143,-144,-156,-148,-157,-166,-167,-168,-145,-147,-165,-169,-146,-149,298,-160,-161,-163,-159,-162,-164,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,19,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,100,168,239,270,],[5,5,171,171,171,171,]),'type_specifier':([0,2,30,60,92,98,100,130,132,157,168,239,270,],[6,6,42,136,159,42,179,136,136,159,179,179,179,]),'struct_specifier':([0,2,100,168,239,270,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,100,168,239,270,],[8,8,8,8,8,8,]),'declarator':([6,34,38,42,159,179,269,],[20,89,91,96,233,89,233,]),'init_declarator_list':([6,179,],[21,21,]),'pointer':([6,34,38,42,136,159,179,269,],[22,22,22,22,210,22,22,22,]),'no_pointer':([6,34,38,42,159,179,269,],[23,23,23,23,23,23,23,]),'init_declarator':([6,34,179,],[24,88,24,]),'func_scope':([20,],[30,]),'direct_declarator':([22,23,],[35,39,]),'parameter_type_list':([30,],[43,]),'parameter_declaration':([30,98,],[45,164,]),'initializer':([31,50,196,],[48,104,259,]),'assignment_expression':([31,50,60,100,105,117,119,120,126,130,132,168,187,192,196,208,239,242,244,246,247,248,250,263,270,272,278,286,287,288,289,290,296,298,301,],[49,49,135,135,197,135,135,203,135,135,135,135,135,135,49,265,135,135,135,135,135,135,135,282,135,135,135,135,135,135,135,135,135,135,135,]),'conditional_expression':([31,50,60,100,105,117,119,120,126,130,132,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[51,51,51,51,51,51,51,51,51,51,51,235,51,235,51,51,51,51,51,51,51,51,51,51,51,281,51,51,51,51,51,51,51,51,51,51,51,51,]),'unary_expression':([31,50,55,56,57,59,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,181,187,192,196,208,209,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[52,52,125,127,129,131,52,52,52,52,129,52,52,52,52,52,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,129,52,129,52,52,52,52,129,52,52,52,52,52,52,52,129,52,52,52,52,52,52,52,52,52,52,52,52,]),'logical_or_expression':([31,50,60,100,105,117,119,120,126,130,132,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'postfix_expression':([31,50,55,56,57,59,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,181,187,192,196,208,209,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,]),'unary_operator':([31,50,55,56,57,59,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,181,187,192,196,208,209,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'cast_expression':([31,50,57,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,181,187,192,196,208,209,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[58,58,128,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,225,226,227,58,58,58,58,58,58,58,266,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,]),'logical_and_expression':([31,50,60,100,105,117,118,119,120,126,130,132,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[61,61,61,61,61,61,199,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'primary_expression':([31,50,55,56,57,59,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,160,168,181,187,192,196,208,209,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,]),'inclusive_or_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[70,70,70,70,70,70,70,70,70,70,70,70,211,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'exclusive_or_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,138,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[81,81,81,81,81,81,81,81,81,81,81,81,81,212,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'and_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,138,139,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,213,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'equality_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,138,139,140,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,214,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'relational_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,215,216,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'shift_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,217,218,219,220,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'additive_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,221,222,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,]),'multiplicative_expression':([31,50,60,100,105,117,118,119,120,126,130,132,137,138,139,140,141,142,143,144,145,146,147,148,149,150,160,168,181,187,192,196,208,239,242,244,246,247,248,250,260,263,270,272,278,286,287,288,289,290,296,298,301,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,223,224,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'add_sym':([40,166,],[92,239,]),'enumerator_list':([41,],[94,]),'enumerator':([41,162,],[95,236,]),'function_body':([44,97,],[99,163,]),'initializer_list':([50,],[103,]),'assignment_operator':([52,],[105,]),'expression':([60,100,117,119,126,130,132,168,187,192,239,242,244,246,247,248,250,270,272,278,286,287,288,289,290,296,298,301,],[133,183,198,200,133,133,133,183,183,255,183,183,183,274,275,276,183,183,183,183,183,183,183,295,297,183,183,183,]),'type_name':([60,130,132,],[134,134,206,]),'struct_declaration_list':([92,],[157,]),'struct_declaration':([92,157,],[158,230,]),'pop_sym':([99,157,163,270,],[165,229,237,284,]),'block_item_list':([100,239,],[168,270,]),'block_item':([100,168,239,270,],[169,241,169,241,]),'statement':([100,168,187,239,242,244,270,272,286,287,288,296,298,301,],[170,170,249,170,271,273,170,285,292,293,294,300,302,304,]),'labeled_statement':([100,168,187,239,242,244,270,272,286,287,288,296,298,301,],[172,172,172,172,172,172,172,172,172,172,172,172,172,172,]),'compound_statement':([100,168,187,239,242,244,270,272,286,287,288,296,298,301,],[173,173,173,173,173,173,173,173,173,173,173,173,173,173,]),'expression_statement':([100,168,187,239,242,244,250,270,272,278,286,287,288,296,298,301,],[174,174,174,174,174,174,278,174,174,290,174,174,174,174,174,174,]),'selection_statement':([100,168,187,239,242,244,270,272,286,287,288,296,298,301,],[175,175,175,175,175,175,175,175,175,175,175,175,175,175,]),'iteration_statement':([100,168,187,239,242,244,270,272,286,287,288,296,298,301,],[176,176,176,176,176,176,176,176,176,176,176,176,176,176,]),'jump_statement':([100,168,187,239,242,244,270,272,286,287,288,296,298,301,],[177,177,177,177,177,177,177,177,177,177,177,177,177,177,]),'argument_expression_list':([120,],[202,]),'struct_declarator_list':([159,],[231,]),'struct_declarator':([159,269,],[232,283,]),'constant_expression':([160,181,],[234,243,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',26),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',32),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',33),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',40),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',41),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',48),
  ('function_definition -> type_specifier declarator func_scope R_PAREN function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',49),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',68),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',74),
  ('primary_expression -> NULL','primary_expression',1,'p_primary_expression','cparser.py',75),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',76),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',77),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',78),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',79),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',80),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',81),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',82),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',83),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',84),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',85),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',99),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression','cparser.py',100),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression','cparser.py',101),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression','cparser.py',102),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',103),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression','cparser.py',104),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',105),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',106),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',124),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',125),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',137),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',138),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression','cparser.py',139),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','cparser.py',140),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression','cparser.py',141),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression','cparser.py',142),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',152),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',153),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',154),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',155),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',156),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',157),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',164),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',165),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',176),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',177),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',178),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',179),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',190),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',191),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',192),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',202),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',203),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',204),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',215),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',216),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',217),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',218),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',219),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',230),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',231),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',232),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',243),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',244),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',255),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',256),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',267),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',268),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',279),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',280),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',291),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',292),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',303),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',304),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',315),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',316),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',327),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',328),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',329),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',330),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',331),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',332),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',333),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',334),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',335),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',336),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',337),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',344),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',345),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',359),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',367),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',368),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',369),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',382),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',383),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',398),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',399),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',410),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',411),
  ('type_specifier -> SHORT','type_specifier',1,'p_type_specifier','cparser.py',412),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',413),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',414),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',415),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',416),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',417),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',418),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',419),
  ('struct_specifier -> STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES','struct_specifier',7,'p_struct_specifier','cparser.py',432),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',441),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',442),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',449),
  ('struct_declarator_list -> struct_declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',457),
  ('struct_declarator_list -> struct_declarator_list COMMA struct_declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',458),
  ('struct_declarator -> declarator','struct_declarator',1,'p_struct_declarator','cparser.py',465),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',474),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',481),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',482),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',489),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',490),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',498),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',499),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',514),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',515),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',516),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',517),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',539),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',540),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',563),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',577),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',578),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',591),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',607),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',608),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',620),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',621),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',622),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',632),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',633),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',640),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',641),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',642),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',643),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',644),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',645),
  ('labeled_statement -> IDENTIFIER COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',652),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',653),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',654),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',666),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',667),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',677),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',678),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',688),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',689),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',696),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',697),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',704),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',705),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',715),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',716),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',717),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',728),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',729),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',730),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',731),
  ('jump_statement -> GOTO IDENTIFIER SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',747),
  ('jump_statement -> CONTINUE SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',748),
  ('jump_statement -> BREAK SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',749),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',750),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',751),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',762),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',768),
]
