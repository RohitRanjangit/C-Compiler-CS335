
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'programADD ADD_ASSIGNMENT ARROW ASSIGNMENT AUTO BITWISE_AND BITWISE_AND_ASSIGNMENT BITWISE_ONE_COMPLEMENT BITWISE_OR BITWISE_OR_ASSIGNMENT BITWISE_XOR BITWISE_XOR_ASSIGNMENT BOOL BREAK CASE CHAR CHAR_CONSTANT COLON COMMA CONST CONTINUE DECREMENT DEFAULT DIVIDE DIVIDE_ASSIGNMENT DO DOT DOUBLE ELSE ENUM EQUALS EXPONENT_CONSTANT EXTERN FALSE FLOAT FOR GOTO GREATER GREATER_EQUALS HEX_CONSTANT IDENTIFIER IF INCREMENT INT INT_CONSTANT LEFT_SHIFT LEFT_SHIFT_ASSIGNMENT LESS LESS_EQUALS LOGICAL_AND LOGICAL_NOT LOGICAL_OR LONG L_BRACES L_PAREN L_SQBR MODULUS MODULUS_ASSIGNMENT MULTIPLY MULTIPLY_ASSIGNMENT NOT_EQUALS NULL OCTAL_CONSTANT QUES_MARK REAL_CONSTANT REGISTER RETURN RIGHT_SHIFT RIGHT_SHIFT_ASSIGNMENT R_BRACES R_PAREN R_SQBR SEMI_COLON SHORT SIGNED SIZEOF STATIC STRUCT STR_CONSTANT SUBSTRACT SUBSTRACT_ASSIGNMENT SWITCH TRUE TYPEDEF UNION UNSIGNED VOID VOLATILE WHILEprogram : translation_unit\n    translation_unit : external_declaration\n                     | translation_unit external_declaration\n    \n    external_declaration : function_definition\n                         | declaration\n    \n    function_definition : type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym\n                        | type_specifier declarator func_scope R_PAREN function_body pop_sym\n    \n    func_scope : L_PAREN\n    \n    primary_expression : IDENTIFIER\n                       | INT_CONSTANT\n                       | HEX_CONSTANT\n                       | OCTAL_CONSTANT\n                       | EXPONENT_CONSTANT\n                       | REAL_CONSTANT\n                       | CHAR_CONSTANT\n                       | STR_CONSTANT\n                       | L_PAREN expression R_PAREN\n                       | TRUE\n                       | FALSE\n    \n    postfix_expression : primary_expression\n                       | postfix_expression INCREMENT\n                       | postfix_expression DECREMENT\n\n     \n    postfix_expression : postfix_expression L_SQBR expression R_SQBR\n    \n     \n    postfix_expression : postfix_expression L_PAREN R_PAREN\n                       | postfix_expression L_PAREN argument_expression_list R_PAREN\n    \n     \n    postfix_expression : postfix_expression DOT IDENTIFIER\n\n     \n    postfix_expression : postfix_expression ARROW IDENTIFIER\n    \n    \n    argument_expression_list : assignment_expression\n\t                         | argument_expression_list COMMA assignment_expression\n    \n    unary_expression : postfix_expression\n    \n    unary_expression : INCREMENT unary_expression\n                     | DECREMENT unary_expression\n    \n    unary_expression : unary_operator cast_expression\n    \n    unary_expression : SIZEOF unary_expression\n                     | SIZEOF L_PAREN type_name R_PAREN\n    \n    unary_operator : BITWISE_AND\n                   | MULTIPLY\n                   | ADD\n                   | SUBSTRACT\n                   | BITWISE_ONE_COMPLEMENT\n                   | LOGICAL_NOT\n    \n    cast_expression : unary_expression\n\t                | L_PAREN type_name R_PAREN cast_expression\n    \n    multiplicative_expression : cast_expression\n                              | multiplicative_expression MULTIPLY cast_expression\n                              | multiplicative_expression DIVIDE cast_expression\n    \n    multiplicative_expression : multiplicative_expression MODULUS cast_expression\n    \n    additive_expression : multiplicative_expression\n                        | additive_expression ADD multiplicative_expression\n                        | additive_expression SUBSTRACT multiplicative_expression\n    \n    shift_expression : additive_expression\n                     | shift_expression LEFT_SHIFT additive_expression\n                     | shift_expression RIGHT_SHIFT additive_expression\n    \n    relational_expression : shift_expression\n                          | relational_expression LESS shift_expression\n                          | relational_expression GREATER shift_expression\n                          | relational_expression LESS_EQUALS shift_expression\n                          | relational_expression GREATER_EQUALS shift_expression\n    \n    equality_expression : relational_expression\n                        | equality_expression EQUALS relational_expression\n                        | equality_expression NOT_EQUALS relational_expression\n    \n    and_expression : equality_expression\n\t               | and_expression BITWISE_AND equality_expression\n    \n    exclusive_or_expression : and_expression\n\t                        | exclusive_or_expression BITWISE_XOR and_expression\n    \n    inclusive_or_expression : exclusive_or_expression\n\t                        | inclusive_or_expression BITWISE_OR exclusive_or_expression\n    \n    logical_and_expression : inclusive_or_expression\n\t                       | logical_and_expression LOGICAL_AND inclusive_or_expression\n    \n    logical_or_expression : logical_and_expression\n\t                      | logical_or_expression LOGICAL_OR logical_and_expression\n    \n    conditional_expression : logical_or_expression\n\t                       | logical_or_expression QUES_MARK expression COLON conditional_expression\n    \n    assignment_expression : conditional_expression\n\t                      | unary_expression assignment_operator assignment_expression\n    \n    assignment_operator : ASSIGNMENT\n                        | MULTIPLY_ASSIGNMENT\n                        | DIVIDE_ASSIGNMENT\n                        | MODULUS_ASSIGNMENT\n                        | ADD_ASSIGNMENT\n                        | SUBSTRACT_ASSIGNMENT\n                        | LEFT_SHIFT_ASSIGNMENT\n                        | RIGHT_SHIFT_ASSIGNMENT\n                        | BITWISE_AND_ASSIGNMENT\n                        | BITWISE_XOR_ASSIGNMENT\n                        | BITWISE_OR_ASSIGNMENT\n    \n    expression : assignment_expression\n\t           | expression COMMA assignment_expression\n    \n    constant_expression : conditional_expression\n    \n    declaration : struct_specifier SEMI_COLON\n                | enum_specifier SEMI_COLON\n\t            | type_specifier init_declarator_list SEMI_COLON\n    \n    init_declarator_list : init_declarator\n\t                     | init_declarator_list COMMA init_declarator\n    \n    init_declarator : declarator\n\t                | declarator ASSIGNMENT initializer\n    \n    type_specifier : VOID\n                   | CHAR\n                   | INT\n                   | LONG\n                   | FLOAT\n                   | DOUBLE\n                   | STRUCT IDENTIFIER\n                   | ENUM IDENTIFIER\n                   | BOOL\n    \n    struct_specifier : STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES\n    \n    struct_declaration_list : struct_declaration\n\t                        | struct_declaration_list struct_declaration\n    \n    struct_declaration : type_specifier struct_declarator_list SEMI_COLON\n    \n    struct_declarator_list : declarator\n\t                       | struct_declarator_list COMMA declarator\n    \n    enum_specifier : ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES\n    \n    enumerator_list : enumerator\n\t                | enumerator_list COMMA enumerator\n    \n    enumerator : IDENTIFIER\n\t           | IDENTIFIER ASSIGNMENT constant_expression\n    \n    declarator : pointer direct_declarator\n\t           | no_pointer direct_declarator\n    \n    direct_declarator : IDENTIFIER\n                      | L_PAREN declarator R_PAREN\n                      | direct_declarator L_SQBR INT_CONSTANT R_SQBR\n                      | direct_declarator L_SQBR R_SQBR\n    \n    pointer : MULTIPLY\n            | pointer MULTIPLY\n    \n    no_pointer : \n    \n    parameter_type_list : parameter_declaration\n\t                    | parameter_type_list COMMA parameter_declaration\n    \n    parameter_declaration : type_specifier declarator\n    \n    type_name : type_specifier\n\t          | type_specifier pointer\n    \n    initializer : assignment_expression\n\t            | L_BRACES initializer_list R_BRACES\n\t            | L_BRACES initializer_list COMMA R_BRACES\n    \n    initializer_list : initializer\n\t                 | initializer_list COMMA initializer\n    \n    statement : labeled_statement\n\t          | compound_statement\n\t          | expression_statement\n\t          | selection_statement\n\t          | iteration_statement\n\t          | jump_statement\n    \n    labeled_statement : CASE constant_expression COLON statement\n\t                  | DEFAULT COLON statement\n    \n    compound_statement : L_BRACES R_BRACES\n\t                   | L_BRACES add_sym block_item_list pop_sym R_BRACES\n    \n    function_body : L_BRACES R_BRACES\n\t              | L_BRACES block_item_list R_BRACES\n    \n    block_item_list : block_item\n                   | block_item_list block_item\n    \n    block_item : statement\n                | declaration\n    \n    expression_statement : SEMI_COLON\n\t                     | expression SEMI_COLON\n    \n    selection_statement : IF L_PAREN expression R_PAREN statement\n\t                    | IF L_PAREN expression R_PAREN statement ELSE statement\n\t                    | SWITCH L_PAREN expression R_PAREN statement\n    \n    iteration_statement : WHILE L_PAREN expression R_PAREN statement\n\t                    | DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON\n\t                    | FOR L_PAREN expression_statement expression_statement R_PAREN statement\n\t                    | FOR L_PAREN expression_statement expression_statement expression R_PAREN statement\n    \n    jump_statement : RETURN SEMI_COLON\n\t               | RETURN expression SEMI_COLON      \n    \n        add_sym :\n    \n        pop_sym :\n    '
    
_lr_action_items = {'VOID':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[9,9,-2,-4,-5,-3,-90,-91,9,-8,-92,-163,9,9,9,-164,9,9,9,9,-107,-164,-7,-163,-146,9,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,9,-147,-149,-153,-161,-109,9,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'CHAR':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[10,10,-2,-4,-5,-3,-90,-91,10,-8,-92,-163,10,10,10,-164,10,10,10,10,-107,-164,-7,-163,-146,10,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,10,-147,-149,-153,-161,-109,10,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'INT':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[11,11,-2,-4,-5,-3,-90,-91,11,-8,-92,-163,11,11,11,-164,11,11,11,11,-107,-164,-7,-163,-146,11,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,11,-147,-149,-153,-161,-109,11,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'LONG':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[12,12,-2,-4,-5,-3,-90,-91,12,-8,-92,-163,12,12,12,-164,12,12,12,12,-107,-164,-7,-163,-146,12,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,12,-147,-149,-153,-161,-109,12,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'FLOAT':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[13,13,-2,-4,-5,-3,-90,-91,13,-8,-92,-163,13,13,13,-164,13,13,13,13,-107,-164,-7,-163,-146,13,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,13,-147,-149,-153,-161,-109,13,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'DOUBLE':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[14,14,-2,-4,-5,-3,-90,-91,14,-8,-92,-163,14,14,14,-164,14,14,14,14,-107,-164,-7,-163,-146,14,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,14,-147,-149,-153,-161,-109,14,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'STRUCT':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[15,15,-2,-4,-5,-3,-90,-91,45,-8,-92,-163,45,45,45,-164,187,45,45,45,-107,-164,-7,-163,-146,187,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,187,-147,-149,-153,-161,-109,187,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'ENUM':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[16,16,-2,-4,-5,-3,-90,-91,46,-8,-92,-163,46,46,46,-164,188,46,46,46,-107,-164,-7,-163,-146,188,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,188,-147,-149,-153,-161,-109,188,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'BOOL':([0,2,3,4,5,18,25,26,29,31,32,39,59,90,96,97,98,128,130,155,156,161,163,164,165,166,167,168,169,170,171,172,173,174,175,176,224,230,231,232,233,234,237,243,257,259,261,267,272,278,279,280,281,287,289,290,291,],[17,17,-2,-4,-5,-3,-90,-91,17,-8,-92,-163,17,17,17,-164,17,17,17,17,-107,-164,-7,-163,-146,17,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-108,-6,-144,17,-147,-149,-153,-161,-109,17,-143,-162,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'$end':([1,2,3,4,5,18,25,26,32,97,161,163,165,230,233,],[0,-1,-2,-4,-5,-3,-90,-91,-92,-164,-164,-7,-146,-6,-147,]),'MULTIPLY':([6,9,10,11,12,13,14,17,21,24,25,26,27,28,30,32,33,35,37,41,49,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,85,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,164,166,167,168,169,170,171,172,173,174,175,176,177,178,184,186,190,195,198,199,201,202,203,204,217,218,219,220,221,231,232,234,236,237,238,239,240,242,243,245,246,249,250,251,252,253,255,258,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[24,-97,-98,-99,-100,-101,-102,-105,35,-123,-90,-91,-103,-104,64,-92,24,-124,24,24,64,-42,-30,64,64,64,-44,64,64,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,149,64,-103,-104,64,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,64,64,-21,-22,64,64,-31,64,-32,-33,-42,64,-34,64,24,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,24,64,-163,64,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,24,64,64,64,64,-24,-26,-27,-17,64,64,35,149,149,-45,-46,-47,-144,64,-149,64,-153,64,64,64,64,-161,-103,-104,64,-23,-25,64,-35,-43,24,64,64,-143,64,-162,-142,64,64,64,64,64,-145,-154,-156,-157,64,64,-159,64,-155,-158,-160,]),'IDENTIFIER':([6,9,10,11,12,13,14,15,16,17,21,22,24,25,26,27,28,30,32,33,35,37,40,41,45,46,49,54,55,56,58,59,63,64,65,66,67,68,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,121,122,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,157,158,160,164,166,167,168,169,170,171,172,173,174,175,176,177,178,184,186,187,188,190,202,203,231,232,234,236,237,238,239,240,242,243,245,246,249,252,258,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-125,-97,-98,-99,-100,-101,-102,27,28,-105,36,36,-123,-90,-91,-103,-104,62,-92,-125,-124,-125,91,-125,99,100,62,62,62,62,62,62,-36,-37,-38,-39,-40,-41,62,-103,-104,62,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,62,62,62,62,198,199,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-125,62,91,-163,62,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-125,62,62,62,245,246,62,62,62,-144,62,-149,62,-153,62,62,62,62,-161,-103,-104,62,62,-125,62,62,-143,62,-162,-142,62,62,62,62,62,-145,-154,-156,-157,62,62,-159,62,-155,-158,-160,]),'L_PAREN':([6,9,10,11,12,13,14,17,19,21,22,24,25,26,27,28,30,32,33,34,35,36,37,38,41,49,53,54,55,56,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,98,99,100,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,153,154,157,158,164,166,167,168,169,170,171,172,173,174,175,176,177,178,181,182,183,184,185,186,190,195,198,199,201,202,203,222,231,232,234,236,237,238,239,240,242,243,245,246,249,250,251,252,258,259,260,261,265,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-125,-97,-98,-99,-100,-101,-102,-105,31,37,37,-123,-90,-91,-103,-104,59,-92,-125,-117,-124,-119,-125,-118,-125,59,120,124,124,128,130,59,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,59,-103,-104,59,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,59,128,-21,-22,59,59,59,59,59,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,-122,-120,-125,128,-163,59,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-125,128,238,239,240,59,242,59,59,-24,-26,-27,-17,59,128,-121,-144,59,-149,59,-153,59,59,59,59,-161,-103,-104,128,-23,-25,59,-125,59,59,-143,276,59,-162,-142,59,59,59,59,59,-145,-154,-156,-157,59,59,-159,59,-155,-158,-160,]),'SEMI_COLON':([7,8,19,20,23,25,26,32,34,36,38,47,48,50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,98,117,118,123,125,126,127,129,133,153,154,159,164,166,167,168,169,170,171,172,173,174,175,176,180,184,186,189,191,193,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,231,232,234,236,237,242,243,244,247,250,251,253,254,255,256,259,260,261,266,267,268,270,272,273,274,275,278,279,280,281,283,285,286,287,288,289,290,291,],[25,26,-95,32,-93,-90,-91,-92,-117,-119,-118,-96,-131,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-94,-95,176,-21,-22,-31,-32,-33,-42,-34,-87,-122,-120,-112,-163,176,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,237,176,243,-132,-75,-71,-24,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-121,257,-110,-144,176,-149,176,-153,176,-161,267,-133,-23,-25,-35,-88,-43,-106,176,176,-143,176,-162,-73,-111,-142,176,176,176,-145,-154,-156,-157,176,176,290,-159,176,-155,-158,-160,]),'R_PAREN':([9,10,11,12,13,14,17,24,29,31,34,35,36,38,42,44,50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,89,94,99,100,117,118,120,123,125,126,127,129,131,132,133,134,153,154,162,176,191,193,195,196,197,198,199,200,201,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,237,250,251,253,254,255,262,263,264,268,269,277,282,284,],[-97,-98,-99,-100,-101,-102,-105,-123,43,-8,-117,-124,-119,-118,95,-126,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,154,-128,-103,-104,-21,-22,195,-31,-32,-33,-42,-34,201,203,-87,-129,-122,-120,-127,-152,-75,-71,-24,251,-28,-26,-27,253,-17,-130,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-121,-153,-23,-25,-35,-88,-43,273,274,275,-73,-29,283,286,288,]),'COMMA':([19,20,23,34,36,38,42,44,47,48,50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,91,92,93,94,101,102,117,118,123,125,126,127,129,131,133,153,154,162,180,189,191,192,193,194,195,196,197,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,225,226,227,228,229,244,247,248,250,251,253,254,255,262,263,264,268,269,270,282,284,],[-95,33,-93,-117,-119,-118,96,-126,-96,-131,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-94,-95,-115,160,-113,-128,190,-134,-21,-22,-31,-32,-33,-42,-34,202,-87,-122,-120,-127,202,-132,-75,202,-71,202,-24,252,-28,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-121,258,-110,-116,-89,-114,202,-133,-135,-23,-25,-35,-88,-43,202,202,202,-73,-29,-111,202,202,]),'ASSIGNMENT':([19,34,36,38,51,53,61,62,70,71,72,73,74,75,76,77,78,87,91,117,118,123,125,126,127,129,153,154,195,198,199,201,222,250,251,253,255,],[30,-117,-119,-118,104,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,30,158,-21,-22,-31,-32,-33,-42,-34,-122,-120,-24,-26,-27,-17,-121,-23,-25,-35,-43,]),'R_BRACES':([25,26,32,48,50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,91,92,93,98,101,102,117,118,123,125,126,127,129,155,156,164,166,167,168,169,170,171,172,173,174,175,176,189,190,191,193,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,223,224,227,228,229,231,234,237,243,247,248,250,251,253,255,257,259,261,267,268,271,272,278,279,280,281,287,289,290,291,],[-90,-91,-92,-131,-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-115,159,-113,165,189,-134,-21,-22,-31,-32,-33,-42,-34,-164,-107,231,233,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,-132,247,-75,-71,-24,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,256,-108,-116,-89,-114,-144,-149,-153,-161,-133,-135,-23,-25,-35,-43,-109,-164,-143,-162,-73,278,-142,-145,-154,-156,-157,-159,-155,-158,-160,]),'CASE':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,178,-163,178,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,178,-144,178,-149,178,-153,-161,178,178,-143,-162,-142,178,178,178,-145,-154,-156,-157,178,178,-159,178,-155,-158,-160,]),'DEFAULT':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,179,-163,179,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,179,-144,179,-149,179,-153,-161,179,179,-143,-162,-142,179,179,179,-145,-154,-156,-157,179,179,-159,179,-155,-158,-160,]),'L_BRACES':([25,26,27,28,30,32,43,49,95,98,164,166,167,168,169,170,171,172,173,174,175,176,184,190,231,232,234,236,237,243,245,246,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,39,40,49,-92,98,49,98,164,-163,164,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,164,49,-144,164,-149,164,-153,-161,39,40,164,164,-143,-162,-142,164,164,164,-145,-154,-156,-157,164,164,-159,164,-155,-158,-160,]),'IF':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,181,-163,181,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,181,-144,181,-149,181,-153,-161,181,181,-143,-162,-142,181,181,181,-145,-154,-156,-157,181,181,-159,181,-155,-158,-160,]),'SWITCH':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,182,-163,182,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,182,-144,182,-149,182,-153,-161,182,182,-143,-162,-142,182,182,182,-145,-154,-156,-157,182,182,-159,182,-155,-158,-160,]),'WHILE':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,241,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,183,-163,183,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,183,-144,183,-149,183,-153,265,-161,183,183,-143,-162,-142,183,183,183,-145,-154,-156,-157,183,183,-159,183,-155,-158,-160,]),'DO':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,184,-163,184,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,184,-144,184,-149,184,-153,-161,184,184,-143,-162,-142,184,184,184,-145,-154,-156,-157,184,184,-159,184,-155,-158,-160,]),'FOR':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,185,-163,185,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,185,-144,185,-149,185,-153,-161,185,185,-143,-162,-142,185,185,185,-145,-154,-156,-157,185,185,-159,185,-155,-158,-160,]),'RETURN':([25,26,32,98,164,166,167,168,169,170,171,172,173,174,175,176,184,231,232,234,236,237,243,259,260,261,267,272,273,274,275,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,-92,186,-163,186,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,186,-144,186,-149,186,-153,-161,186,186,-143,-162,-142,186,186,186,-145,-154,-156,-157,186,186,-159,186,-155,-158,-160,]),'INCREMENT':([25,26,30,32,49,53,54,55,56,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,195,198,199,201,202,203,231,232,234,236,237,238,239,240,242,243,249,250,251,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,54,-92,54,117,54,54,54,54,54,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,54,54,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,54,54,-21,-22,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-163,54,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,54,54,54,54,-24,-26,-27,-17,54,54,-144,54,-149,54,-153,54,54,54,54,-161,54,-23,-25,54,54,54,-143,54,-162,-142,54,54,54,54,54,-145,-154,-156,-157,54,54,-159,54,-155,-158,-160,]),'DECREMENT':([25,26,30,32,49,53,54,55,56,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,195,198,199,201,202,203,231,232,234,236,237,238,239,240,242,243,249,250,251,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,55,-92,55,118,55,55,55,55,55,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,55,55,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,55,55,-21,-22,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-163,55,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,55,55,55,55,-24,-26,-27,-17,55,55,-144,55,-149,55,-153,55,55,55,55,-161,55,-23,-25,55,55,55,-143,55,-162,-142,55,55,55,55,55,-145,-154,-156,-157,55,55,-159,55,-155,-158,-160,]),'SIZEOF':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,58,-92,58,58,58,58,58,58,-36,-37,-38,-39,-40,-41,58,58,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-163,58,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,58,58,58,58,58,58,-144,58,-149,58,-153,58,58,58,58,-161,58,58,58,58,-143,58,-162,-142,58,58,58,58,58,-145,-154,-156,-157,58,58,-159,58,-155,-158,-160,]),'BITWISE_AND':([25,26,30,32,49,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,80,81,82,83,84,85,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,195,198,199,201,202,203,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,231,232,234,236,237,238,239,240,242,243,249,250,251,252,253,255,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,63,-92,63,-42,-30,63,63,63,-44,63,63,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,138,-62,-59,-54,-51,-48,63,63,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,63,63,-21,-22,63,63,-31,63,-32,-33,-42,63,-34,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-163,63,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,63,63,63,63,-24,-26,-27,-17,63,63,138,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-144,63,-149,63,-153,63,63,63,63,-161,63,-23,-25,63,-35,-43,63,63,-143,63,-162,-142,63,63,63,63,63,-145,-154,-156,-157,63,63,-159,63,-155,-158,-160,]),'ADD':([25,26,30,32,49,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,84,85,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,195,198,199,201,202,203,215,216,217,218,219,220,221,231,232,234,236,237,238,239,240,242,243,249,250,251,252,253,255,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,65,-92,65,-42,-30,65,65,65,-44,65,65,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,147,-48,65,65,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,65,65,-21,-22,65,65,-31,65,-32,-33,-42,65,-34,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,65,-163,65,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,65,65,65,65,-24,-26,-27,-17,65,65,147,147,-49,-50,-45,-46,-47,-144,65,-149,65,-153,65,65,65,65,-161,65,-23,-25,65,-35,-43,65,65,-143,65,-162,-142,65,65,65,65,65,-145,-154,-156,-157,65,65,-159,65,-155,-158,-160,]),'SUBSTRACT':([25,26,30,32,49,51,53,54,55,56,57,58,59,61,62,63,64,65,66,67,68,70,71,72,73,74,75,76,77,78,84,85,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,123,124,125,126,127,128,129,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,195,198,199,201,202,203,215,216,217,218,219,220,221,231,232,234,236,237,238,239,240,242,243,249,250,251,252,253,255,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,66,-92,66,-42,-30,66,66,66,-44,66,66,-20,-9,-36,-37,-38,-39,-40,-41,-10,-11,-12,-13,-14,-15,-16,-18,-19,148,-48,66,66,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,66,66,-21,-22,66,66,-31,66,-32,-33,-42,66,-34,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,-163,66,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,66,66,66,66,-24,-26,-27,-17,66,66,148,148,-49,-50,-45,-46,-47,-144,66,-149,66,-153,66,66,66,66,-161,66,-23,-25,66,-35,-43,66,66,-143,66,-162,-142,66,66,66,66,66,-145,-154,-156,-157,66,66,-159,66,-155,-158,-160,]),'BITWISE_ONE_COMPLEMENT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,67,-92,67,67,67,67,67,67,-36,-37,-38,-39,-40,-41,67,67,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,67,-163,67,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,67,67,67,67,67,67,-144,67,-149,67,-153,67,67,67,67,-161,67,67,67,67,-143,67,-162,-142,67,67,67,67,67,-145,-154,-156,-157,67,67,-159,67,-155,-158,-160,]),'LOGICAL_NOT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,68,-92,68,68,68,68,68,68,-36,-37,-38,-39,-40,-41,68,68,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,-163,68,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,68,68,68,68,68,68,-144,68,-149,68,-153,68,68,68,68,-161,68,68,68,68,-143,68,-162,-142,68,68,68,68,68,-145,-154,-156,-157,68,68,-159,68,-155,-158,-160,]),'INT_CONSTANT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,88,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,70,-92,70,70,70,70,70,70,-36,-37,-38,-39,-40,-41,152,70,70,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,-163,70,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,70,70,70,70,70,70,-144,70,-149,70,-153,70,70,70,70,-161,70,70,70,70,-143,70,-162,-142,70,70,70,70,70,-145,-154,-156,-157,70,70,-159,70,-155,-158,-160,]),'HEX_CONSTANT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,71,-92,71,71,71,71,71,71,-36,-37,-38,-39,-40,-41,71,71,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,71,-163,71,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,71,71,71,71,71,71,-144,71,-149,71,-153,71,71,71,71,-161,71,71,71,71,-143,71,-162,-142,71,71,71,71,71,-145,-154,-156,-157,71,71,-159,71,-155,-158,-160,]),'OCTAL_CONSTANT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,72,-92,72,72,72,72,72,72,-36,-37,-38,-39,-40,-41,72,72,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,72,-163,72,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,72,72,72,72,72,72,-144,72,-149,72,-153,72,72,72,72,-161,72,72,72,72,-143,72,-162,-142,72,72,72,72,72,-145,-154,-156,-157,72,72,-159,72,-155,-158,-160,]),'EXPONENT_CONSTANT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,73,-92,73,73,73,73,73,73,-36,-37,-38,-39,-40,-41,73,73,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,73,-163,73,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,73,73,73,73,73,73,-144,73,-149,73,-153,73,73,73,73,-161,73,73,73,73,-143,73,-162,-142,73,73,73,73,73,-145,-154,-156,-157,73,73,-159,73,-155,-158,-160,]),'REAL_CONSTANT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,74,-92,74,74,74,74,74,74,-36,-37,-38,-39,-40,-41,74,74,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,-163,74,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,74,74,74,74,74,74,-144,74,-149,74,-153,74,74,74,74,-161,74,74,74,74,-143,74,-162,-142,74,74,74,74,74,-145,-154,-156,-157,74,74,-159,74,-155,-158,-160,]),'CHAR_CONSTANT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,75,-92,75,75,75,75,75,75,-36,-37,-38,-39,-40,-41,75,75,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,-163,75,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,75,75,75,75,75,75,-144,75,-149,75,-153,75,75,75,75,-161,75,75,75,75,-143,75,-162,-142,75,75,75,75,75,-145,-154,-156,-157,75,75,-159,75,-155,-158,-160,]),'STR_CONSTANT':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,76,-92,76,76,76,76,76,76,-36,-37,-38,-39,-40,-41,76,76,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,76,-163,76,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,76,76,76,76,76,76,-144,76,-149,76,-153,76,76,76,76,-161,76,76,76,76,-143,76,-162,-142,76,76,76,76,76,-145,-154,-156,-157,76,76,-159,76,-155,-158,-160,]),'TRUE':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,77,-92,77,77,77,77,77,77,-36,-37,-38,-39,-40,-41,77,77,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,-163,77,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,77,77,77,77,77,77,-144,77,-149,77,-153,77,77,77,77,-161,77,77,77,77,-143,77,-162,-142,77,77,77,77,77,-145,-154,-156,-157,77,77,-159,77,-155,-158,-160,]),'FALSE':([25,26,30,32,49,54,55,56,58,59,63,64,65,66,67,68,98,103,104,105,106,107,108,109,110,111,112,113,114,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,164,166,167,168,169,170,171,172,173,174,175,176,178,184,186,190,202,203,231,232,234,236,237,238,239,240,242,243,249,252,259,260,261,266,267,272,273,274,275,276,277,278,279,280,281,283,285,287,288,289,290,291,],[-90,-91,78,-92,78,78,78,78,78,78,-36,-37,-38,-39,-40,-41,78,78,-76,-77,-78,-79,-80,-81,-82,-83,-84,-85,-86,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-163,78,-148,-150,-151,-136,-137,-138,-139,-140,-141,-152,78,78,78,78,78,78,-144,78,-149,78,-153,78,78,78,78,-161,78,78,78,78,-143,78,-162,-142,78,78,78,78,78,-145,-154,-156,-157,78,78,-159,78,-155,-158,-160,]),'L_SQBR':([34,36,38,53,61,62,70,71,72,73,74,75,76,77,78,117,118,153,154,195,198,199,201,222,250,251,],[88,-119,88,119,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-122,-120,-24,-26,-27,-17,-121,-23,-25,]),'COLON':([50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,117,118,123,125,126,127,129,133,179,191,192,193,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,228,235,250,251,253,254,255,268,],[-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-87,236,-75,249,-71,-24,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-89,260,-23,-25,-35,-88,-43,-73,]),'R_SQBR':([50,51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,88,117,118,123,125,126,127,129,133,152,191,193,194,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,254,255,268,],[-74,-42,-72,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,153,-21,-22,-31,-32,-33,-42,-34,-87,222,-75,-71,250,-24,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-88,-43,-73,]),'DIVIDE':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,85,117,118,123,125,126,127,129,195,198,199,201,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,150,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,150,150,-45,-46,-47,-23,-25,-35,-43,]),'MODULUS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,85,117,118,123,125,126,127,129,195,198,199,201,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,151,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,151,151,-45,-46,-47,-23,-25,-35,-43,]),'LEFT_SHIFT':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,83,84,85,117,118,123,125,126,127,129,195,198,199,201,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,145,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,145,145,145,145,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'RIGHT_SHIFT':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,83,84,85,117,118,123,125,126,127,129,195,198,199,201,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,146,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,146,146,146,146,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'LESS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,141,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,141,141,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'GREATER':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,142,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,142,142,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'LESS_EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,143,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,143,143,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'GREATER_EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,144,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,144,144,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,81,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,139,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,139,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'NOT_EQUALS':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,81,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,140,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,140,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'BITWISE_XOR':([51,53,57,61,62,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,137,-64,-62,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,137,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'BITWISE_OR':([51,53,57,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,117,118,123,125,126,127,129,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,-20,-9,136,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,136,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'LOGICAL_AND':([51,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,117,118,123,125,126,127,129,193,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,-30,-44,135,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,135,-24,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'QUES_MARK':([51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,117,118,123,125,126,127,129,193,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,115,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-71,-24,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'LOGICAL_OR':([51,52,53,57,60,61,62,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,117,118,123,125,126,127,129,193,195,198,199,201,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,250,251,253,255,],[-42,116,-30,-44,-70,-20,-9,-68,-10,-11,-12,-13,-14,-15,-16,-18,-19,-66,-64,-62,-59,-54,-51,-48,-21,-22,-31,-32,-33,-42,-34,-71,-24,-26,-27,-17,-69,-67,-65,-63,-60,-61,-55,-56,-57,-58,-52,-53,-49,-50,-45,-46,-47,-23,-25,-35,-43,]),'MULTIPLY_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[105,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'DIVIDE_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[106,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'MODULUS_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[107,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'ADD_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[108,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'SUBSTRACT_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[109,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'LEFT_SHIFT_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[110,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'RIGHT_SHIFT_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[111,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'BITWISE_AND_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[112,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'BITWISE_XOR_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[113,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'BITWISE_OR_ASSIGNMENT':([51,53,61,62,70,71,72,73,74,75,76,77,78,117,118,123,125,126,127,129,195,198,199,201,250,251,253,255,],[114,-30,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-31,-32,-33,-42,-34,-24,-26,-27,-17,-23,-25,-35,-43,]),'DOT':([53,61,62,70,71,72,73,74,75,76,77,78,117,118,195,198,199,201,250,251,],[121,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-24,-26,-27,-17,-23,-25,]),'ARROW':([53,61,62,70,71,72,73,74,75,76,77,78,117,118,195,198,199,201,250,251,],[122,-20,-9,-10,-11,-12,-13,-14,-15,-16,-18,-19,-21,-22,-24,-26,-27,-17,-23,-25,]),'ELSE':([170,171,172,173,174,175,176,231,237,243,261,267,272,278,279,280,281,287,289,290,291,],[-136,-137,-138,-139,-140,-141,-152,-144,-153,-161,-143,-162,-142,-145,285,-156,-157,-159,-155,-158,-160,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'translation_unit':([0,],[2,]),'external_declaration':([0,2,],[3,18,]),'function_definition':([0,2,],[4,4,]),'declaration':([0,2,98,166,232,259,],[5,5,169,169,169,169,]),'type_specifier':([0,2,29,59,90,96,98,128,130,155,166,232,259,],[6,6,41,134,157,41,177,134,134,157,177,177,177,]),'struct_specifier':([0,2,98,166,232,259,],[7,7,7,7,7,7,]),'enum_specifier':([0,2,98,166,232,259,],[8,8,8,8,8,8,]),'declarator':([6,33,37,41,157,177,258,],[19,87,89,94,226,87,270,]),'init_declarator_list':([6,177,],[20,20,]),'pointer':([6,33,37,41,134,157,177,258,],[21,21,21,21,204,21,21,21,]),'no_pointer':([6,33,37,41,157,177,258,],[22,22,22,22,22,22,22,]),'init_declarator':([6,33,177,],[23,86,23,]),'func_scope':([19,],[29,]),'direct_declarator':([21,22,],[34,38,]),'parameter_type_list':([29,],[42,]),'parameter_declaration':([29,96,],[44,162,]),'initializer':([30,49,190,],[47,102,248,]),'assignment_expression':([30,49,59,98,103,115,119,120,124,128,130,166,184,186,190,202,232,236,238,239,240,242,252,259,260,266,273,274,275,276,277,283,285,288,],[48,48,133,133,191,133,133,197,133,133,133,133,133,133,48,254,133,133,133,133,133,133,269,133,133,133,133,133,133,133,133,133,133,133,]),'conditional_expression':([30,49,59,98,103,115,119,120,124,128,130,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[50,50,50,50,50,50,50,50,50,50,50,228,50,228,50,50,50,50,50,50,50,50,50,50,268,50,50,50,50,50,50,50,50,50,50,50,50,]),'unary_expression':([30,49,54,55,56,58,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,166,178,184,186,190,202,203,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[51,51,123,125,127,129,51,51,51,51,127,51,51,51,51,51,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,51,127,51,51,51,51,127,51,51,51,51,51,51,127,51,51,51,51,51,51,51,51,51,51,51,51,]),'logical_or_expression':([30,49,59,98,103,115,119,120,124,128,130,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'postfix_expression':([30,49,54,55,56,58,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,166,178,184,186,190,202,203,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([30,49,54,55,56,58,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,166,178,184,186,190,202,203,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'cast_expression':([30,49,56,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,166,178,184,186,190,202,203,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[57,57,126,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,219,220,221,57,57,57,57,57,57,57,255,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'logical_and_expression':([30,49,59,98,103,115,116,119,120,124,128,130,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[60,60,60,60,60,60,193,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'primary_expression':([30,49,54,55,56,58,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,158,166,178,184,186,190,202,203,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'inclusive_or_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[69,69,69,69,69,69,69,69,69,69,69,69,205,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'exclusive_or_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,136,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[79,79,79,79,79,79,79,79,79,79,79,79,79,206,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'and_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,136,137,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[80,80,80,80,80,80,80,80,80,80,80,80,80,80,207,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,]),'equality_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,136,137,138,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,208,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,]),'relational_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,209,210,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,]),'shift_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,211,212,213,214,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'additive_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,215,216,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'multiplicative_expression':([30,49,59,98,103,115,116,119,120,124,128,130,135,136,137,138,139,140,141,142,143,144,145,146,147,148,158,166,178,184,186,190,202,232,236,238,239,240,242,249,252,259,260,266,273,274,275,276,277,283,285,288,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,217,218,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'add_sym':([39,164,],[90,232,]),'enumerator_list':([40,],[92,]),'enumerator':([40,160,],[93,229,]),'function_body':([43,95,],[97,161,]),'initializer_list':([49,],[101,]),'assignment_operator':([51,],[103,]),'expression':([59,98,115,119,124,128,130,166,184,186,232,236,238,239,240,242,259,260,266,273,274,275,276,277,283,285,288,],[131,180,192,194,131,131,131,180,180,244,180,180,262,263,264,180,180,180,180,180,180,180,282,284,180,180,180,]),'type_name':([59,128,130,],[132,132,200,]),'struct_declaration_list':([90,],[155,]),'struct_declaration':([90,155,],[156,224,]),'pop_sym':([97,155,161,259,],[163,223,230,271,]),'block_item_list':([98,232,],[166,259,]),'block_item':([98,166,232,259,],[167,234,167,234,]),'statement':([98,166,184,232,236,259,260,273,274,275,283,285,288,],[168,168,241,168,261,168,272,279,280,281,287,289,291,]),'labeled_statement':([98,166,184,232,236,259,260,273,274,275,283,285,288,],[170,170,170,170,170,170,170,170,170,170,170,170,170,]),'compound_statement':([98,166,184,232,236,259,260,273,274,275,283,285,288,],[171,171,171,171,171,171,171,171,171,171,171,171,171,]),'expression_statement':([98,166,184,232,236,242,259,260,266,273,274,275,283,285,288,],[172,172,172,172,172,266,172,172,277,172,172,172,172,172,172,]),'selection_statement':([98,166,184,232,236,259,260,273,274,275,283,285,288,],[173,173,173,173,173,173,173,173,173,173,173,173,173,]),'iteration_statement':([98,166,184,232,236,259,260,273,274,275,283,285,288,],[174,174,174,174,174,174,174,174,174,174,174,174,174,]),'jump_statement':([98,166,184,232,236,259,260,273,274,275,283,285,288,],[175,175,175,175,175,175,175,175,175,175,175,175,175,]),'argument_expression_list':([120,],[196,]),'struct_declarator_list':([157,],[225,]),'constant_expression':([158,178,],[227,235,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> translation_unit','program',1,'p_program','cparser.py',27),
  ('translation_unit -> external_declaration','translation_unit',1,'p_translation_unit','cparser.py',33),
  ('translation_unit -> translation_unit external_declaration','translation_unit',2,'p_translation_unit','cparser.py',34),
  ('external_declaration -> function_definition','external_declaration',1,'p_external_declaration','cparser.py',41),
  ('external_declaration -> declaration','external_declaration',1,'p_external_declaration','cparser.py',42),
  ('function_definition -> type_specifier declarator func_scope parameter_type_list R_PAREN function_body pop_sym','function_definition',7,'p_function_definition','cparser.py',49),
  ('function_definition -> type_specifier declarator func_scope R_PAREN function_body pop_sym','function_definition',6,'p_function_definition','cparser.py',50),
  ('func_scope -> L_PAREN','func_scope',1,'p_func_scope','cparser.py',66),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','cparser.py',74),
  ('primary_expression -> INT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',75),
  ('primary_expression -> HEX_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',76),
  ('primary_expression -> OCTAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',77),
  ('primary_expression -> EXPONENT_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',78),
  ('primary_expression -> REAL_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',79),
  ('primary_expression -> CHAR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',80),
  ('primary_expression -> STR_CONSTANT','primary_expression',1,'p_primary_expression','cparser.py',81),
  ('primary_expression -> L_PAREN expression R_PAREN','primary_expression',3,'p_primary_expression','cparser.py',82),
  ('primary_expression -> TRUE','primary_expression',1,'p_primary_expression','cparser.py',83),
  ('primary_expression -> FALSE','primary_expression',1,'p_primary_expression','cparser.py',84),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','cparser.py',115),
  ('postfix_expression -> postfix_expression INCREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',116),
  ('postfix_expression -> postfix_expression DECREMENT','postfix_expression',2,'p_postfix_expression','cparser.py',117),
  ('postfix_expression -> postfix_expression L_SQBR expression R_SQBR','postfix_expression',4,'p_postfix_expression_1','cparser.py',143),
  ('postfix_expression -> postfix_expression L_PAREN R_PAREN','postfix_expression',3,'p_postfix_expression_2','cparser.py',182),
  ('postfix_expression -> postfix_expression L_PAREN argument_expression_list R_PAREN','postfix_expression',4,'p_postfix_expression_2','cparser.py',183),
  ('postfix_expression -> postfix_expression DOT IDENTIFIER','postfix_expression',3,'p_postfix_expression_3','cparser.py',232),
  ('postfix_expression -> postfix_expression ARROW IDENTIFIER','postfix_expression',3,'p_postfix_expression_4','cparser.py',264),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','cparser.py',299),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','cparser.py',300),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','cparser.py',314),
  ('unary_expression -> INCREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',321),
  ('unary_expression -> DECREMENT unary_expression','unary_expression',2,'p_unary_expression_1','cparser.py',322),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression_2','cparser.py',344),
  ('unary_expression -> SIZEOF unary_expression','unary_expression',2,'p_unary_expression_3','cparser.py',390),
  ('unary_expression -> SIZEOF L_PAREN type_name R_PAREN','unary_expression',4,'p_unary_expression_3','cparser.py',391),
  ('unary_operator -> BITWISE_AND','unary_operator',1,'p_unary_operator','cparser.py',408),
  ('unary_operator -> MULTIPLY','unary_operator',1,'p_unary_operator','cparser.py',409),
  ('unary_operator -> ADD','unary_operator',1,'p_unary_operator','cparser.py',410),
  ('unary_operator -> SUBSTRACT','unary_operator',1,'p_unary_operator','cparser.py',411),
  ('unary_operator -> BITWISE_ONE_COMPLEMENT','unary_operator',1,'p_unary_operator','cparser.py',412),
  ('unary_operator -> LOGICAL_NOT','unary_operator',1,'p_unary_operator','cparser.py',413),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','cparser.py',420),
  ('cast_expression -> L_PAREN type_name R_PAREN cast_expression','cast_expression',4,'p_cast_expression','cparser.py',421),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','cparser.py',437),
  ('multiplicative_expression -> multiplicative_expression MULTIPLY cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',438),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','cparser.py',439),
  ('multiplicative_expression -> multiplicative_expression MODULUS cast_expression','multiplicative_expression',3,'p_multiplicative_expression_1','cparser.py',471),
  ('additive_expression -> multiplicative_expression','additive_expression',1,'p_additive_expression','cparser.py',502),
  ('additive_expression -> additive_expression ADD multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',503),
  ('additive_expression -> additive_expression SUBSTRACT multiplicative_expression','additive_expression',3,'p_additive_expression','cparser.py',504),
  ('shift_expression -> additive_expression','shift_expression',1,'p_shift_expression','cparser.py',568),
  ('shift_expression -> shift_expression LEFT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',569),
  ('shift_expression -> shift_expression RIGHT_SHIFT additive_expression','shift_expression',3,'p_shift_expression','cparser.py',570),
  ('relational_expression -> shift_expression','relational_expression',1,'p_relational_expression','cparser.py',605),
  ('relational_expression -> relational_expression LESS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',606),
  ('relational_expression -> relational_expression GREATER shift_expression','relational_expression',3,'p_relational_expression','cparser.py',607),
  ('relational_expression -> relational_expression LESS_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',608),
  ('relational_expression -> relational_expression GREATER_EQUALS shift_expression','relational_expression',3,'p_relational_expression','cparser.py',609),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','cparser.py',644),
  ('equality_expression -> equality_expression EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',645),
  ('equality_expression -> equality_expression NOT_EQUALS relational_expression','equality_expression',3,'p_equality_expression','cparser.py',646),
  ('and_expression -> equality_expression','and_expression',1,'p_and_expression','cparser.py',681),
  ('and_expression -> and_expression BITWISE_AND equality_expression','and_expression',3,'p_and_expression','cparser.py',682),
  ('exclusive_or_expression -> and_expression','exclusive_or_expression',1,'p_exclusive_or_expression','cparser.py',718),
  ('exclusive_or_expression -> exclusive_or_expression BITWISE_XOR and_expression','exclusive_or_expression',3,'p_exclusive_or_expression','cparser.py',719),
  ('inclusive_or_expression -> exclusive_or_expression','inclusive_or_expression',1,'p_inclusive_or_expression','cparser.py',756),
  ('inclusive_or_expression -> inclusive_or_expression BITWISE_OR exclusive_or_expression','inclusive_or_expression',3,'p_inclusive_or_expression','cparser.py',757),
  ('logical_and_expression -> inclusive_or_expression','logical_and_expression',1,'p_logical_and_expression','cparser.py',793),
  ('logical_and_expression -> logical_and_expression LOGICAL_AND inclusive_or_expression','logical_and_expression',3,'p_logical_and_expression','cparser.py',794),
  ('logical_or_expression -> logical_and_expression','logical_or_expression',1,'p_logical_or_expression','cparser.py',830),
  ('logical_or_expression -> logical_or_expression LOGICAL_OR logical_and_expression','logical_or_expression',3,'p_logical_or_expression','cparser.py',831),
  ('conditional_expression -> logical_or_expression','conditional_expression',1,'p_conditional_expression','cparser.py',868),
  ('conditional_expression -> logical_or_expression QUES_MARK expression COLON conditional_expression','conditional_expression',5,'p_conditional_expression','cparser.py',869),
  ('assignment_expression -> conditional_expression','assignment_expression',1,'p_assignment_expression','cparser.py',901),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','cparser.py',902),
  ('assignment_operator -> ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',950),
  ('assignment_operator -> MULTIPLY_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',951),
  ('assignment_operator -> DIVIDE_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',952),
  ('assignment_operator -> MODULUS_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',953),
  ('assignment_operator -> ADD_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',954),
  ('assignment_operator -> SUBSTRACT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',955),
  ('assignment_operator -> LEFT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',956),
  ('assignment_operator -> RIGHT_SHIFT_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',957),
  ('assignment_operator -> BITWISE_AND_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',958),
  ('assignment_operator -> BITWISE_XOR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',959),
  ('assignment_operator -> BITWISE_OR_ASSIGNMENT','assignment_operator',1,'p_assignment_operator','cparser.py',960),
  ('expression -> assignment_expression','expression',1,'p_expression','cparser.py',967),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','cparser.py',968),
  ('constant_expression -> conditional_expression','constant_expression',1,'p_constant_expression','cparser.py',982),
  ('declaration -> struct_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',990),
  ('declaration -> enum_specifier SEMI_COLON','declaration',2,'p_declaration','cparser.py',991),
  ('declaration -> type_specifier init_declarator_list SEMI_COLON','declaration',3,'p_declaration','cparser.py',992),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','cparser.py',1004),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','cparser.py',1005),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','cparser.py',1013),
  ('init_declarator -> declarator ASSIGNMENT initializer','init_declarator',3,'p_init_declarator','cparser.py',1014),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','cparser.py',1041),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','cparser.py',1042),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','cparser.py',1043),
  ('type_specifier -> LONG','type_specifier',1,'p_type_specifier','cparser.py',1044),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','cparser.py',1045),
  ('type_specifier -> DOUBLE','type_specifier',1,'p_type_specifier','cparser.py',1046),
  ('type_specifier -> STRUCT IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1047),
  ('type_specifier -> ENUM IDENTIFIER','type_specifier',2,'p_type_specifier','cparser.py',1048),
  ('type_specifier -> BOOL','type_specifier',1,'p_type_specifier','cparser.py',1049),
  ('struct_specifier -> STRUCT IDENTIFIER L_BRACES add_sym struct_declaration_list pop_sym R_BRACES','struct_specifier',7,'p_struct_specifier','cparser.py',1066),
  ('struct_declaration_list -> struct_declaration','struct_declaration_list',1,'p_struct_declaration_list','cparser.py',1077),
  ('struct_declaration_list -> struct_declaration_list struct_declaration','struct_declaration_list',2,'p_struct_declaration_list','cparser.py',1078),
  ('struct_declaration -> type_specifier struct_declarator_list SEMI_COLON','struct_declaration',3,'p_struct_declaration','cparser.py',1090),
  ('struct_declarator_list -> declarator','struct_declarator_list',1,'p_struct_declarator_list','cparser.py',1099),
  ('struct_declarator_list -> struct_declarator_list COMMA declarator','struct_declarator_list',3,'p_struct_declarator_list','cparser.py',1100),
  ('enum_specifier -> ENUM IDENTIFIER L_BRACES enumerator_list R_BRACES','enum_specifier',5,'p_enum_specifier','cparser.py',1122),
  ('enumerator_list -> enumerator','enumerator_list',1,'p_enumerator_list','cparser.py',1129),
  ('enumerator_list -> enumerator_list COMMA enumerator','enumerator_list',3,'p_enumerator_list','cparser.py',1130),
  ('enumerator -> IDENTIFIER','enumerator',1,'p_enumerator','cparser.py',1137),
  ('enumerator -> IDENTIFIER ASSIGNMENT constant_expression','enumerator',3,'p_enumerator','cparser.py',1138),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1146),
  ('declarator -> no_pointer direct_declarator','declarator',2,'p_declarator','cparser.py',1147),
  ('direct_declarator -> IDENTIFIER','direct_declarator',1,'p_direct_declarator','cparser.py',1163),
  ('direct_declarator -> L_PAREN declarator R_PAREN','direct_declarator',3,'p_direct_declarator','cparser.py',1164),
  ('direct_declarator -> direct_declarator L_SQBR INT_CONSTANT R_SQBR','direct_declarator',4,'p_direct_declarator','cparser.py',1165),
  ('direct_declarator -> direct_declarator L_SQBR R_SQBR','direct_declarator',3,'p_direct_declarator','cparser.py',1166),
  ('pointer -> MULTIPLY','pointer',1,'p_pointer','cparser.py',1190),
  ('pointer -> pointer MULTIPLY','pointer',2,'p_pointer','cparser.py',1191),
  ('no_pointer -> <empty>','no_pointer',0,'p_no_pointer','cparser.py',1218),
  ('parameter_type_list -> parameter_declaration','parameter_type_list',1,'p_parameter_type_list','cparser.py',1232),
  ('parameter_type_list -> parameter_type_list COMMA parameter_declaration','parameter_type_list',3,'p_parameter_type_list','cparser.py',1233),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','cparser.py',1243),
  ('type_name -> type_specifier','type_name',1,'p_type_name','cparser.py',1257),
  ('type_name -> type_specifier pointer','type_name',2,'p_type_name','cparser.py',1258),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','cparser.py',1270),
  ('initializer -> L_BRACES initializer_list R_BRACES','initializer',3,'p_initializer','cparser.py',1271),
  ('initializer -> L_BRACES initializer_list COMMA R_BRACES','initializer',4,'p_initializer','cparser.py',1272),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','cparser.py',1284),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','cparser.py',1285),
  ('statement -> labeled_statement','statement',1,'p_statement','cparser.py',1310),
  ('statement -> compound_statement','statement',1,'p_statement','cparser.py',1311),
  ('statement -> expression_statement','statement',1,'p_statement','cparser.py',1312),
  ('statement -> selection_statement','statement',1,'p_statement','cparser.py',1313),
  ('statement -> iteration_statement','statement',1,'p_statement','cparser.py',1314),
  ('statement -> jump_statement','statement',1,'p_statement','cparser.py',1315),
  ('labeled_statement -> CASE constant_expression COLON statement','labeled_statement',4,'p_labeled_statement','cparser.py',1322),
  ('labeled_statement -> DEFAULT COLON statement','labeled_statement',3,'p_labeled_statement','cparser.py',1323),
  ('compound_statement -> L_BRACES R_BRACES','compound_statement',2,'p_compound_statement','cparser.py',1340),
  ('compound_statement -> L_BRACES add_sym block_item_list pop_sym R_BRACES','compound_statement',5,'p_compound_statement','cparser.py',1341),
  ('function_body -> L_BRACES R_BRACES','function_body',2,'p_function_body','cparser.py',1351),
  ('function_body -> L_BRACES block_item_list R_BRACES','function_body',3,'p_function_body','cparser.py',1352),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','cparser.py',1362),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','cparser.py',1363),
  ('block_item -> statement','block_item',1,'p_block_item','cparser.py',1370),
  ('block_item -> declaration','block_item',1,'p_block_item','cparser.py',1371),
  ('expression_statement -> SEMI_COLON','expression_statement',1,'p_expression_statement','cparser.py',1378),
  ('expression_statement -> expression SEMI_COLON','expression_statement',2,'p_expression_statement','cparser.py',1379),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1389),
  ('selection_statement -> IF L_PAREN expression R_PAREN statement ELSE statement','selection_statement',7,'p_selection_statement','cparser.py',1390),
  ('selection_statement -> SWITCH L_PAREN expression R_PAREN statement','selection_statement',5,'p_selection_statement','cparser.py',1391),
  ('iteration_statement -> WHILE L_PAREN expression R_PAREN statement','iteration_statement',5,'p_iteration_statement','cparser.py',1415),
  ('iteration_statement -> DO statement WHILE L_PAREN expression R_PAREN SEMI_COLON','iteration_statement',7,'p_iteration_statement','cparser.py',1416),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement R_PAREN statement','iteration_statement',6,'p_iteration_statement','cparser.py',1417),
  ('iteration_statement -> FOR L_PAREN expression_statement expression_statement expression R_PAREN statement','iteration_statement',7,'p_iteration_statement','cparser.py',1418),
  ('jump_statement -> RETURN SEMI_COLON','jump_statement',2,'p_jump_statement','cparser.py',1453),
  ('jump_statement -> RETURN expression SEMI_COLON','jump_statement',3,'p_jump_statement','cparser.py',1454),
  ('add_sym -> <empty>','add_sym',0,'p_add_sym','cparser.py',1493),
  ('pop_sym -> <empty>','pop_sym',0,'p_pop_sym','cparser.py',1500),
]
